{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/images/local-llm-deploy/open-webui.png","path":"images/local-llm-deploy/open-webui.png","modified":0,"renderable":0},{"_id":"source/images/local-llm-deploy/qwen2.png","path":"images/local-llm-deploy/qwen2.png","modified":0,"renderable":0},{"_id":"source/images/local-llm-deploy/select-model.png","path":"images/local-llm-deploy/select-model.png","modified":0,"renderable":0},{"_id":"source/images/Linux-disk-base/GPT.png","path":"images/Linux-disk-base/GPT.png","modified":0,"renderable":0},{"_id":"source/images/Linux-disk-base/MBR.png","path":"images/Linux-disk-base/MBR.png","modified":0,"renderable":0},{"_id":"source/images/wsl-linux-init/available_list.png","path":"images/wsl-linux-init/available_list.png","modified":0,"renderable":0},{"_id":"source/images/wsl-base/wsl-version.png","path":"images/wsl-base/wsl-version.png","modified":0,"renderable":0},{"_id":"source/images/wsl-base/installed.png","path":"images/wsl-base/installed.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/images/deploy-hexo/config.png","path":"images/deploy-hexo/config.png","modified":0,"renderable":0},{"_id":"source/images/deploy-hexo/deploy-config.png","path":"images/deploy-hexo/deploy-config.png","modified":0,"renderable":0},{"_id":"source/images/deploy-hexo/page.png","path":"images/deploy-hexo/page.png","modified":0,"renderable":0},{"_id":"source/images/deploy-hexo/deploy-git.png","path":"images/deploy-hexo/deploy-git.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/Ansible-Inventory-Intro.md","hash":"5d3f4d741b266ad96c85d4b9fb0553c33a1a292f","modified":1720764630000},{"_id":"source/_posts/ansible-ad-hoc.md","hash":"106ab5a2ba5ac4a23b9d7ffb32ac3c44c6ef82d1","modified":1720773924000},{"_id":"source/_posts/multipass.md","hash":"32c78f871434334a07fdf4fef8b5579a54ae16e9","modified":1720416276000},{"_id":"source/_posts/tmux.md","hash":"94cd37028a9a1689d7ee1931f1bd57f9d7e9af8e","modified":1722823537256},{"_id":"source/_posts/Linux-disk-base.md","hash":"27aadaad2d54a4e4ffbf8e9546c404a8ae6e484d","modified":1721268779000},{"_id":"source/_posts/k8s-K8s-Install.md","hash":"fea927488101eb68ee81a35d6f652f63c9779abf","modified":1720416737000},{"_id":"source/_posts/k8s-Prepare-Environment.md","hash":"2171d9ee06a377b5273ee150b7a06cd4b2235fa1","modified":1720416624000},{"_id":"source/_posts/git-intro.md","hash":"977b8c4d9f56d46a42580aa088198702449ab849","modified":1722832346243},{"_id":"source/_posts/local-llm-deploy.md","hash":"f562567fbcd1a596cd76745236448a7865666d22","modified":1722868198916},{"_id":"source/_posts/WSL-Linux-init-proxy.md","hash":"ae8f38b3f99104c3a7799ac07b150fdb776f5b8e","modified":1722823537256},{"_id":"source/_posts/wsl-base.md","hash":"fb3c59cf4dce0d51882d385a4de796c8a88613d9","modified":1722865699329},{"_id":"source/images/local-llm-deploy/qwen2.png","hash":"c36a3cd1620c755d1082c161c37953c1888009ef","modified":1722777062000},{"_id":"source/about/index.md","hash":"f4c5043e418ceb1c2043b7e5c10322891c877d88","modified":1720411569000},{"_id":"source/images/wsl-base/installed.png","hash":"ff2b7708d9be1234f7a1fa8034006b4d4903b4a6","modified":1722755170000},{"_id":"source/images/wsl-base/wsl-version.png","hash":"1a296250b17783b1b3ac0b32e4474a3c7c60685e","modified":1722754393000},{"_id":"source/images/local-llm-deploy/select-model.png","hash":"f2c09ddd3f9d4846318cd7b2a781837501c40629","modified":1722776966000},{"_id":"source/images/Linux-disk-base/MBR.png","hash":"a2c9f79c3fb1798e7b1e93505df873ff8187fc4d","modified":1721265927000},{"_id":"source/images/local-llm-deploy/open-webui.png","hash":"1725010cd835fc639cf0769bc08bbe00bacb628a","modified":1722776805000},{"_id":"source/images/wsl-linux-init/available_list.png","hash":"a5385bcf4da7604b5fbdb790a595d86f2f4e080a","modified":1722772375000},{"_id":"source/images/Linux-disk-base/GPT.png","hash":"a8e91973ee389da4999e518656edde64d9bf4f20","modified":1721266180000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"c640b57695b7b6002399711f1a7708b0f6c05b84","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"759d78d97cfe364a4bcf0b5cd2d3505967674276","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"2253e1bc61694b3bdc5e434ea2660d13d941b50e","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"ff9b0e1fb9dba665af2f1e4a577f8cb9e840464b","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"9bf0d357a607a282f3b9cb04525a4df0cc2a8b76","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"33c3317cdcee062789de2336dd8d0cc7f86d3650","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4d48c424e47ff9a17a563167ea5f480890267adf","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"966689d7c5e4320008285395fbaa2751f6209be5","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"82bb06686158ebe160a631c79f156cd4fde35656","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/fold.js","hash":"73e4fd12ce3e47981479391ed354b7d9d3279f70","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"0857aa86db2a711ae5c77218a9e3fa686d0e87b1","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/crypto.js","hash":"ae4ad8a188ef5b3fa6818b01629fc962b3de8551","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"bd8376e1cf7892dc2daa58f2f443574be559fdbf","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"a5fe1deccb73b5f578797dbb11038efc15f63ce8","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"5891534506b959a2f559f29e122baa3eb9159d93","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"c5939d14065d38c86e16d1642e154dde5a23e830","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"85492ef64d7e5f70f0f7e46d570bbc911e686d7e","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"25fb6fa4c783b847c632584c49a7e1593cdb2f5d","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"c96d36aa8fe20f0c3c1a29ee2473cd8064b10f73","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"cd432a6411ccac7df47e6a300fb1a872cfc763e7","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/moment.ejs","hash":"4ff3fb1b60ccc95a0af3bbdbd0757fedefc088b5","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1720411532000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1720411533000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1720411533000},{"_id":"public/local-search.xml","hash":"3175e499f51b99881047aeb12faa28328ae9ea7c","modified":1722869596636},{"_id":"public/about/index.html","hash":"a9cd97259630f5f42bfa5ed1aded0cde46cc7481","modified":1722783792218},{"_id":"public/images/local-llm-deploy/qwen2.png","hash":"c36a3cd1620c755d1082c161c37953c1888009ef","modified":1722783792218},{"_id":"public/images/local-llm-deploy/open-webui.png","hash":"1725010cd835fc639cf0769bc08bbe00bacb628a","modified":1722783792218},{"_id":"public/images/Linux-disk-base/MBR.png","hash":"a2c9f79c3fb1798e7b1e93505df873ff8187fc4d","modified":1722783792218},{"_id":"public/archives/index.html","hash":"2d578ca9a25c708a3c03e0232d7290c47b2ae7fc","modified":1722832639637},{"_id":"public/archives/2024/index.html","hash":"36226ad06c0f943b9770163cf5a20cb6b34a03ab","modified":1722832639637},{"_id":"public/archives/2024/07/index.html","hash":"38441d4b8391c99f2fd137ee1121ce4b7824827f","modified":1722832433755},{"_id":"public/archives/page/2/index.html","hash":"b0977d45940313822b380952cd1482d83ae504a0","modified":1722832433755},{"_id":"public/archives/2024/page/2/index.html","hash":"5816c426e8934c498b74ee7ff3ebd21016922a88","modified":1722832433755},{"_id":"public/archives/2024/08/index.html","hash":"cc2a3ce9765513db1247031b8202878e26680454","modified":1722832639637},{"_id":"public/tags/ansible/index.html","hash":"d3b0c9a896249bdc4f7741fba906d82a523c1f2d","modified":1722783792218},{"_id":"public/tags/linux/index.html","hash":"c6a8e6293cfc799ddef611732bd701990c52c5ac","modified":1722783792218},{"_id":"public/tags/tools/index.html","hash":"7c58192f9136b1067a44887bcad24d4d17f38e4d","modified":1722832639637},{"_id":"public/tags/k8s/index.html","hash":"a9300422367f1f446dd84c868107a1dcbf395fec","modified":1722783792218},{"_id":"public/404.html","hash":"2f850fe637c31ecd1bdc6d40e752cba57d93ac3d","modified":1722783792218},{"_id":"public/tags/index.html","hash":"4af5cc7e5f773673317b8c4413bc114b6cff67d2","modified":1722783792218},{"_id":"public/page/2/index.html","hash":"f516e2f965d5a2ec3f60107d2e73bfed31113ffb","modified":1722832433755},{"_id":"public/categories/index.html","hash":"31ada45f45a418ec321417e34a6d20d7778b19df","modified":1722783792218},{"_id":"public/links/index.html","hash":"97b0202cbf0c53c565818c0fb71c9e575379d2ed","modified":1722783792218},{"_id":"public/2024/08/04/local-llm-deploy/index.html","hash":"91631d914c7899df653841eedee60252c1b4c416","modified":1722869596636},{"_id":"public/2024/07/17/Linux-disk-base/index.html","hash":"5a7d0ef6abd4bd0762a2eee11ed433d002d0f43b","modified":1722783792218},{"_id":"public/2024/08/04/wsl-base/index.html","hash":"8e7ff0662b6c83d5a709a11ba83a3e90e7edc070","modified":1722869596636},{"_id":"public/2024/08/04/WSL-Linux-init-proxy/index.html","hash":"ad90cc1055efcee88c0267428ae21455fbd77e24","modified":1722832639637},{"_id":"public/2024/07/12/ansible-ad-hoc/index.html","hash":"52714d74c0c141ba2555f9e50facbca92f555a53","modified":1722783792218},{"_id":"public/2024/07/12/Ansible-Inventory-Intro/index.html","hash":"e0e946bc05baefdbb29617336726105be5833dca","modified":1722783792218},{"_id":"public/2024/07/11/tmux/index.html","hash":"00f95ad1b9a9c5d17485dd5016dd97af1dfb6c36","modified":1722823553423},{"_id":"public/2024/07/08/git-intro/index.html","hash":"9e0f098ec3e6ef254ce22dac6161c137e02a80bc","modified":1722832433755},{"_id":"public/2024/07/08/k8s-Prepare-Environment/index.html","hash":"d2109272f26d95b031505a12f25a50f9767ca641","modified":1722783792218},{"_id":"public/2024/07/08/multipass/index.html","hash":"d7f91d0cc8896ee4a30d977d354ed5d5b4fac233","modified":1722783792218},{"_id":"public/2024/07/08/k8s-K8s-Install/index.html","hash":"15dbf1cc9e8afc6061f485d7610af6958b1ebd8e","modified":1722783792218},{"_id":"public/index.html","hash":"fdfc0ae6474023bafad5e22c6c9e073b1616478c","modified":1722869596636},{"_id":"public/images/wsl-base/installed.png","hash":"ff2b7708d9be1234f7a1fa8034006b4d4903b4a6","modified":1722783792218},{"_id":"public/images/wsl-base/wsl-version.png","hash":"1a296250b17783b1b3ac0b32e4474a3c7c60685e","modified":1722783792218},{"_id":"public/images/wsl-linux-init/available_list.png","hash":"a5385bcf4da7604b5fbdb790a595d86f2f4e080a","modified":1722783792218},{"_id":"public/images/local-llm-deploy/select-model.png","hash":"f2c09ddd3f9d4846318cd7b2a781837501c40629","modified":1722783792218},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1722783792218},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1722783792218},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1722783792218},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1722783792218},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1722783792218},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1722783792218},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1722783792218},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1722783792218},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1722783792218},{"_id":"public/js/color-schema.js","hash":"c5939d14065d38c86e16d1642e154dde5a23e830","modified":1722783792218},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1722783792218},{"_id":"public/js/events.js","hash":"5891534506b959a2f559f29e122baa3eb9159d93","modified":1722783792218},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1722783792218},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1722783792218},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1722783792218},{"_id":"public/css/main.css","hash":"7d7590cfe0261084ad357d5f51cb14d13db826d8","modified":1722783792218},{"_id":"public/images/Linux-disk-base/GPT.png","hash":"a8e91973ee389da4999e518656edde64d9bf4f20","modified":1722783792218},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1722783792218},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1722783792218},{"_id":"source/_posts/deploy-hexo.md","hash":"15f8be24edb3e77e896297aab4c2deeec557d425","modified":1722832626076},{"_id":"source/images/deploy-hexo/deploy-config.png","hash":"1e70b402d1544d7ea66505b6567ec54f5017d4b3","modified":1722828613031},{"_id":"source/images/deploy-hexo/page.png","hash":"0fe763992ed1c972fb70a740caee471c0ba2300f","modified":1722828265565},{"_id":"source/images/deploy-hexo/config.png","hash":"da9d1ca1c2caecb46e565d8877a1ffcfe67a8333","modified":1722827129475},{"_id":"source/images/deploy-hexo/deploy-git.png","hash":"999f8a8eaf9ecfebf9a37c3fb2006343cd71fb2d","modified":1722830649807},{"_id":"public/2024/08/05/deploy-hexo/index.html","hash":"292f3adf6d8740ac6bf1c56e48ea82ab592ea80b","modified":1722832639637},{"_id":"public/images/deploy-hexo/deploy-config.png","hash":"1e70b402d1544d7ea66505b6567ec54f5017d4b3","modified":1722832433755},{"_id":"public/images/deploy-hexo/page.png","hash":"0fe763992ed1c972fb70a740caee471c0ba2300f","modified":1722832433755},{"_id":"public/images/deploy-hexo/deploy-git.png","hash":"999f8a8eaf9ecfebf9a37c3fb2006343cd71fb2d","modified":1722832433755},{"_id":"public/images/deploy-hexo/config.png","hash":"da9d1ca1c2caecb46e565d8877a1ffcfe67a8333","modified":1722832433755},{"_id":"source/_posts/shell-action.md","hash":"a6d54dafbdfe85c3f33e58de199721c0f7085006","modified":1722950469903}],"Category":[],"Data":[],"Page":[{"title":"about","layout":"about","date":"2024-07-08T02:21:57.000Z","_content":"\n","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ndate: 2024-07-08 10:21:57\n---\n\n","updated":"2024-07-08T04:06:09.000Z","path":"about/index.html","comments":1,"_id":"clzfp1511000489iqfjz32smw","content":"","excerpt":"","more":""}],"Post":[{"title":"Linux 磁盘基础","date":"2024-07-17T02:53:47.000Z","_content":"\n# Linux 磁盘基础\n\n先从如何使用开始\n\n- 如何查磁盘占用大小及基本信息\n\n  将会用到的命令：\n\n  - df\n  - lsblk\n  - du\n  - blkid\n\n- 如何进行磁盘分区、制作逻辑卷、格式化、挂载\n\n  将会用到的命令：\n\n  - fdisk\n  - gdisk\n  - parted\n  - pvcreate\n  - vgcreate\n  - lvcreate\n  - mkfs\n  - mount\n\n然后简单了解磁盘分区的原理\n\n- MBR\n- GPT\n\n最后是操作磁盘时可能遇到的各种问题。例如机器添加磁盘后系统层面没有显示、已分区没做逻辑卷的磁盘扩容、曾经使用过的磁盘换到新机器使用报错、已删除文件`df -h`仍然显示占用、挂载类似nfs等网络盘时操作卡顿、实际占用与显示不符等等...\n\n\n\n## 磁盘信息查看\n\n### 1. 查看磁盘使用量 -- display file system\n\n   ```bash\ndf -h # 二进制计算方式，以人类友好形式显示，如1024M=1G\ndf -l # 只列出本地文件系统，即排除nfs或其他类似的如nas盘存储挂载\ndf -T # 显示挂载类型\ndf -H # 十进制计算方式，以人类友好形式显示，如1000M=10G\ndf -t xfs # 指定显示xfs类型的挂载\ndf -i\n   ```\n\n\n\n### 2. 查看磁盘分区挂载信息 -- list block\n\n   ```bash\nlsblk\nlsblk -l \n   ```\n\n   使用`lsblk`输出如下:\n\n   ```\nNAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS\nsda       8:0    0   15G  0 disk\n├─sda1    8:1    0   14G  0 part /\n├─sda14   8:14   0    4M  0 part\n├─sda15   8:15   0  106M  0 part /boot/efi\n└─sda16 259:0    0  913M  0 part /boot\nsr0      11:0    1   54K  0 rom\n   ```\n\n   \n\n\n### 3. 查看具体文件或目录大小 -- disk usage\n\n   ```bash\ndu -sh # 计算总大小\ndu -ahd 0 # 与上述相同\ndu -sh * # 计算当前目录下所有文件具体大小，最后计算出总值，并以人类友好形式输出\ndu -ahd 1 # 与上述相同\n# -d 在有某些版本不可用，需要换成--max-depth 1\ndu -ahd 1 --time # 显示文件或目录修改时间\ndu -ahd 1 --time | sort -h ## 以人类友好形式进行排序输出\ndu -ahd 1 ./ -x ./ # 跳过不同文件系统的目录，经常可以用来规避nfs这类网络挂载\n   ```\n\n\n\n### 4. 其他命令\n\n   ```bash\nblkid ## block id, 可以用来查看uuid及文件系统类型\n## 以下命令可以用来查看分区情况\nfdisk -l \ngdisk -l\nparted /dev/vda print\n   ```\n\n\n\n   ## 磁盘分区、格式化、挂载\n\n> 磁盘有价，数据无价，对磁盘进行操作时请务必做好数据备份！！！\n\n### 1. 分区\n\n一般分区有两种常用形式，`GPT`和`MBR`\n\nMBR格式最多只能有四个主分区，若想继续分区就需要建立逻辑分区。\n\nGPT格式没有分区限制，建议使用GPT分区\n\n1. **fdisk**\n\nfdisk使用方法如下，进入交互式命令行后，用`p`查看磁盘信息，`n`新建分区，下面的操作无特殊指定回车即可。\n\n如有指定，一般起始扇区默认即可，结束扇区可用`+10G`类似写法指定，`+`号是在现有基础上增加空间。\n\n有时候缩容操作（一般不考虑缩容）不会指定+号，直接指定大小而不是在原基础上增加。\n\n```bash\nroot@docker:~# fdisk /dev/sda\n\nWelcome to fdisk (util-linux 2.39.3).\nChanges will remain in memory only, until you decide to write them.\nBe careful before using the write command.\n\n\nCommand (m for help): n\nPartition number (2-13,17-128, default 2):\nFirst sector (33556480-52428766, default 33556480):\nLast sector, +/-sectors or +/-size{K,M,G,T,P} (33556480-52428766, default 52426751):\n\nCreated a new partition 2 of type 'Linux filesystem' and of size 9 GiB.\n\nCommand (m for help): p\nDisk /dev/sda: 25 GiB, 26843545600 bytes, 52428800 sectors\nDisk model: VBOX HARDDISK\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: gpt\nDisk identifier: A102F557-254C-4E8A-BB7B-5CE2CBC42B40\n\nDevice        Start      End  Sectors  Size Type\n/dev/sda1   2099200 33556479 31457280   15G Linux filesystem\n/dev/sda2  33556480 52426751 18870272    9G Linux filesystem\n/dev/sda14     2048    10239     8192    4M BIOS boot\n/dev/sda15    10240   227327   217088  106M EFI System\n/dev/sda16   227328  2097152  1869825  913M Linux extended boot\n\nPartition table entries are not in disk order.\n\nCommand (m for help): w\nThe partition table has been altered.\nSyncing disks.\n```\n\n\n\n2. **gdisk**\n\ngdisk的操作类似于fdisk，多了一步需要输入Hex code，可回车默认。\n\n如果保存退出后`lsblk`查看不到分区，可使用`partprobe`刷新分区表\n\n```bash\nroot@docker:~# gdisk /dev/sda\nGPT fdisk (gdisk) version 1.0.10\n\nPartition table scan:\n  MBR: protective\n  BSD: not present\n  APM: not present\n  GPT: present\n\nFound valid GPT with protective MBR; using GPT.\n\nCommand (? for help): p\nDisk /dev/sda: 52428800 sectors, 25.0 GiB\nModel: VBOX HARDDISK\nSector size (logical/physical): 512/512 bytes\nDisk identifier (GUID): A102F557-254C-4E8A-BB7B-5CE2CBC42B40\nPartition table holds up to 128 entries\nMain partition table begins at sector 2 and ends at sector 33\nFirst usable sector is 34, last usable sector is 52428766\nPartitions will be aligned on 2048-sector boundaries\nTotal free space is 18876348 sectors (9.0 GiB)\n\nNumber  Start (sector)    End (sector)  Size       Code  Name\n   1         2099200        33556479   15.0 GiB    8300\n  14            2048           10239   4.0 MiB     EF02\n  15           10240          227327   106.0 MiB   EF00\n  16          227328         2097152   913.0 MiB   EA00\n\nCommand (? for help): n\nPartition number (2-128, default 2):\nFirst sector (34-52428766, default = 33556480) or {+-}size{KMGTP}:\nLast sector (33556480-52428766, default = 52426751) or {+-}size{KMGTP}: +8G\nCurrent type is 8300 (Linux filesystem)\nHex code or GUID (L to show codes, Enter = 8300): 8e00\nChanged type of partition to 'Linux LVM'\n\nCommand (? for help): p\nDisk /dev/sda: 52428800 sectors, 25.0 GiB\nModel: VBOX HARDDISK\nSector size (logical/physical): 512/512 bytes\nDisk identifier (GUID): A102F557-254C-4E8A-BB7B-5CE2CBC42B40\nPartition table holds up to 128 entries\nMain partition table begins at sector 2 and ends at sector 33\nFirst usable sector is 34, last usable sector is 52428766\nPartitions will be aligned on 2048-sector boundaries\nTotal free space is 2099132 sectors (1025.0 MiB)\n\nNumber  Start (sector)    End (sector)  Size       Code  Name\n   1         2099200        33556479   15.0 GiB    8300\n   2        33556480        50333695   8.0 GiB     8E00  Linux LVM\n  14            2048           10239   4.0 MiB     EF02\n  15           10240          227327   106.0 MiB   EF00\n  16          227328         2097152   913.0 MiB   EA00\n\nCommand (? for help): w\n\nFinal checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING\nPARTITIONS!!\n\nDo you want to proceed? (Y/N): y\nOK; writing new GUID partition table (GPT) to /dev/sda.\nWarning: The kernel is still using the old partition table.\nThe new table will be used at the next reboot or after you\nrun partprobe(8) or kpartx(8)\nThe operation has completed successfully.\n\nroot@docker:~# lsblk\nNAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS\nloop0     7:0    0    4K  1 loop /snap/bare/5\nloop1     7:1    0 74.2M  1 loop /snap/core22/1380\nloop2     7:2    0    1M  1 loop /snap/multipass-sshfs/145\nloop3     7:3    0 38.8M  1 loop /snap/snapd/21759\nsda       8:0    0   25G  0 disk\n├─sda1    8:1    0   15G  0 part /\n├─sda14   8:14   0    4M  0 part\n├─sda15   8:15   0  106M  0 part /boot/efi\n└─sda16 259:0    0  913M  0 part /boot\nsr0      11:0    1   54K  0 rom\nroot@docker:~# partprobe -s\n```\n\n\n\n3. **parted**\n\n> 需谨慎使用，该命令操作会直接生效，不像gdisk、fdisk先将数据写入内存\n\n`parted` 命令也可以直接运行进入类似`fdisk`的交互式界面，但本人更习惯直接命令行操作\n\n```bash\n## 指定分区形式以及分区名和大小\nparted /dev/sda mklabel gpt mkpart primary 0 100%\n## 更倾向于用扇区来指定大小，假设上一个分区的结束扇区为227328，则新分区可以+1从227329扇区开始。\n## 此处会自动调整结束扇区，因为磁盘尾还需要存放GPT备份表\nparted /dev/sda mklabel gpt mkpart primary 227329s 100%\n```\n\n### 2. 格式化\n\n一个磁盘分区完后还不能直接挂载使用，还需要进行文件系统格式化，格式化完成后才能挂载使用。\n\n一般常见的为xfs、ext4格式，建议使用xfs格式，对应的命令为\n\n```bash\nmkfs.xfs /dev/sda1\nmkfs.ext4 /dev/sda1\n\n## 格式化完成后可以用blkid查看信息\nblkid /dev/sda1 \n```\n\n### 3. 挂载\n\n挂载可以是临时挂载，也可以开机自动挂载\n\n- 临时挂载\n\n  关机重启挂载消失\n\n  ```bash\n  mount -t xfs /dev/sda2 /tmp\n  ```\n\n- 开机自动挂载\n\n  将挂载写入`/etc/fstab`文件即可实现开机自挂载\n\n  ```bash\n  echo \"/dev/sda2   /tmp        xfs   defaults     0 0\" >> /etc/fstab\n  ```\n\n### 4. 制作逻辑卷\n\nLVM允许系统将多个物理硬盘或分区组合成一个逻辑卷组，‌从而形成一个大的存储池。利用逻辑卷的特性可以实现跨盘扩容，因此在制作逻辑卷的时候最好使用性能相近的磁盘，否则将会影响逻辑卷整体性能。\n\n```bash\n## 先将某块磁盘或分区创建为PV\npvcreate /dev/sda\n## 将sda创建一个名为vg1的卷组\nvgcreate vg1 /dev/sda\n## 在vg1卷组创建一个名为lv1的逻辑卷，将所有vg1空间都使用\nlvcreate -l +100%free -n lv1 vg1\n## 在vg1卷组创建一个名为lv1,大小为40G的逻辑卷\nlvcreate -L 40G -n lv1 vg1\n## 制作文件系统\nmkfs.xfs /dev/vg1/lv1\n## 挂载，同样可以写入fstab\nmount /dev/vg1/lv1 /root/tmp/\n```\n\n### 5. 磁盘扩容\n\n通常磁盘需要做逻辑卷或者处于最后一个分区的时候进行扩容是最方便的。\n\n扩容前一定需要做好备份！！！\n\n1. 逻辑卷扩容\n\n```bash\n## 首先加入pv\npvcreate /dev/sda\n## 然后扩展vg\nvgextend vg1 /dev/sda\n## 扩充lv\nlvextend -l +100%free /dev/vg1/lv1\nlvextend -L +20G /dev/vg1/lv1\n## 同步文件系统\n## xfs \nxfs_growfs /dev/vg1/lv1\n## ext4\nresize2fs /dev/vg1/lv1\n```\n\n2. 没分区的整块盘\n\n```bash\n## 可以直接同步文件系统\nxfs_growfs /dev/sda\nresize2fs /dev/sda\n```\n\n\n\n## 磁盘分区类型及原理\n\n#### MBR（Master Boot Record）分区格式\n\n早期磁盘第一个扇区（`521bytes`）里面包含重要的信息`MBR（Master Boot Record）`，其中`446 bytes`，安装开机管理程序的地方；剩下的`64bytes`记录硬盘分区的数据，即分区表，如图\n\n![mbr](../images/Linux-disk-base/MBR.png)\n\nMBR只支持四个主分区，且最大只支持2TB的硬盘。\n\n若想多个分区，需要使用扩展分区，扩展分区从5开始计数。\n\n#### GPT（GUID Partition Table）分区格式\n\nGPT将磁盘划分为一块块的`逻辑区块地址（Logical Block Address，简称LBA）` 来处理，每个LBA预设计为512bytes，即一个扇区的大小；同时改进MBR之用一块扇区来标识分区表的弊端，GPT使用了前后各34个LBA来标识分区表信息（最后的34各区可以理解为备份，达到高可用），如图\n\n![gpt](../images/Linux-disk-base/GPT.png)\n\n LBA的标识是从0开始的，LBA0-34共35块，这里分别阐述下其含义:\n\n- `LBA0` :包含两部分，一部分是类似MBR的446bytes,存储开机管理程序，第二部分则是存储一个特殊的标记，标识该磁盘为GPT格式，而看不懂GPT分区的程序则无法操作该磁盘，起到保护作用，放心，目前基本的管理程序都能识别GPT格式，所以该LBA块实际上与分区信息并无直接关联，这就是为啥不算入34LBA的原因\n- `LBA1` :GPT的表头，记录分区本身的位置与大小，同时记录分区在备份中最后34个LBA中的位置，方便恢复\n- `LBA2-34`:共32块LBA，每块LBA记录4笔分区表，共支持4\\*32=128笔分区；而每个LBA默认为512bytes，则每笔记录用到512/4=128bytes,每笔记录拿出64bytes来记录开始、结束的扇区号码，因此对一个单一分区槽而言，支持的最大容量为2^64∗512bytes=2^63∗1Kbytes=233TB=8ZB\n\n\n\n# 其他事项\n\n## 1. 已添加磁盘无法识别\n\n有时候机房加了磁盘可能不会在系统层面立即显示出来，需要重启服务器，也可以重新扫描下scsi总线\n\n```bash\nfor i in /sys/class/scsi_host/*/scan; do echo $i;echo \"- - -\" > $i; done\n```\n\n\n\n## 2. 已分区没做lvm的磁盘扩容\n\n两种方案，但都需要是最后一个分区才能进行扩容\n\n- 其一，使用`fdisk`扩容。因为fdisk在进行操作的时候分区数据不会直接写入磁盘，而是先会保存在内存中，所以可以利用这点来进行扩容\n\n  ```bash\n  fdisk /dev/sda\n  ## 进入后用p查看分区\n  ## 按d 删除最后一个分区\n  ## 然后再n，创建新分区。\n  ## 新分区的大小必须比原来的分区大，不能缩小，否则会造成数据丢失\n  ## 最后w保存，然后xfs_growf或resize2fs同步对应文件系统即可\n  ```\n  \n- 其二，可使用`growpart`来进行扩容\n\n  ```bash\n  growpart /dev/sda 1\n  ## 表示对/dev/sda的分区1进行扩容\n  ```\n\n\n\n\n## 3. 旧磁盘换到新机器无法使用\n\n面对这个情况其实如果在确定磁盘里面的数据进行了备份，或者不需要的时候可以直接进行强制格式化。\n\n也可以`dd`去备份一下磁盘头和磁盘尾信息，或者整个磁盘\n\n如下有一个磁盘sda，通过parted查看磁盘信息，这里建议把unit切换成s单位来看会更精确更清楚些\n\n```shell\nroot@docker:~# parted /dev/sda u s p\nModel: ATA VBOX HARDDISK (scsi)\nDisk /dev/sda: 31457280s\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nDisk Flags:\n\nNumber  Start     End        Size       File system  Name  Flags\n14      2048s     10239s     8192s                         bios_grub\n15      10240s    227327s    217088s    fat32              boot, esp\n16      227328s   2097152s   1869825s   ext4               bls_boot\n 1      2099200s  31457246s  29358047s  ext4\n```\n\n在这个输出中可以看到磁盘总大小31457280个扇区，磁盘实际分配到第31457246个扇区结束，`31457280-31457246=34`，也就是刚好留下了GPT格式备份的34个LBA。\n\n```bash\n## dd默认1count为512B，与扇区size对应\n## 备份前34个扇区\ndd if=/dev/sda of=~/sda.img.bak count=34\n## 跳过前面31457246个扇区进行备份\ndd if=/dev/sda of=~/sda.img.bak skip=31457246\n```\n\n如下输出可见备份了最后34个扇区\n\n\n```shell\nroot@docker:~# dd if=/dev/sda of=~/sda.end.bak skip=31457246\n34+0 records in\n34+0 records out\n17408 bytes (17 kB, 17 KiB) copied, 0.000214267 s, 81.2 MB/s\n```\n\n备份好后可以直接用`dd`命令把磁头磁尾清空即可\n\n```bash\ndd if=/dev/zero of=/dev/sda count=34\ndd if=/dev/zero of=/dev/sda skip=31457246\n```\n\n\n\n## 4. 已删除文件占用空间\n\n这种情况一般是有进程在占用被删除的文件，从而导致空间未释放\n\n```bash\n## 可使用lsof来排查，找到对应的pid\nlsof | grep deleted\n## 非业务时间段可以通过 kill对应进程来释放\n## 但业务时间段肯定不能这样操作\n## 所以有了第二种方法\nls -l /proc/$pid/fd/* | grep $filename\necho > /proc/$pid/fd/$fdnum\n```\n\n\n\n## 5. 实际占用与显示不符\n\n一可能是前面说的已删除文件后`df`没有变化\n\n二可能是覆盖挂载\n\n三可能是计算的时候没有排除网络挂载\n\n前面已经介绍过第一种处理办法，下面介绍后面两种\n\n对于覆盖挂载可以在非业务时间将异常挂载的目录先卸载下来，然后去看看卸载后的该目录下面是否有文件，如有文件占用空间则属于覆盖挂载。\n\n对于网络挂载，可以在使用`du`命令的时候使用`-x`选项来进行排除（前面有介绍过），便可计算出当前本地的准确值。\n\n","source":"_posts/Linux-disk-base.md","raw":"---\ntitle: Linux 磁盘基础\ndate: 2024-07-17 10:53:47\ntags: linux\n---\n\n# Linux 磁盘基础\n\n先从如何使用开始\n\n- 如何查磁盘占用大小及基本信息\n\n  将会用到的命令：\n\n  - df\n  - lsblk\n  - du\n  - blkid\n\n- 如何进行磁盘分区、制作逻辑卷、格式化、挂载\n\n  将会用到的命令：\n\n  - fdisk\n  - gdisk\n  - parted\n  - pvcreate\n  - vgcreate\n  - lvcreate\n  - mkfs\n  - mount\n\n然后简单了解磁盘分区的原理\n\n- MBR\n- GPT\n\n最后是操作磁盘时可能遇到的各种问题。例如机器添加磁盘后系统层面没有显示、已分区没做逻辑卷的磁盘扩容、曾经使用过的磁盘换到新机器使用报错、已删除文件`df -h`仍然显示占用、挂载类似nfs等网络盘时操作卡顿、实际占用与显示不符等等...\n\n\n\n## 磁盘信息查看\n\n### 1. 查看磁盘使用量 -- display file system\n\n   ```bash\ndf -h # 二进制计算方式，以人类友好形式显示，如1024M=1G\ndf -l # 只列出本地文件系统，即排除nfs或其他类似的如nas盘存储挂载\ndf -T # 显示挂载类型\ndf -H # 十进制计算方式，以人类友好形式显示，如1000M=10G\ndf -t xfs # 指定显示xfs类型的挂载\ndf -i\n   ```\n\n\n\n### 2. 查看磁盘分区挂载信息 -- list block\n\n   ```bash\nlsblk\nlsblk -l \n   ```\n\n   使用`lsblk`输出如下:\n\n   ```\nNAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS\nsda       8:0    0   15G  0 disk\n├─sda1    8:1    0   14G  0 part /\n├─sda14   8:14   0    4M  0 part\n├─sda15   8:15   0  106M  0 part /boot/efi\n└─sda16 259:0    0  913M  0 part /boot\nsr0      11:0    1   54K  0 rom\n   ```\n\n   \n\n\n### 3. 查看具体文件或目录大小 -- disk usage\n\n   ```bash\ndu -sh # 计算总大小\ndu -ahd 0 # 与上述相同\ndu -sh * # 计算当前目录下所有文件具体大小，最后计算出总值，并以人类友好形式输出\ndu -ahd 1 # 与上述相同\n# -d 在有某些版本不可用，需要换成--max-depth 1\ndu -ahd 1 --time # 显示文件或目录修改时间\ndu -ahd 1 --time | sort -h ## 以人类友好形式进行排序输出\ndu -ahd 1 ./ -x ./ # 跳过不同文件系统的目录，经常可以用来规避nfs这类网络挂载\n   ```\n\n\n\n### 4. 其他命令\n\n   ```bash\nblkid ## block id, 可以用来查看uuid及文件系统类型\n## 以下命令可以用来查看分区情况\nfdisk -l \ngdisk -l\nparted /dev/vda print\n   ```\n\n\n\n   ## 磁盘分区、格式化、挂载\n\n> 磁盘有价，数据无价，对磁盘进行操作时请务必做好数据备份！！！\n\n### 1. 分区\n\n一般分区有两种常用形式，`GPT`和`MBR`\n\nMBR格式最多只能有四个主分区，若想继续分区就需要建立逻辑分区。\n\nGPT格式没有分区限制，建议使用GPT分区\n\n1. **fdisk**\n\nfdisk使用方法如下，进入交互式命令行后，用`p`查看磁盘信息，`n`新建分区，下面的操作无特殊指定回车即可。\n\n如有指定，一般起始扇区默认即可，结束扇区可用`+10G`类似写法指定，`+`号是在现有基础上增加空间。\n\n有时候缩容操作（一般不考虑缩容）不会指定+号，直接指定大小而不是在原基础上增加。\n\n```bash\nroot@docker:~# fdisk /dev/sda\n\nWelcome to fdisk (util-linux 2.39.3).\nChanges will remain in memory only, until you decide to write them.\nBe careful before using the write command.\n\n\nCommand (m for help): n\nPartition number (2-13,17-128, default 2):\nFirst sector (33556480-52428766, default 33556480):\nLast sector, +/-sectors or +/-size{K,M,G,T,P} (33556480-52428766, default 52426751):\n\nCreated a new partition 2 of type 'Linux filesystem' and of size 9 GiB.\n\nCommand (m for help): p\nDisk /dev/sda: 25 GiB, 26843545600 bytes, 52428800 sectors\nDisk model: VBOX HARDDISK\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: gpt\nDisk identifier: A102F557-254C-4E8A-BB7B-5CE2CBC42B40\n\nDevice        Start      End  Sectors  Size Type\n/dev/sda1   2099200 33556479 31457280   15G Linux filesystem\n/dev/sda2  33556480 52426751 18870272    9G Linux filesystem\n/dev/sda14     2048    10239     8192    4M BIOS boot\n/dev/sda15    10240   227327   217088  106M EFI System\n/dev/sda16   227328  2097152  1869825  913M Linux extended boot\n\nPartition table entries are not in disk order.\n\nCommand (m for help): w\nThe partition table has been altered.\nSyncing disks.\n```\n\n\n\n2. **gdisk**\n\ngdisk的操作类似于fdisk，多了一步需要输入Hex code，可回车默认。\n\n如果保存退出后`lsblk`查看不到分区，可使用`partprobe`刷新分区表\n\n```bash\nroot@docker:~# gdisk /dev/sda\nGPT fdisk (gdisk) version 1.0.10\n\nPartition table scan:\n  MBR: protective\n  BSD: not present\n  APM: not present\n  GPT: present\n\nFound valid GPT with protective MBR; using GPT.\n\nCommand (? for help): p\nDisk /dev/sda: 52428800 sectors, 25.0 GiB\nModel: VBOX HARDDISK\nSector size (logical/physical): 512/512 bytes\nDisk identifier (GUID): A102F557-254C-4E8A-BB7B-5CE2CBC42B40\nPartition table holds up to 128 entries\nMain partition table begins at sector 2 and ends at sector 33\nFirst usable sector is 34, last usable sector is 52428766\nPartitions will be aligned on 2048-sector boundaries\nTotal free space is 18876348 sectors (9.0 GiB)\n\nNumber  Start (sector)    End (sector)  Size       Code  Name\n   1         2099200        33556479   15.0 GiB    8300\n  14            2048           10239   4.0 MiB     EF02\n  15           10240          227327   106.0 MiB   EF00\n  16          227328         2097152   913.0 MiB   EA00\n\nCommand (? for help): n\nPartition number (2-128, default 2):\nFirst sector (34-52428766, default = 33556480) or {+-}size{KMGTP}:\nLast sector (33556480-52428766, default = 52426751) or {+-}size{KMGTP}: +8G\nCurrent type is 8300 (Linux filesystem)\nHex code or GUID (L to show codes, Enter = 8300): 8e00\nChanged type of partition to 'Linux LVM'\n\nCommand (? for help): p\nDisk /dev/sda: 52428800 sectors, 25.0 GiB\nModel: VBOX HARDDISK\nSector size (logical/physical): 512/512 bytes\nDisk identifier (GUID): A102F557-254C-4E8A-BB7B-5CE2CBC42B40\nPartition table holds up to 128 entries\nMain partition table begins at sector 2 and ends at sector 33\nFirst usable sector is 34, last usable sector is 52428766\nPartitions will be aligned on 2048-sector boundaries\nTotal free space is 2099132 sectors (1025.0 MiB)\n\nNumber  Start (sector)    End (sector)  Size       Code  Name\n   1         2099200        33556479   15.0 GiB    8300\n   2        33556480        50333695   8.0 GiB     8E00  Linux LVM\n  14            2048           10239   4.0 MiB     EF02\n  15           10240          227327   106.0 MiB   EF00\n  16          227328         2097152   913.0 MiB   EA00\n\nCommand (? for help): w\n\nFinal checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING\nPARTITIONS!!\n\nDo you want to proceed? (Y/N): y\nOK; writing new GUID partition table (GPT) to /dev/sda.\nWarning: The kernel is still using the old partition table.\nThe new table will be used at the next reboot or after you\nrun partprobe(8) or kpartx(8)\nThe operation has completed successfully.\n\nroot@docker:~# lsblk\nNAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS\nloop0     7:0    0    4K  1 loop /snap/bare/5\nloop1     7:1    0 74.2M  1 loop /snap/core22/1380\nloop2     7:2    0    1M  1 loop /snap/multipass-sshfs/145\nloop3     7:3    0 38.8M  1 loop /snap/snapd/21759\nsda       8:0    0   25G  0 disk\n├─sda1    8:1    0   15G  0 part /\n├─sda14   8:14   0    4M  0 part\n├─sda15   8:15   0  106M  0 part /boot/efi\n└─sda16 259:0    0  913M  0 part /boot\nsr0      11:0    1   54K  0 rom\nroot@docker:~# partprobe -s\n```\n\n\n\n3. **parted**\n\n> 需谨慎使用，该命令操作会直接生效，不像gdisk、fdisk先将数据写入内存\n\n`parted` 命令也可以直接运行进入类似`fdisk`的交互式界面，但本人更习惯直接命令行操作\n\n```bash\n## 指定分区形式以及分区名和大小\nparted /dev/sda mklabel gpt mkpart primary 0 100%\n## 更倾向于用扇区来指定大小，假设上一个分区的结束扇区为227328，则新分区可以+1从227329扇区开始。\n## 此处会自动调整结束扇区，因为磁盘尾还需要存放GPT备份表\nparted /dev/sda mklabel gpt mkpart primary 227329s 100%\n```\n\n### 2. 格式化\n\n一个磁盘分区完后还不能直接挂载使用，还需要进行文件系统格式化，格式化完成后才能挂载使用。\n\n一般常见的为xfs、ext4格式，建议使用xfs格式，对应的命令为\n\n```bash\nmkfs.xfs /dev/sda1\nmkfs.ext4 /dev/sda1\n\n## 格式化完成后可以用blkid查看信息\nblkid /dev/sda1 \n```\n\n### 3. 挂载\n\n挂载可以是临时挂载，也可以开机自动挂载\n\n- 临时挂载\n\n  关机重启挂载消失\n\n  ```bash\n  mount -t xfs /dev/sda2 /tmp\n  ```\n\n- 开机自动挂载\n\n  将挂载写入`/etc/fstab`文件即可实现开机自挂载\n\n  ```bash\n  echo \"/dev/sda2   /tmp        xfs   defaults     0 0\" >> /etc/fstab\n  ```\n\n### 4. 制作逻辑卷\n\nLVM允许系统将多个物理硬盘或分区组合成一个逻辑卷组，‌从而形成一个大的存储池。利用逻辑卷的特性可以实现跨盘扩容，因此在制作逻辑卷的时候最好使用性能相近的磁盘，否则将会影响逻辑卷整体性能。\n\n```bash\n## 先将某块磁盘或分区创建为PV\npvcreate /dev/sda\n## 将sda创建一个名为vg1的卷组\nvgcreate vg1 /dev/sda\n## 在vg1卷组创建一个名为lv1的逻辑卷，将所有vg1空间都使用\nlvcreate -l +100%free -n lv1 vg1\n## 在vg1卷组创建一个名为lv1,大小为40G的逻辑卷\nlvcreate -L 40G -n lv1 vg1\n## 制作文件系统\nmkfs.xfs /dev/vg1/lv1\n## 挂载，同样可以写入fstab\nmount /dev/vg1/lv1 /root/tmp/\n```\n\n### 5. 磁盘扩容\n\n通常磁盘需要做逻辑卷或者处于最后一个分区的时候进行扩容是最方便的。\n\n扩容前一定需要做好备份！！！\n\n1. 逻辑卷扩容\n\n```bash\n## 首先加入pv\npvcreate /dev/sda\n## 然后扩展vg\nvgextend vg1 /dev/sda\n## 扩充lv\nlvextend -l +100%free /dev/vg1/lv1\nlvextend -L +20G /dev/vg1/lv1\n## 同步文件系统\n## xfs \nxfs_growfs /dev/vg1/lv1\n## ext4\nresize2fs /dev/vg1/lv1\n```\n\n2. 没分区的整块盘\n\n```bash\n## 可以直接同步文件系统\nxfs_growfs /dev/sda\nresize2fs /dev/sda\n```\n\n\n\n## 磁盘分区类型及原理\n\n#### MBR（Master Boot Record）分区格式\n\n早期磁盘第一个扇区（`521bytes`）里面包含重要的信息`MBR（Master Boot Record）`，其中`446 bytes`，安装开机管理程序的地方；剩下的`64bytes`记录硬盘分区的数据，即分区表，如图\n\n![mbr](../images/Linux-disk-base/MBR.png)\n\nMBR只支持四个主分区，且最大只支持2TB的硬盘。\n\n若想多个分区，需要使用扩展分区，扩展分区从5开始计数。\n\n#### GPT（GUID Partition Table）分区格式\n\nGPT将磁盘划分为一块块的`逻辑区块地址（Logical Block Address，简称LBA）` 来处理，每个LBA预设计为512bytes，即一个扇区的大小；同时改进MBR之用一块扇区来标识分区表的弊端，GPT使用了前后各34个LBA来标识分区表信息（最后的34各区可以理解为备份，达到高可用），如图\n\n![gpt](../images/Linux-disk-base/GPT.png)\n\n LBA的标识是从0开始的，LBA0-34共35块，这里分别阐述下其含义:\n\n- `LBA0` :包含两部分，一部分是类似MBR的446bytes,存储开机管理程序，第二部分则是存储一个特殊的标记，标识该磁盘为GPT格式，而看不懂GPT分区的程序则无法操作该磁盘，起到保护作用，放心，目前基本的管理程序都能识别GPT格式，所以该LBA块实际上与分区信息并无直接关联，这就是为啥不算入34LBA的原因\n- `LBA1` :GPT的表头，记录分区本身的位置与大小，同时记录分区在备份中最后34个LBA中的位置，方便恢复\n- `LBA2-34`:共32块LBA，每块LBA记录4笔分区表，共支持4\\*32=128笔分区；而每个LBA默认为512bytes，则每笔记录用到512/4=128bytes,每笔记录拿出64bytes来记录开始、结束的扇区号码，因此对一个单一分区槽而言，支持的最大容量为2^64∗512bytes=2^63∗1Kbytes=233TB=8ZB\n\n\n\n# 其他事项\n\n## 1. 已添加磁盘无法识别\n\n有时候机房加了磁盘可能不会在系统层面立即显示出来，需要重启服务器，也可以重新扫描下scsi总线\n\n```bash\nfor i in /sys/class/scsi_host/*/scan; do echo $i;echo \"- - -\" > $i; done\n```\n\n\n\n## 2. 已分区没做lvm的磁盘扩容\n\n两种方案，但都需要是最后一个分区才能进行扩容\n\n- 其一，使用`fdisk`扩容。因为fdisk在进行操作的时候分区数据不会直接写入磁盘，而是先会保存在内存中，所以可以利用这点来进行扩容\n\n  ```bash\n  fdisk /dev/sda\n  ## 进入后用p查看分区\n  ## 按d 删除最后一个分区\n  ## 然后再n，创建新分区。\n  ## 新分区的大小必须比原来的分区大，不能缩小，否则会造成数据丢失\n  ## 最后w保存，然后xfs_growf或resize2fs同步对应文件系统即可\n  ```\n  \n- 其二，可使用`growpart`来进行扩容\n\n  ```bash\n  growpart /dev/sda 1\n  ## 表示对/dev/sda的分区1进行扩容\n  ```\n\n\n\n\n## 3. 旧磁盘换到新机器无法使用\n\n面对这个情况其实如果在确定磁盘里面的数据进行了备份，或者不需要的时候可以直接进行强制格式化。\n\n也可以`dd`去备份一下磁盘头和磁盘尾信息，或者整个磁盘\n\n如下有一个磁盘sda，通过parted查看磁盘信息，这里建议把unit切换成s单位来看会更精确更清楚些\n\n```shell\nroot@docker:~# parted /dev/sda u s p\nModel: ATA VBOX HARDDISK (scsi)\nDisk /dev/sda: 31457280s\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nDisk Flags:\n\nNumber  Start     End        Size       File system  Name  Flags\n14      2048s     10239s     8192s                         bios_grub\n15      10240s    227327s    217088s    fat32              boot, esp\n16      227328s   2097152s   1869825s   ext4               bls_boot\n 1      2099200s  31457246s  29358047s  ext4\n```\n\n在这个输出中可以看到磁盘总大小31457280个扇区，磁盘实际分配到第31457246个扇区结束，`31457280-31457246=34`，也就是刚好留下了GPT格式备份的34个LBA。\n\n```bash\n## dd默认1count为512B，与扇区size对应\n## 备份前34个扇区\ndd if=/dev/sda of=~/sda.img.bak count=34\n## 跳过前面31457246个扇区进行备份\ndd if=/dev/sda of=~/sda.img.bak skip=31457246\n```\n\n如下输出可见备份了最后34个扇区\n\n\n```shell\nroot@docker:~# dd if=/dev/sda of=~/sda.end.bak skip=31457246\n34+0 records in\n34+0 records out\n17408 bytes (17 kB, 17 KiB) copied, 0.000214267 s, 81.2 MB/s\n```\n\n备份好后可以直接用`dd`命令把磁头磁尾清空即可\n\n```bash\ndd if=/dev/zero of=/dev/sda count=34\ndd if=/dev/zero of=/dev/sda skip=31457246\n```\n\n\n\n## 4. 已删除文件占用空间\n\n这种情况一般是有进程在占用被删除的文件，从而导致空间未释放\n\n```bash\n## 可使用lsof来排查，找到对应的pid\nlsof | grep deleted\n## 非业务时间段可以通过 kill对应进程来释放\n## 但业务时间段肯定不能这样操作\n## 所以有了第二种方法\nls -l /proc/$pid/fd/* | grep $filename\necho > /proc/$pid/fd/$fdnum\n```\n\n\n\n## 5. 实际占用与显示不符\n\n一可能是前面说的已删除文件后`df`没有变化\n\n二可能是覆盖挂载\n\n三可能是计算的时候没有排除网络挂载\n\n前面已经介绍过第一种处理办法，下面介绍后面两种\n\n对于覆盖挂载可以在非业务时间将异常挂载的目录先卸载下来，然后去看看卸载后的该目录下面是否有文件，如有文件占用空间则属于覆盖挂载。\n\n对于网络挂载，可以在使用`du`命令的时候使用`-x`选项来进行排除（前面有介绍过），便可计算出当前本地的准确值。\n\n","slug":"Linux-disk-base","published":1,"updated":"2024-07-18T02:12:59.000Z","comments":1,"layout":"post","photos":[],"_id":"clzfp14zb000089iq6eln9c08","content":"<h1 id=\"Linux-磁盘基础\"><a href=\"#Linux-磁盘基础\" class=\"headerlink\" title=\"Linux 磁盘基础\"></a>Linux 磁盘基础</h1><p>先从如何使用开始</p>\n<ul>\n<li><p>如何查磁盘占用大小及基本信息</p>\n<p>将会用到的命令：</p>\n<ul>\n<li>df</li>\n<li>lsblk</li>\n<li>du</li>\n<li>blkid</li>\n</ul>\n</li>\n<li><p>如何进行磁盘分区、制作逻辑卷、格式化、挂载</p>\n<p>将会用到的命令：</p>\n<ul>\n<li>fdisk</li>\n<li>gdisk</li>\n<li>parted</li>\n<li>pvcreate</li>\n<li>vgcreate</li>\n<li>lvcreate</li>\n<li>mkfs</li>\n<li>mount</li>\n</ul>\n</li>\n</ul>\n<p>然后简单了解磁盘分区的原理</p>\n<ul>\n<li>MBR</li>\n<li>GPT</li>\n</ul>\n<p>最后是操作磁盘时可能遇到的各种问题。例如机器添加磁盘后系统层面没有显示、已分区没做逻辑卷的磁盘扩容、曾经使用过的磁盘换到新机器使用报错、已删除文件<code>df -h</code>仍然显示占用、挂载类似nfs等网络盘时操作卡顿、实际占用与显示不符等等…</p>\n<h2 id=\"磁盘信息查看\"><a href=\"#磁盘信息查看\" class=\"headerlink\" title=\"磁盘信息查看\"></a>磁盘信息查看</h2><h3 id=\"1-查看磁盘使用量-–-display-file-system\"><a href=\"#1-查看磁盘使用量-–-display-file-system\" class=\"headerlink\" title=\"1. 查看磁盘使用量 – display file system\"></a>1. 查看磁盘使用量 – display file system</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">df</span> -h <span class=\"hljs-comment\"># 二进制计算方式，以人类友好形式显示，如1024M=1G</span><br><span class=\"hljs-built_in\">df</span> -l <span class=\"hljs-comment\"># 只列出本地文件系统，即排除nfs或其他类似的如nas盘存储挂载</span><br><span class=\"hljs-built_in\">df</span> -T <span class=\"hljs-comment\"># 显示挂载类型</span><br><span class=\"hljs-built_in\">df</span> -H <span class=\"hljs-comment\"># 十进制计算方式，以人类友好形式显示，如1000M=10G</span><br><span class=\"hljs-built_in\">df</span> -t xfs <span class=\"hljs-comment\"># 指定显示xfs类型的挂载</span><br><span class=\"hljs-built_in\">df</span> -i<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-查看磁盘分区挂载信息-–-list-block\"><a href=\"#2-查看磁盘分区挂载信息-–-list-block\" class=\"headerlink\" title=\"2. 查看磁盘分区挂载信息 – list block\"></a>2. 查看磁盘分区挂载信息 – list block</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">lsblk<br>lsblk -l <br></code></pre></td></tr></table></figure>\n\n<p>   使用<code>lsblk</code>输出如下:</p>\n   <figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS<br>sda       8:0   <span class=\"hljs-number\"> 0 </span>  15G <span class=\"hljs-number\"> 0 </span>disk<br>├─sda1    8:1   <span class=\"hljs-number\"> 0 </span>  14G <span class=\"hljs-number\"> 0 </span>part /<br>├─sda14   8:14  <span class=\"hljs-number\"> 0 </span>   4M <span class=\"hljs-number\"> 0 </span>part<br>├─sda15   8:15  <span class=\"hljs-number\"> 0 </span> 106M <span class=\"hljs-number\"> 0 </span>part /boot/efi<br>└─sda16 259:0   <span class=\"hljs-number\"> 0 </span> 913M <span class=\"hljs-number\"> 0 </span>part /boot<br>sr0      11:0   <span class=\"hljs-number\"> 1 </span>  54K <span class=\"hljs-number\"> 0 </span>rom<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-查看具体文件或目录大小-–-disk-usage\"><a href=\"#3-查看具体文件或目录大小-–-disk-usage\" class=\"headerlink\" title=\"3. 查看具体文件或目录大小 – disk usage\"></a>3. 查看具体文件或目录大小 – disk usage</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">du</span> -sh <span class=\"hljs-comment\"># 计算总大小</span><br><span class=\"hljs-built_in\">du</span> -ahd 0 <span class=\"hljs-comment\"># 与上述相同</span><br><span class=\"hljs-built_in\">du</span> -sh * <span class=\"hljs-comment\"># 计算当前目录下所有文件具体大小，最后计算出总值，并以人类友好形式输出</span><br><span class=\"hljs-built_in\">du</span> -ahd 1 <span class=\"hljs-comment\"># 与上述相同</span><br><span class=\"hljs-comment\"># -d 在有某些版本不可用，需要换成--max-depth 1</span><br><span class=\"hljs-built_in\">du</span> -ahd 1 --time <span class=\"hljs-comment\"># 显示文件或目录修改时间</span><br><span class=\"hljs-built_in\">du</span> -ahd 1 --time | <span class=\"hljs-built_in\">sort</span> -h <span class=\"hljs-comment\">## 以人类友好形式进行排序输出</span><br><span class=\"hljs-built_in\">du</span> -ahd 1 ./ -x ./ <span class=\"hljs-comment\"># 跳过不同文件系统的目录，经常可以用来规避nfs这类网络挂载</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-其他命令\"><a href=\"#4-其他命令\" class=\"headerlink\" title=\"4. 其他命令\"></a>4. 其他命令</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">blkid <span class=\"hljs-comment\">## block id, 可以用来查看uuid及文件系统类型</span><br><span class=\"hljs-comment\">## 以下命令可以用来查看分区情况</span><br>fdisk -l <br>gdisk -l<br>parted /dev/vda <span class=\"hljs-built_in\">print</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"磁盘分区、格式化、挂载\"><a href=\"#磁盘分区、格式化、挂载\" class=\"headerlink\" title=\"磁盘分区、格式化、挂载\"></a>磁盘分区、格式化、挂载</h2><blockquote>\n<p>磁盘有价，数据无价，对磁盘进行操作时请务必做好数据备份！！！</p>\n</blockquote>\n<h3 id=\"1-分区\"><a href=\"#1-分区\" class=\"headerlink\" title=\"1. 分区\"></a>1. 分区</h3><p>一般分区有两种常用形式，<code>GPT</code>和<code>MBR</code></p>\n<p>MBR格式最多只能有四个主分区，若想继续分区就需要建立逻辑分区。</p>\n<p>GPT格式没有分区限制，建议使用GPT分区</p>\n<ol>\n<li><strong>fdisk</strong></li>\n</ol>\n<p>fdisk使用方法如下，进入交互式命令行后，用<code>p</code>查看磁盘信息，<code>n</code>新建分区，下面的操作无特殊指定回车即可。</p>\n<p>如有指定，一般起始扇区默认即可，结束扇区可用<code>+10G</code>类似写法指定，<code>+</code>号是在现有基础上增加空间。</p>\n<p>有时候缩容操作（一般不考虑缩容）不会指定+号，直接指定大小而不是在原基础上增加。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">root@docker:~# fdisk /dev/sda<br><br>Welcome to fdisk (util-linux 2.39.3).<br>Changes will remain <span class=\"hljs-keyword\">in</span> memory only, <span class=\"hljs-keyword\">until</span> you decide to write them.<br>Be careful before using the write <span class=\"hljs-built_in\">command</span>.<br><br><br>Command (m <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): n<br>Partition number (2-13,17-128, default 2):<br>First sector (33556480-52428766, default 33556480):<br>Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (33556480-52428766, default 52426751):<br><br>Created a new partition 2 of <span class=\"hljs-built_in\">type</span> <span class=\"hljs-string\">&#x27;Linux filesystem&#x27;</span> and of size 9 GiB.<br><br>Command (m <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): p<br>Disk /dev/sda: 25 GiB, 26843545600 bytes, 52428800 sectors<br>Disk model: VBOX HARDDISK<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel <span class=\"hljs-built_in\">type</span>: gpt<br>Disk identifier: A102F557-254C-4E8A-BB7B-5CE2CBC42B40<br><br>Device        Start      End  Sectors  Size Type<br>/dev/sda1   2099200 33556479 31457280   15G Linux filesystem<br>/dev/sda2  33556480 52426751 18870272    9G Linux filesystem<br>/dev/sda14     2048    10239     8192    4M BIOS boot<br>/dev/sda15    10240   227327   217088  106M EFI System<br>/dev/sda16   227328  2097152  1869825  913M Linux extended boot<br><br>Partition table entries are not <span class=\"hljs-keyword\">in</span> disk order.<br><br>Command (m <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): w<br>The partition table has been altered.<br>Syncing disks.<br></code></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li><strong>gdisk</strong></li>\n</ol>\n<p>gdisk的操作类似于fdisk，多了一步需要输入Hex code，可回车默认。</p>\n<p>如果保存退出后<code>lsblk</code>查看不到分区，可使用<code>partprobe</code>刷新分区表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">root@docker:~# gdisk /dev/sda<br>GPT fdisk (gdisk) version 1.0.10<br><br>Partition table scan:<br>  MBR: protective<br>  BSD: not present<br>  APM: not present<br>  GPT: present<br><br>Found valid GPT with protective MBR; using GPT.<br><br>Command (? <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): p<br>Disk /dev/sda: 52428800 sectors, 25.0 GiB<br>Model: VBOX HARDDISK<br>Sector size (logical/physical): 512/512 bytes<br>Disk identifier (GUID): A102F557-254C-4E8A-BB7B-5CE2CBC42B40<br>Partition table holds up to 128 entries<br>Main partition table begins at sector 2 and ends at sector 33<br>First usable sector is 34, last usable sector is 52428766<br>Partitions will be aligned on 2048-sector boundaries<br>Total free space is 18876348 sectors (9.0 GiB)<br><br>Number  Start (sector)    End (sector)  Size       Code  Name<br>   1         2099200        33556479   15.0 GiB    8300<br>  14            2048           10239   4.0 MiB     EF02<br>  15           10240          227327   106.0 MiB   EF00<br>  16          227328         2097152   913.0 MiB   EA00<br><br>Command (? <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): n<br>Partition number (2-128, default 2):<br>First sector (34-52428766, default = 33556480) or &#123;+-&#125;size&#123;KMGTP&#125;:<br>Last sector (33556480-52428766, default = 52426751) or &#123;+-&#125;size&#123;KMGTP&#125;: +8G<br>Current <span class=\"hljs-built_in\">type</span> is 8300 (Linux filesystem)<br>Hex code or GUID (L to show codes, Enter = 8300): 8e00<br>Changed <span class=\"hljs-built_in\">type</span> of partition to <span class=\"hljs-string\">&#x27;Linux LVM&#x27;</span><br><br>Command (? <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): p<br>Disk /dev/sda: 52428800 sectors, 25.0 GiB<br>Model: VBOX HARDDISK<br>Sector size (logical/physical): 512/512 bytes<br>Disk identifier (GUID): A102F557-254C-4E8A-BB7B-5CE2CBC42B40<br>Partition table holds up to 128 entries<br>Main partition table begins at sector 2 and ends at sector 33<br>First usable sector is 34, last usable sector is 52428766<br>Partitions will be aligned on 2048-sector boundaries<br>Total free space is 2099132 sectors (1025.0 MiB)<br><br>Number  Start (sector)    End (sector)  Size       Code  Name<br>   1         2099200        33556479   15.0 GiB    8300<br>   2        33556480        50333695   8.0 GiB     8E00  Linux LVM<br>  14            2048           10239   4.0 MiB     EF02<br>  15           10240          227327   106.0 MiB   EF00<br>  16          227328         2097152   913.0 MiB   EA00<br><br>Command (? <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): w<br><br>Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING<br>PARTITIONS!!<br><br>Do you want to proceed? (Y/N): y<br>OK; writing new GUID partition table (GPT) to /dev/sda.<br>Warning: The kernel is still using the old partition table.<br>The new table will be used at the next reboot or after you<br>run partprobe(8) or kpartx(8)<br>The operation has completed successfully.<br><br>root@docker:~# lsblk<br>NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS<br>loop0     7:0    0    4K  1 loop /snap/bare/5<br>loop1     7:1    0 74.2M  1 loop /snap/core22/1380<br>loop2     7:2    0    1M  1 loop /snap/multipass-sshfs/145<br>loop3     7:3    0 38.8M  1 loop /snap/snapd/21759<br>sda       8:0    0   25G  0 disk<br>├─sda1    8:1    0   15G  0 part /<br>├─sda14   8:14   0    4M  0 part<br>├─sda15   8:15   0  106M  0 part /boot/efi<br>└─sda16 259:0    0  913M  0 part /boot<br>sr0      11:0    1   54K  0 rom<br>root@docker:~# partprobe -s<br></code></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li><strong>parted</strong></li>\n</ol>\n<blockquote>\n<p>需谨慎使用，该命令操作会直接生效，不像gdisk、fdisk先将数据写入内存</p>\n</blockquote>\n<p><code>parted</code> 命令也可以直接运行进入类似<code>fdisk</code>的交互式界面，但本人更习惯直接命令行操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 指定分区形式以及分区名和大小</span><br>parted /dev/sda mklabel gpt mkpart primary 0 100%<br><span class=\"hljs-comment\">## 更倾向于用扇区来指定大小，假设上一个分区的结束扇区为227328，则新分区可以+1从227329扇区开始。</span><br><span class=\"hljs-comment\">## 此处会自动调整结束扇区，因为磁盘尾还需要存放GPT备份表</span><br>parted /dev/sda mklabel gpt mkpart primary 227329s 100%<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-格式化\"><a href=\"#2-格式化\" class=\"headerlink\" title=\"2. 格式化\"></a>2. 格式化</h3><p>一个磁盘分区完后还不能直接挂载使用，还需要进行文件系统格式化，格式化完成后才能挂载使用。</p>\n<p>一般常见的为xfs、ext4格式，建议使用xfs格式，对应的命令为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mkfs.xfs /dev/sda1<br>mkfs.ext4 /dev/sda1<br><br><span class=\"hljs-comment\">## 格式化完成后可以用blkid查看信息</span><br>blkid /dev/sda1 <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-挂载\"><a href=\"#3-挂载\" class=\"headerlink\" title=\"3. 挂载\"></a>3. 挂载</h3><p>挂载可以是临时挂载，也可以开机自动挂载</p>\n<ul>\n<li><p>临时挂载</p>\n<p>关机重启挂载消失</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mount -t xfs /dev/sda2 /tmp<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>开机自动挂载</p>\n<p>将挂载写入<code>/etc/fstab</code>文件即可实现开机自挂载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;/dev/sda2   /tmp        xfs   defaults     0 0&quot;</span> &gt;&gt; /etc/fstab<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-制作逻辑卷\"><a href=\"#4-制作逻辑卷\" class=\"headerlink\" title=\"4. 制作逻辑卷\"></a>4. 制作逻辑卷</h3><p>LVM允许系统将多个物理硬盘或分区组合成一个逻辑卷组，‌从而形成一个大的存储池。利用逻辑卷的特性可以实现跨盘扩容，因此在制作逻辑卷的时候最好使用性能相近的磁盘，否则将会影响逻辑卷整体性能。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 先将某块磁盘或分区创建为PV</span><br>pvcreate /dev/sda<br><span class=\"hljs-comment\">## 将sda创建一个名为vg1的卷组</span><br>vgcreate vg1 /dev/sda<br><span class=\"hljs-comment\">## 在vg1卷组创建一个名为lv1的逻辑卷，将所有vg1空间都使用</span><br>lvcreate -l +100%free -n lv1 vg1<br><span class=\"hljs-comment\">## 在vg1卷组创建一个名为lv1,大小为40G的逻辑卷</span><br>lvcreate -L 40G -n lv1 vg1<br><span class=\"hljs-comment\">## 制作文件系统</span><br>mkfs.xfs /dev/vg1/lv1<br><span class=\"hljs-comment\">## 挂载，同样可以写入fstab</span><br>mount /dev/vg1/lv1 /root/tmp/<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-磁盘扩容\"><a href=\"#5-磁盘扩容\" class=\"headerlink\" title=\"5. 磁盘扩容\"></a>5. 磁盘扩容</h3><p>通常磁盘需要做逻辑卷或者处于最后一个分区的时候进行扩容是最方便的。</p>\n<p>扩容前一定需要做好备份！！！</p>\n<ol>\n<li>逻辑卷扩容</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 首先加入pv</span><br>pvcreate /dev/sda<br><span class=\"hljs-comment\">## 然后扩展vg</span><br>vgextend vg1 /dev/sda<br><span class=\"hljs-comment\">## 扩充lv</span><br>lvextend -l +100%free /dev/vg1/lv1<br>lvextend -L +20G /dev/vg1/lv1<br><span class=\"hljs-comment\">## 同步文件系统</span><br><span class=\"hljs-comment\">## xfs </span><br>xfs_growfs /dev/vg1/lv1<br><span class=\"hljs-comment\">## ext4</span><br>resize2fs /dev/vg1/lv1<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>没分区的整块盘</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 可以直接同步文件系统</span><br>xfs_growfs /dev/sda<br>resize2fs /dev/sda<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"磁盘分区类型及原理\"><a href=\"#磁盘分区类型及原理\" class=\"headerlink\" title=\"磁盘分区类型及原理\"></a>磁盘分区类型及原理</h2><h4 id=\"MBR（Master-Boot-Record）分区格式\"><a href=\"#MBR（Master-Boot-Record）分区格式\" class=\"headerlink\" title=\"MBR（Master Boot Record）分区格式\"></a>MBR（Master Boot Record）分区格式</h4><p>早期磁盘第一个扇区（<code>521bytes</code>）里面包含重要的信息<code>MBR（Master Boot Record）</code>，其中<code>446 bytes</code>，安装开机管理程序的地方；剩下的<code>64bytes</code>记录硬盘分区的数据，即分区表，如图</p>\n<p><img src=\"/../images/Linux-disk-base/MBR.png\" alt=\"mbr\"></p>\n<p>MBR只支持四个主分区，且最大只支持2TB的硬盘。</p>\n<p>若想多个分区，需要使用扩展分区，扩展分区从5开始计数。</p>\n<h4 id=\"GPT（GUID-Partition-Table）分区格式\"><a href=\"#GPT（GUID-Partition-Table）分区格式\" class=\"headerlink\" title=\"GPT（GUID Partition Table）分区格式\"></a>GPT（GUID Partition Table）分区格式</h4><p>GPT将磁盘划分为一块块的<code>逻辑区块地址（Logical Block Address，简称LBA）</code> 来处理，每个LBA预设计为512bytes，即一个扇区的大小；同时改进MBR之用一块扇区来标识分区表的弊端，GPT使用了前后各34个LBA来标识分区表信息（最后的34各区可以理解为备份，达到高可用），如图</p>\n<p><img src=\"/../images/Linux-disk-base/GPT.png\" alt=\"gpt\"></p>\n<p> LBA的标识是从0开始的，LBA0-34共35块，这里分别阐述下其含义:</p>\n<ul>\n<li><code>LBA0</code> :包含两部分，一部分是类似MBR的446bytes,存储开机管理程序，第二部分则是存储一个特殊的标记，标识该磁盘为GPT格式，而看不懂GPT分区的程序则无法操作该磁盘，起到保护作用，放心，目前基本的管理程序都能识别GPT格式，所以该LBA块实际上与分区信息并无直接关联，这就是为啥不算入34LBA的原因</li>\n<li><code>LBA1</code> :GPT的表头，记录分区本身的位置与大小，同时记录分区在备份中最后34个LBA中的位置，方便恢复</li>\n<li><code>LBA2-34</code>:共32块LBA，每块LBA记录4笔分区表，共支持4*32&#x3D;128笔分区；而每个LBA默认为512bytes，则每笔记录用到512&#x2F;4&#x3D;128bytes,每笔记录拿出64bytes来记录开始、结束的扇区号码，因此对一个单一分区槽而言，支持的最大容量为2^64∗512bytes&#x3D;2^63∗1Kbytes&#x3D;233TB&#x3D;8ZB</li>\n</ul>\n<h1 id=\"其他事项\"><a href=\"#其他事项\" class=\"headerlink\" title=\"其他事项\"></a>其他事项</h1><h2 id=\"1-已添加磁盘无法识别\"><a href=\"#1-已添加磁盘无法识别\" class=\"headerlink\" title=\"1. 已添加磁盘无法识别\"></a>1. 已添加磁盘无法识别</h2><p>有时候机房加了磁盘可能不会在系统层面立即显示出来，需要重启服务器，也可以重新扫描下scsi总线</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> /sys/class/scsi_host/*/scan; <span class=\"hljs-keyword\">do</span> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$i</span>;<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;- - -&quot;</span> &gt; <span class=\"hljs-variable\">$i</span>; <span class=\"hljs-keyword\">done</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-已分区没做lvm的磁盘扩容\"><a href=\"#2-已分区没做lvm的磁盘扩容\" class=\"headerlink\" title=\"2. 已分区没做lvm的磁盘扩容\"></a>2. 已分区没做lvm的磁盘扩容</h2><p>两种方案，但都需要是最后一个分区才能进行扩容</p>\n<ul>\n<li><p>其一，使用<code>fdisk</code>扩容。因为fdisk在进行操作的时候分区数据不会直接写入磁盘，而是先会保存在内存中，所以可以利用这点来进行扩容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">fdisk /dev/sda<br><span class=\"hljs-comment\">## 进入后用p查看分区</span><br><span class=\"hljs-comment\">## 按d 删除最后一个分区</span><br><span class=\"hljs-comment\">## 然后再n，创建新分区。</span><br><span class=\"hljs-comment\">## 新分区的大小必须比原来的分区大，不能缩小，否则会造成数据丢失</span><br><span class=\"hljs-comment\">## 最后w保存，然后xfs_growf或resize2fs同步对应文件系统即可</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>其二，可使用<code>growpart</code>来进行扩容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">growpart /dev/sda 1<br><span class=\"hljs-comment\">## 表示对/dev/sda的分区1进行扩容</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"3-旧磁盘换到新机器无法使用\"><a href=\"#3-旧磁盘换到新机器无法使用\" class=\"headerlink\" title=\"3. 旧磁盘换到新机器无法使用\"></a>3. 旧磁盘换到新机器无法使用</h2><p>面对这个情况其实如果在确定磁盘里面的数据进行了备份，或者不需要的时候可以直接进行强制格式化。</p>\n<p>也可以<code>dd</code>去备份一下磁盘头和磁盘尾信息，或者整个磁盘</p>\n<p>如下有一个磁盘sda，通过parted查看磁盘信息，这里建议把unit切换成s单位来看会更精确更清楚些</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@docker:~# parted /dev/sda u s p<br>Model: ATA VBOX HARDDISK (scsi)<br>Disk /dev/sda: 31457280s<br>Sector size (logical/physical): 512B/512B<br>Partition Table: gpt<br>Disk Flags:<br><br>Number  Start     End        Size       File system  Name  Flags<br>14      2048s     10239s     8192s                         bios_grub<br>15      10240s    227327s    217088s    fat32              boot, esp<br>16      227328s   2097152s   1869825s   ext4               bls_boot<br> 1      2099200s  31457246s  29358047s  ext4<br></code></pre></td></tr></table></figure>\n\n<p>在这个输出中可以看到磁盘总大小31457280个扇区，磁盘实际分配到第31457246个扇区结束，<code>31457280-31457246=34</code>，也就是刚好留下了GPT格式备份的34个LBA。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## dd默认1count为512B，与扇区size对应</span><br><span class=\"hljs-comment\">## 备份前34个扇区</span><br><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/sda of=~/sda.img.bak count=34<br><span class=\"hljs-comment\">## 跳过前面31457246个扇区进行备份</span><br><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/sda of=~/sda.img.bak skip=31457246<br></code></pre></td></tr></table></figure>\n\n<p>如下输出可见备份了最后34个扇区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@docker:~# dd if=/dev/sda of=~/sda.end.bak skip=31457246<br>34+0 records in<br>34+0 records out<br>17408 bytes (17 kB, 17 KiB) copied, 0.000214267 s, 81.2 MB/s<br></code></pre></td></tr></table></figure>\n\n<p>备份好后可以直接用<code>dd</code>命令把磁头磁尾清空即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/zero of=/dev/sda count=34<br><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/zero of=/dev/sda skip=31457246<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-已删除文件占用空间\"><a href=\"#4-已删除文件占用空间\" class=\"headerlink\" title=\"4. 已删除文件占用空间\"></a>4. 已删除文件占用空间</h2><p>这种情况一般是有进程在占用被删除的文件，从而导致空间未释放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 可使用lsof来排查，找到对应的pid</span><br>lsof | grep deleted<br><span class=\"hljs-comment\">## 非业务时间段可以通过 kill对应进程来释放</span><br><span class=\"hljs-comment\">## 但业务时间段肯定不能这样操作</span><br><span class=\"hljs-comment\">## 所以有了第二种方法</span><br><span class=\"hljs-built_in\">ls</span> -l /proc/<span class=\"hljs-variable\">$pid</span>/fd/* | grep <span class=\"hljs-variable\">$filename</span><br><span class=\"hljs-built_in\">echo</span> &gt; /proc/<span class=\"hljs-variable\">$pid</span>/fd/<span class=\"hljs-variable\">$fdnum</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-实际占用与显示不符\"><a href=\"#5-实际占用与显示不符\" class=\"headerlink\" title=\"5. 实际占用与显示不符\"></a>5. 实际占用与显示不符</h2><p>一可能是前面说的已删除文件后<code>df</code>没有变化</p>\n<p>二可能是覆盖挂载</p>\n<p>三可能是计算的时候没有排除网络挂载</p>\n<p>前面已经介绍过第一种处理办法，下面介绍后面两种</p>\n<p>对于覆盖挂载可以在非业务时间将异常挂载的目录先卸载下来，然后去看看卸载后的该目录下面是否有文件，如有文件占用空间则属于覆盖挂载。</p>\n<p>对于网络挂载，可以在使用<code>du</code>命令的时候使用<code>-x</code>选项来进行排除（前面有介绍过），便可计算出当前本地的准确值。</p>\n","excerpt":"","more":"<h1 id=\"Linux-磁盘基础\"><a href=\"#Linux-磁盘基础\" class=\"headerlink\" title=\"Linux 磁盘基础\"></a>Linux 磁盘基础</h1><p>先从如何使用开始</p>\n<ul>\n<li><p>如何查磁盘占用大小及基本信息</p>\n<p>将会用到的命令：</p>\n<ul>\n<li>df</li>\n<li>lsblk</li>\n<li>du</li>\n<li>blkid</li>\n</ul>\n</li>\n<li><p>如何进行磁盘分区、制作逻辑卷、格式化、挂载</p>\n<p>将会用到的命令：</p>\n<ul>\n<li>fdisk</li>\n<li>gdisk</li>\n<li>parted</li>\n<li>pvcreate</li>\n<li>vgcreate</li>\n<li>lvcreate</li>\n<li>mkfs</li>\n<li>mount</li>\n</ul>\n</li>\n</ul>\n<p>然后简单了解磁盘分区的原理</p>\n<ul>\n<li>MBR</li>\n<li>GPT</li>\n</ul>\n<p>最后是操作磁盘时可能遇到的各种问题。例如机器添加磁盘后系统层面没有显示、已分区没做逻辑卷的磁盘扩容、曾经使用过的磁盘换到新机器使用报错、已删除文件<code>df -h</code>仍然显示占用、挂载类似nfs等网络盘时操作卡顿、实际占用与显示不符等等…</p>\n<h2 id=\"磁盘信息查看\"><a href=\"#磁盘信息查看\" class=\"headerlink\" title=\"磁盘信息查看\"></a>磁盘信息查看</h2><h3 id=\"1-查看磁盘使用量-–-display-file-system\"><a href=\"#1-查看磁盘使用量-–-display-file-system\" class=\"headerlink\" title=\"1. 查看磁盘使用量 – display file system\"></a>1. 查看磁盘使用量 – display file system</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">df</span> -h <span class=\"hljs-comment\"># 二进制计算方式，以人类友好形式显示，如1024M=1G</span><br><span class=\"hljs-built_in\">df</span> -l <span class=\"hljs-comment\"># 只列出本地文件系统，即排除nfs或其他类似的如nas盘存储挂载</span><br><span class=\"hljs-built_in\">df</span> -T <span class=\"hljs-comment\"># 显示挂载类型</span><br><span class=\"hljs-built_in\">df</span> -H <span class=\"hljs-comment\"># 十进制计算方式，以人类友好形式显示，如1000M=10G</span><br><span class=\"hljs-built_in\">df</span> -t xfs <span class=\"hljs-comment\"># 指定显示xfs类型的挂载</span><br><span class=\"hljs-built_in\">df</span> -i<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-查看磁盘分区挂载信息-–-list-block\"><a href=\"#2-查看磁盘分区挂载信息-–-list-block\" class=\"headerlink\" title=\"2. 查看磁盘分区挂载信息 – list block\"></a>2. 查看磁盘分区挂载信息 – list block</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">lsblk<br>lsblk -l <br></code></pre></td></tr></table></figure>\n\n<p>   使用<code>lsblk</code>输出如下:</p>\n   <figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS<br>sda       8:0   <span class=\"hljs-number\"> 0 </span>  15G <span class=\"hljs-number\"> 0 </span>disk<br>├─sda1    8:1   <span class=\"hljs-number\"> 0 </span>  14G <span class=\"hljs-number\"> 0 </span>part /<br>├─sda14   8:14  <span class=\"hljs-number\"> 0 </span>   4M <span class=\"hljs-number\"> 0 </span>part<br>├─sda15   8:15  <span class=\"hljs-number\"> 0 </span> 106M <span class=\"hljs-number\"> 0 </span>part /boot/efi<br>└─sda16 259:0   <span class=\"hljs-number\"> 0 </span> 913M <span class=\"hljs-number\"> 0 </span>part /boot<br>sr0      11:0   <span class=\"hljs-number\"> 1 </span>  54K <span class=\"hljs-number\"> 0 </span>rom<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-查看具体文件或目录大小-–-disk-usage\"><a href=\"#3-查看具体文件或目录大小-–-disk-usage\" class=\"headerlink\" title=\"3. 查看具体文件或目录大小 – disk usage\"></a>3. 查看具体文件或目录大小 – disk usage</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">du</span> -sh <span class=\"hljs-comment\"># 计算总大小</span><br><span class=\"hljs-built_in\">du</span> -ahd 0 <span class=\"hljs-comment\"># 与上述相同</span><br><span class=\"hljs-built_in\">du</span> -sh * <span class=\"hljs-comment\"># 计算当前目录下所有文件具体大小，最后计算出总值，并以人类友好形式输出</span><br><span class=\"hljs-built_in\">du</span> -ahd 1 <span class=\"hljs-comment\"># 与上述相同</span><br><span class=\"hljs-comment\"># -d 在有某些版本不可用，需要换成--max-depth 1</span><br><span class=\"hljs-built_in\">du</span> -ahd 1 --time <span class=\"hljs-comment\"># 显示文件或目录修改时间</span><br><span class=\"hljs-built_in\">du</span> -ahd 1 --time | <span class=\"hljs-built_in\">sort</span> -h <span class=\"hljs-comment\">## 以人类友好形式进行排序输出</span><br><span class=\"hljs-built_in\">du</span> -ahd 1 ./ -x ./ <span class=\"hljs-comment\"># 跳过不同文件系统的目录，经常可以用来规避nfs这类网络挂载</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-其他命令\"><a href=\"#4-其他命令\" class=\"headerlink\" title=\"4. 其他命令\"></a>4. 其他命令</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">blkid <span class=\"hljs-comment\">## block id, 可以用来查看uuid及文件系统类型</span><br><span class=\"hljs-comment\">## 以下命令可以用来查看分区情况</span><br>fdisk -l <br>gdisk -l<br>parted /dev/vda <span class=\"hljs-built_in\">print</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"磁盘分区、格式化、挂载\"><a href=\"#磁盘分区、格式化、挂载\" class=\"headerlink\" title=\"磁盘分区、格式化、挂载\"></a>磁盘分区、格式化、挂载</h2><blockquote>\n<p>磁盘有价，数据无价，对磁盘进行操作时请务必做好数据备份！！！</p>\n</blockquote>\n<h3 id=\"1-分区\"><a href=\"#1-分区\" class=\"headerlink\" title=\"1. 分区\"></a>1. 分区</h3><p>一般分区有两种常用形式，<code>GPT</code>和<code>MBR</code></p>\n<p>MBR格式最多只能有四个主分区，若想继续分区就需要建立逻辑分区。</p>\n<p>GPT格式没有分区限制，建议使用GPT分区</p>\n<ol>\n<li><strong>fdisk</strong></li>\n</ol>\n<p>fdisk使用方法如下，进入交互式命令行后，用<code>p</code>查看磁盘信息，<code>n</code>新建分区，下面的操作无特殊指定回车即可。</p>\n<p>如有指定，一般起始扇区默认即可，结束扇区可用<code>+10G</code>类似写法指定，<code>+</code>号是在现有基础上增加空间。</p>\n<p>有时候缩容操作（一般不考虑缩容）不会指定+号，直接指定大小而不是在原基础上增加。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">root@docker:~# fdisk /dev/sda<br><br>Welcome to fdisk (util-linux 2.39.3).<br>Changes will remain <span class=\"hljs-keyword\">in</span> memory only, <span class=\"hljs-keyword\">until</span> you decide to write them.<br>Be careful before using the write <span class=\"hljs-built_in\">command</span>.<br><br><br>Command (m <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): n<br>Partition number (2-13,17-128, default 2):<br>First sector (33556480-52428766, default 33556480):<br>Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (33556480-52428766, default 52426751):<br><br>Created a new partition 2 of <span class=\"hljs-built_in\">type</span> <span class=\"hljs-string\">&#x27;Linux filesystem&#x27;</span> and of size 9 GiB.<br><br>Command (m <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): p<br>Disk /dev/sda: 25 GiB, 26843545600 bytes, 52428800 sectors<br>Disk model: VBOX HARDDISK<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel <span class=\"hljs-built_in\">type</span>: gpt<br>Disk identifier: A102F557-254C-4E8A-BB7B-5CE2CBC42B40<br><br>Device        Start      End  Sectors  Size Type<br>/dev/sda1   2099200 33556479 31457280   15G Linux filesystem<br>/dev/sda2  33556480 52426751 18870272    9G Linux filesystem<br>/dev/sda14     2048    10239     8192    4M BIOS boot<br>/dev/sda15    10240   227327   217088  106M EFI System<br>/dev/sda16   227328  2097152  1869825  913M Linux extended boot<br><br>Partition table entries are not <span class=\"hljs-keyword\">in</span> disk order.<br><br>Command (m <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): w<br>The partition table has been altered.<br>Syncing disks.<br></code></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li><strong>gdisk</strong></li>\n</ol>\n<p>gdisk的操作类似于fdisk，多了一步需要输入Hex code，可回车默认。</p>\n<p>如果保存退出后<code>lsblk</code>查看不到分区，可使用<code>partprobe</code>刷新分区表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">root@docker:~# gdisk /dev/sda<br>GPT fdisk (gdisk) version 1.0.10<br><br>Partition table scan:<br>  MBR: protective<br>  BSD: not present<br>  APM: not present<br>  GPT: present<br><br>Found valid GPT with protective MBR; using GPT.<br><br>Command (? <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): p<br>Disk /dev/sda: 52428800 sectors, 25.0 GiB<br>Model: VBOX HARDDISK<br>Sector size (logical/physical): 512/512 bytes<br>Disk identifier (GUID): A102F557-254C-4E8A-BB7B-5CE2CBC42B40<br>Partition table holds up to 128 entries<br>Main partition table begins at sector 2 and ends at sector 33<br>First usable sector is 34, last usable sector is 52428766<br>Partitions will be aligned on 2048-sector boundaries<br>Total free space is 18876348 sectors (9.0 GiB)<br><br>Number  Start (sector)    End (sector)  Size       Code  Name<br>   1         2099200        33556479   15.0 GiB    8300<br>  14            2048           10239   4.0 MiB     EF02<br>  15           10240          227327   106.0 MiB   EF00<br>  16          227328         2097152   913.0 MiB   EA00<br><br>Command (? <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): n<br>Partition number (2-128, default 2):<br>First sector (34-52428766, default = 33556480) or &#123;+-&#125;size&#123;KMGTP&#125;:<br>Last sector (33556480-52428766, default = 52426751) or &#123;+-&#125;size&#123;KMGTP&#125;: +8G<br>Current <span class=\"hljs-built_in\">type</span> is 8300 (Linux filesystem)<br>Hex code or GUID (L to show codes, Enter = 8300): 8e00<br>Changed <span class=\"hljs-built_in\">type</span> of partition to <span class=\"hljs-string\">&#x27;Linux LVM&#x27;</span><br><br>Command (? <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): p<br>Disk /dev/sda: 52428800 sectors, 25.0 GiB<br>Model: VBOX HARDDISK<br>Sector size (logical/physical): 512/512 bytes<br>Disk identifier (GUID): A102F557-254C-4E8A-BB7B-5CE2CBC42B40<br>Partition table holds up to 128 entries<br>Main partition table begins at sector 2 and ends at sector 33<br>First usable sector is 34, last usable sector is 52428766<br>Partitions will be aligned on 2048-sector boundaries<br>Total free space is 2099132 sectors (1025.0 MiB)<br><br>Number  Start (sector)    End (sector)  Size       Code  Name<br>   1         2099200        33556479   15.0 GiB    8300<br>   2        33556480        50333695   8.0 GiB     8E00  Linux LVM<br>  14            2048           10239   4.0 MiB     EF02<br>  15           10240          227327   106.0 MiB   EF00<br>  16          227328         2097152   913.0 MiB   EA00<br><br>Command (? <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): w<br><br>Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING<br>PARTITIONS!!<br><br>Do you want to proceed? (Y/N): y<br>OK; writing new GUID partition table (GPT) to /dev/sda.<br>Warning: The kernel is still using the old partition table.<br>The new table will be used at the next reboot or after you<br>run partprobe(8) or kpartx(8)<br>The operation has completed successfully.<br><br>root@docker:~# lsblk<br>NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS<br>loop0     7:0    0    4K  1 loop /snap/bare/5<br>loop1     7:1    0 74.2M  1 loop /snap/core22/1380<br>loop2     7:2    0    1M  1 loop /snap/multipass-sshfs/145<br>loop3     7:3    0 38.8M  1 loop /snap/snapd/21759<br>sda       8:0    0   25G  0 disk<br>├─sda1    8:1    0   15G  0 part /<br>├─sda14   8:14   0    4M  0 part<br>├─sda15   8:15   0  106M  0 part /boot/efi<br>└─sda16 259:0    0  913M  0 part /boot<br>sr0      11:0    1   54K  0 rom<br>root@docker:~# partprobe -s<br></code></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li><strong>parted</strong></li>\n</ol>\n<blockquote>\n<p>需谨慎使用，该命令操作会直接生效，不像gdisk、fdisk先将数据写入内存</p>\n</blockquote>\n<p><code>parted</code> 命令也可以直接运行进入类似<code>fdisk</code>的交互式界面，但本人更习惯直接命令行操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 指定分区形式以及分区名和大小</span><br>parted /dev/sda mklabel gpt mkpart primary 0 100%<br><span class=\"hljs-comment\">## 更倾向于用扇区来指定大小，假设上一个分区的结束扇区为227328，则新分区可以+1从227329扇区开始。</span><br><span class=\"hljs-comment\">## 此处会自动调整结束扇区，因为磁盘尾还需要存放GPT备份表</span><br>parted /dev/sda mklabel gpt mkpart primary 227329s 100%<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-格式化\"><a href=\"#2-格式化\" class=\"headerlink\" title=\"2. 格式化\"></a>2. 格式化</h3><p>一个磁盘分区完后还不能直接挂载使用，还需要进行文件系统格式化，格式化完成后才能挂载使用。</p>\n<p>一般常见的为xfs、ext4格式，建议使用xfs格式，对应的命令为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mkfs.xfs /dev/sda1<br>mkfs.ext4 /dev/sda1<br><br><span class=\"hljs-comment\">## 格式化完成后可以用blkid查看信息</span><br>blkid /dev/sda1 <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-挂载\"><a href=\"#3-挂载\" class=\"headerlink\" title=\"3. 挂载\"></a>3. 挂载</h3><p>挂载可以是临时挂载，也可以开机自动挂载</p>\n<ul>\n<li><p>临时挂载</p>\n<p>关机重启挂载消失</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mount -t xfs /dev/sda2 /tmp<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>开机自动挂载</p>\n<p>将挂载写入<code>/etc/fstab</code>文件即可实现开机自挂载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;/dev/sda2   /tmp        xfs   defaults     0 0&quot;</span> &gt;&gt; /etc/fstab<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-制作逻辑卷\"><a href=\"#4-制作逻辑卷\" class=\"headerlink\" title=\"4. 制作逻辑卷\"></a>4. 制作逻辑卷</h3><p>LVM允许系统将多个物理硬盘或分区组合成一个逻辑卷组，‌从而形成一个大的存储池。利用逻辑卷的特性可以实现跨盘扩容，因此在制作逻辑卷的时候最好使用性能相近的磁盘，否则将会影响逻辑卷整体性能。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 先将某块磁盘或分区创建为PV</span><br>pvcreate /dev/sda<br><span class=\"hljs-comment\">## 将sda创建一个名为vg1的卷组</span><br>vgcreate vg1 /dev/sda<br><span class=\"hljs-comment\">## 在vg1卷组创建一个名为lv1的逻辑卷，将所有vg1空间都使用</span><br>lvcreate -l +100%free -n lv1 vg1<br><span class=\"hljs-comment\">## 在vg1卷组创建一个名为lv1,大小为40G的逻辑卷</span><br>lvcreate -L 40G -n lv1 vg1<br><span class=\"hljs-comment\">## 制作文件系统</span><br>mkfs.xfs /dev/vg1/lv1<br><span class=\"hljs-comment\">## 挂载，同样可以写入fstab</span><br>mount /dev/vg1/lv1 /root/tmp/<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-磁盘扩容\"><a href=\"#5-磁盘扩容\" class=\"headerlink\" title=\"5. 磁盘扩容\"></a>5. 磁盘扩容</h3><p>通常磁盘需要做逻辑卷或者处于最后一个分区的时候进行扩容是最方便的。</p>\n<p>扩容前一定需要做好备份！！！</p>\n<ol>\n<li>逻辑卷扩容</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 首先加入pv</span><br>pvcreate /dev/sda<br><span class=\"hljs-comment\">## 然后扩展vg</span><br>vgextend vg1 /dev/sda<br><span class=\"hljs-comment\">## 扩充lv</span><br>lvextend -l +100%free /dev/vg1/lv1<br>lvextend -L +20G /dev/vg1/lv1<br><span class=\"hljs-comment\">## 同步文件系统</span><br><span class=\"hljs-comment\">## xfs </span><br>xfs_growfs /dev/vg1/lv1<br><span class=\"hljs-comment\">## ext4</span><br>resize2fs /dev/vg1/lv1<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>没分区的整块盘</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 可以直接同步文件系统</span><br>xfs_growfs /dev/sda<br>resize2fs /dev/sda<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"磁盘分区类型及原理\"><a href=\"#磁盘分区类型及原理\" class=\"headerlink\" title=\"磁盘分区类型及原理\"></a>磁盘分区类型及原理</h2><h4 id=\"MBR（Master-Boot-Record）分区格式\"><a href=\"#MBR（Master-Boot-Record）分区格式\" class=\"headerlink\" title=\"MBR（Master Boot Record）分区格式\"></a>MBR（Master Boot Record）分区格式</h4><p>早期磁盘第一个扇区（<code>521bytes</code>）里面包含重要的信息<code>MBR（Master Boot Record）</code>，其中<code>446 bytes</code>，安装开机管理程序的地方；剩下的<code>64bytes</code>记录硬盘分区的数据，即分区表，如图</p>\n<p><img src=\"/../images/Linux-disk-base/MBR.png\" alt=\"mbr\"></p>\n<p>MBR只支持四个主分区，且最大只支持2TB的硬盘。</p>\n<p>若想多个分区，需要使用扩展分区，扩展分区从5开始计数。</p>\n<h4 id=\"GPT（GUID-Partition-Table）分区格式\"><a href=\"#GPT（GUID-Partition-Table）分区格式\" class=\"headerlink\" title=\"GPT（GUID Partition Table）分区格式\"></a>GPT（GUID Partition Table）分区格式</h4><p>GPT将磁盘划分为一块块的<code>逻辑区块地址（Logical Block Address，简称LBA）</code> 来处理，每个LBA预设计为512bytes，即一个扇区的大小；同时改进MBR之用一块扇区来标识分区表的弊端，GPT使用了前后各34个LBA来标识分区表信息（最后的34各区可以理解为备份，达到高可用），如图</p>\n<p><img src=\"/../images/Linux-disk-base/GPT.png\" alt=\"gpt\"></p>\n<p> LBA的标识是从0开始的，LBA0-34共35块，这里分别阐述下其含义:</p>\n<ul>\n<li><code>LBA0</code> :包含两部分，一部分是类似MBR的446bytes,存储开机管理程序，第二部分则是存储一个特殊的标记，标识该磁盘为GPT格式，而看不懂GPT分区的程序则无法操作该磁盘，起到保护作用，放心，目前基本的管理程序都能识别GPT格式，所以该LBA块实际上与分区信息并无直接关联，这就是为啥不算入34LBA的原因</li>\n<li><code>LBA1</code> :GPT的表头，记录分区本身的位置与大小，同时记录分区在备份中最后34个LBA中的位置，方便恢复</li>\n<li><code>LBA2-34</code>:共32块LBA，每块LBA记录4笔分区表，共支持4*32&#x3D;128笔分区；而每个LBA默认为512bytes，则每笔记录用到512&#x2F;4&#x3D;128bytes,每笔记录拿出64bytes来记录开始、结束的扇区号码，因此对一个单一分区槽而言，支持的最大容量为2^64∗512bytes&#x3D;2^63∗1Kbytes&#x3D;233TB&#x3D;8ZB</li>\n</ul>\n<h1 id=\"其他事项\"><a href=\"#其他事项\" class=\"headerlink\" title=\"其他事项\"></a>其他事项</h1><h2 id=\"1-已添加磁盘无法识别\"><a href=\"#1-已添加磁盘无法识别\" class=\"headerlink\" title=\"1. 已添加磁盘无法识别\"></a>1. 已添加磁盘无法识别</h2><p>有时候机房加了磁盘可能不会在系统层面立即显示出来，需要重启服务器，也可以重新扫描下scsi总线</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> /sys/class/scsi_host/*/scan; <span class=\"hljs-keyword\">do</span> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$i</span>;<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;- - -&quot;</span> &gt; <span class=\"hljs-variable\">$i</span>; <span class=\"hljs-keyword\">done</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-已分区没做lvm的磁盘扩容\"><a href=\"#2-已分区没做lvm的磁盘扩容\" class=\"headerlink\" title=\"2. 已分区没做lvm的磁盘扩容\"></a>2. 已分区没做lvm的磁盘扩容</h2><p>两种方案，但都需要是最后一个分区才能进行扩容</p>\n<ul>\n<li><p>其一，使用<code>fdisk</code>扩容。因为fdisk在进行操作的时候分区数据不会直接写入磁盘，而是先会保存在内存中，所以可以利用这点来进行扩容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">fdisk /dev/sda<br><span class=\"hljs-comment\">## 进入后用p查看分区</span><br><span class=\"hljs-comment\">## 按d 删除最后一个分区</span><br><span class=\"hljs-comment\">## 然后再n，创建新分区。</span><br><span class=\"hljs-comment\">## 新分区的大小必须比原来的分区大，不能缩小，否则会造成数据丢失</span><br><span class=\"hljs-comment\">## 最后w保存，然后xfs_growf或resize2fs同步对应文件系统即可</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>其二，可使用<code>growpart</code>来进行扩容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">growpart /dev/sda 1<br><span class=\"hljs-comment\">## 表示对/dev/sda的分区1进行扩容</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"3-旧磁盘换到新机器无法使用\"><a href=\"#3-旧磁盘换到新机器无法使用\" class=\"headerlink\" title=\"3. 旧磁盘换到新机器无法使用\"></a>3. 旧磁盘换到新机器无法使用</h2><p>面对这个情况其实如果在确定磁盘里面的数据进行了备份，或者不需要的时候可以直接进行强制格式化。</p>\n<p>也可以<code>dd</code>去备份一下磁盘头和磁盘尾信息，或者整个磁盘</p>\n<p>如下有一个磁盘sda，通过parted查看磁盘信息，这里建议把unit切换成s单位来看会更精确更清楚些</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@docker:~# parted /dev/sda u s p<br>Model: ATA VBOX HARDDISK (scsi)<br>Disk /dev/sda: 31457280s<br>Sector size (logical/physical): 512B/512B<br>Partition Table: gpt<br>Disk Flags:<br><br>Number  Start     End        Size       File system  Name  Flags<br>14      2048s     10239s     8192s                         bios_grub<br>15      10240s    227327s    217088s    fat32              boot, esp<br>16      227328s   2097152s   1869825s   ext4               bls_boot<br> 1      2099200s  31457246s  29358047s  ext4<br></code></pre></td></tr></table></figure>\n\n<p>在这个输出中可以看到磁盘总大小31457280个扇区，磁盘实际分配到第31457246个扇区结束，<code>31457280-31457246=34</code>，也就是刚好留下了GPT格式备份的34个LBA。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## dd默认1count为512B，与扇区size对应</span><br><span class=\"hljs-comment\">## 备份前34个扇区</span><br><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/sda of=~/sda.img.bak count=34<br><span class=\"hljs-comment\">## 跳过前面31457246个扇区进行备份</span><br><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/sda of=~/sda.img.bak skip=31457246<br></code></pre></td></tr></table></figure>\n\n<p>如下输出可见备份了最后34个扇区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@docker:~# dd if=/dev/sda of=~/sda.end.bak skip=31457246<br>34+0 records in<br>34+0 records out<br>17408 bytes (17 kB, 17 KiB) copied, 0.000214267 s, 81.2 MB/s<br></code></pre></td></tr></table></figure>\n\n<p>备份好后可以直接用<code>dd</code>命令把磁头磁尾清空即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/zero of=/dev/sda count=34<br><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/zero of=/dev/sda skip=31457246<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-已删除文件占用空间\"><a href=\"#4-已删除文件占用空间\" class=\"headerlink\" title=\"4. 已删除文件占用空间\"></a>4. 已删除文件占用空间</h2><p>这种情况一般是有进程在占用被删除的文件，从而导致空间未释放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 可使用lsof来排查，找到对应的pid</span><br>lsof | grep deleted<br><span class=\"hljs-comment\">## 非业务时间段可以通过 kill对应进程来释放</span><br><span class=\"hljs-comment\">## 但业务时间段肯定不能这样操作</span><br><span class=\"hljs-comment\">## 所以有了第二种方法</span><br><span class=\"hljs-built_in\">ls</span> -l /proc/<span class=\"hljs-variable\">$pid</span>/fd/* | grep <span class=\"hljs-variable\">$filename</span><br><span class=\"hljs-built_in\">echo</span> &gt; /proc/<span class=\"hljs-variable\">$pid</span>/fd/<span class=\"hljs-variable\">$fdnum</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-实际占用与显示不符\"><a href=\"#5-实际占用与显示不符\" class=\"headerlink\" title=\"5. 实际占用与显示不符\"></a>5. 实际占用与显示不符</h2><p>一可能是前面说的已删除文件后<code>df</code>没有变化</p>\n<p>二可能是覆盖挂载</p>\n<p>三可能是计算的时候没有排除网络挂载</p>\n<p>前面已经介绍过第一种处理办法，下面介绍后面两种</p>\n<p>对于覆盖挂载可以在非业务时间将异常挂载的目录先卸载下来，然后去看看卸载后的该目录下面是否有文件，如有文件占用空间则属于覆盖挂载。</p>\n<p>对于网络挂载，可以在使用<code>du</code>命令的时候使用<code>-x</code>选项来进行排除（前面有介绍过），便可计算出当前本地的准确值。</p>\n"},{"title":"WSL启动Linux并初始化及代理配置","date":"2024-08-04T11:45:05.000Z","_content":"\n## WSL 启动 Ubuntu\n\n由于22.04 jammy不支持高版本nodejs，所以我们下载24.04 noble版本的Ubuntu。\n\n```powershell\n## 查看可下载的发行版\nwsl -l -o\n\nwsl --install -d Ubuntu-24.04 \n```\n\n![list](../images/wsl-linux-init/available_list.png)\n\n等待下载完成就会自动进入。\n\n### 配置 apt阿里源\n\n```bash\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\n\n## 查看版本codename\ncat /etc/os-release | grep UBUNTU_CODENAME\n## 如用其他版本，如22.04 jammy，将noble替换为jammy即可\ncat >> /etc/apt/sources.list <<EOF\ndeb http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse\nEOF\n## 配置完后update\napt update\n\napt install nodejs npm\n```\n\n## WSL 本地导入CentOS\n\nWSL没有CentOS的发行版，因此需要自行导出一个。\n\ncentos的tar包从docker容器导出。\n\n```powershell\nwsl --import CentOS D:\\wsl\\centos\\ .\\centos.tar\nwsl -d CentOS\n\ncat >> /etc/wsl.conf <<EOF\n[boot]\nsystemd=true\nEOF\n```\n\n### 配置 yum阿里源\n\n```bash\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\nyum clean all && yum makecache\n\nyum install initscripts\nyum install net-tools\nyum install which\nyum install sudo\nyum install tmux\n```\n\n## 配置代理\n\n此处我将自己的WSL网络设置成了`mirrored`，因此在访问一些服务的时候可以通过127.0.0.1来访问。\n\n比如 ssh可以通过`ssh root@127.0.0.1`来远程连接，方便使用其他终端程序；Web服务可以通过http://127.0.0.1:80 访问。\n\n```bash\n## 设置网络为镜像网络，完成后关闭虚拟机，等待8秒后再启动\ncat >>/mnt/c/Users/xxx/.wslconfig <<EOF\n[experimental]\nnetworkingMode=mirrored\nEOF\n\n## 配置代理\n## 根据自己选择的工具填写端口号\ncat >> ~/.bashrc <<EOF\nalias proxy='export all_proxy=http://127.0.0.1:7890'\nalias unproxy='unset all_proxy'\nEOF\nsource ~/.bashrc\n## 运行即可启动代理\nproxy\n\n## 配置npm代理\nnpm config set proxy=http://127.0.0.1:7890\n## 默认registry地址，可换成其他国内源\nnpm config set registry=http://registry.npmjs.org\n\nnpm install -g hexo\n```\n\n## 配置 github加速\n\n在`/etc/hosts`下添加\n\n```\n199.96.58.157 github.global.ssl.fastly.net\n20.205.243.166 github.com\n```\n\n","source":"_posts/WSL-Linux-init-proxy.md","raw":"---\ntitle: WSL启动Linux并初始化及代理配置\ndate: 2024-08-04 19:45:05\ntags: tools\n---\n\n## WSL 启动 Ubuntu\n\n由于22.04 jammy不支持高版本nodejs，所以我们下载24.04 noble版本的Ubuntu。\n\n```powershell\n## 查看可下载的发行版\nwsl -l -o\n\nwsl --install -d Ubuntu-24.04 \n```\n\n![list](../images/wsl-linux-init/available_list.png)\n\n等待下载完成就会自动进入。\n\n### 配置 apt阿里源\n\n```bash\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\n\n## 查看版本codename\ncat /etc/os-release | grep UBUNTU_CODENAME\n## 如用其他版本，如22.04 jammy，将noble替换为jammy即可\ncat >> /etc/apt/sources.list <<EOF\ndeb http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse\nEOF\n## 配置完后update\napt update\n\napt install nodejs npm\n```\n\n## WSL 本地导入CentOS\n\nWSL没有CentOS的发行版，因此需要自行导出一个。\n\ncentos的tar包从docker容器导出。\n\n```powershell\nwsl --import CentOS D:\\wsl\\centos\\ .\\centos.tar\nwsl -d CentOS\n\ncat >> /etc/wsl.conf <<EOF\n[boot]\nsystemd=true\nEOF\n```\n\n### 配置 yum阿里源\n\n```bash\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\nyum clean all && yum makecache\n\nyum install initscripts\nyum install net-tools\nyum install which\nyum install sudo\nyum install tmux\n```\n\n## 配置代理\n\n此处我将自己的WSL网络设置成了`mirrored`，因此在访问一些服务的时候可以通过127.0.0.1来访问。\n\n比如 ssh可以通过`ssh root@127.0.0.1`来远程连接，方便使用其他终端程序；Web服务可以通过http://127.0.0.1:80 访问。\n\n```bash\n## 设置网络为镜像网络，完成后关闭虚拟机，等待8秒后再启动\ncat >>/mnt/c/Users/xxx/.wslconfig <<EOF\n[experimental]\nnetworkingMode=mirrored\nEOF\n\n## 配置代理\n## 根据自己选择的工具填写端口号\ncat >> ~/.bashrc <<EOF\nalias proxy='export all_proxy=http://127.0.0.1:7890'\nalias unproxy='unset all_proxy'\nEOF\nsource ~/.bashrc\n## 运行即可启动代理\nproxy\n\n## 配置npm代理\nnpm config set proxy=http://127.0.0.1:7890\n## 默认registry地址，可换成其他国内源\nnpm config set registry=http://registry.npmjs.org\n\nnpm install -g hexo\n```\n\n## 配置 github加速\n\n在`/etc/hosts`下添加\n\n```\n199.96.58.157 github.global.ssl.fastly.net\n20.205.243.166 github.com\n```\n\n","slug":"WSL-Linux-init-proxy","published":1,"updated":"2024-08-05T02:05:37.256Z","_id":"clzfp150p000389iqb84mgp7m","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"WSL-启动-Ubuntu\"><a href=\"#WSL-启动-Ubuntu\" class=\"headerlink\" title=\"WSL 启动 Ubuntu\"></a>WSL 启动 Ubuntu</h2><p>由于22.04 jammy不支持高版本nodejs，所以我们下载24.04 noble版本的Ubuntu。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\">## 查看可下载的发行版</span><br>wsl <span class=\"hljs-literal\">-l</span> <span class=\"hljs-literal\">-o</span><br><br>wsl <span class=\"hljs-literal\">--install</span> <span class=\"hljs-literal\">-d</span> Ubuntu<span class=\"hljs-literal\">-24</span>.<span class=\"hljs-number\">04</span> <br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/wsl-linux-init/available_list.png\" alt=\"list\"></p>\n<p>等待下载完成就会自动进入。</p>\n<h3 id=\"配置-apt阿里源\"><a href=\"#配置-apt阿里源\" class=\"headerlink\" title=\"配置 apt阿里源\"></a>配置 apt阿里源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br><br><span class=\"hljs-comment\">## 查看版本codename</span><br><span class=\"hljs-built_in\">cat</span> /etc/os-release | grep UBUNTU_CODENAME<br><span class=\"hljs-comment\">## 如用其他版本，如22.04 jammy，将noble替换为jammy即可</span><br><span class=\"hljs-built_in\">cat</span> &gt;&gt; /etc/apt/sources.list &lt;&lt;<span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\">deb http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse</span><br><span class=\"hljs-string\">deb-src http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse</span><br><span class=\"hljs-string\">deb http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse</span><br><span class=\"hljs-string\">deb-src http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse</span><br><span class=\"hljs-string\">EOF</span><br><span class=\"hljs-comment\">## 配置完后update</span><br>apt update<br><br>apt install nodejs npm<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"WSL-本地导入CentOS\"><a href=\"#WSL-本地导入CentOS\" class=\"headerlink\" title=\"WSL 本地导入CentOS\"></a>WSL 本地导入CentOS</h2><p>WSL没有CentOS的发行版，因此需要自行导出一个。</p>\n<p>centos的tar包从docker容器导出。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">wsl <span class=\"hljs-literal\">--import</span> CentOS D:\\wsl\\centos\\ .\\centos.tar<br>wsl <span class=\"hljs-literal\">-d</span> CentOS<br><br><span class=\"hljs-built_in\">cat</span> &gt;&gt; /etc/wsl.conf &lt;&lt;EOF<br>[<span class=\"hljs-type\">boot</span>]<br>systemd=true<br>EOF<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"配置-yum阿里源\"><a href=\"#配置-yum阿里源\" class=\"headerlink\" title=\"配置 yum阿里源\"></a>配置 yum阿里源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak<br>curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br>yum clean all &amp;&amp; yum makecache<br><br>yum install initscripts<br>yum install net-tools<br>yum install <span class=\"hljs-built_in\">which</span><br>yum install <span class=\"hljs-built_in\">sudo</span><br>yum install tmux<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h2><p>此处我将自己的WSL网络设置成了<code>mirrored</code>，因此在访问一些服务的时候可以通过127.0.0.1来访问。</p>\n<p>比如 ssh可以通过<code>ssh root@127.0.0.1</code>来远程连接，方便使用其他终端程序；Web服务可以通过<a href=\"http://127.0.0.1/\">http://127.0.0.1:80</a> 访问。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 设置网络为镜像网络，完成后关闭虚拟机，等待8秒后再启动</span><br><span class=\"hljs-built_in\">cat</span> &gt;&gt;/mnt/c/Users/xxx/.wslconfig &lt;&lt;<span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\">[experimental]</span><br><span class=\"hljs-string\">networkingMode=mirrored</span><br><span class=\"hljs-string\">EOF</span><br><br><span class=\"hljs-comment\">## 配置代理</span><br><span class=\"hljs-comment\">## 根据自己选择的工具填写端口号</span><br><span class=\"hljs-built_in\">cat</span> &gt;&gt; ~/.bashrc &lt;&lt;<span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\">alias proxy=&#x27;export all_proxy=http://127.0.0.1:7890&#x27;</span><br><span class=\"hljs-string\">alias unproxy=&#x27;unset all_proxy&#x27;</span><br><span class=\"hljs-string\">EOF</span><br><span class=\"hljs-built_in\">source</span> ~/.bashrc<br><span class=\"hljs-comment\">## 运行即可启动代理</span><br>proxy<br><br><span class=\"hljs-comment\">## 配置npm代理</span><br>npm config <span class=\"hljs-built_in\">set</span> proxy=http://127.0.0.1:7890<br><span class=\"hljs-comment\">## 默认registry地址，可换成其他国内源</span><br>npm config <span class=\"hljs-built_in\">set</span> registry=http://registry.npmjs.org<br><br>npm install -g hexo<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置-github加速\"><a href=\"#配置-github加速\" class=\"headerlink\" title=\"配置 github加速\"></a>配置 github加速</h2><p>在<code>/etc/hosts</code>下添加</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs accesslog\"><span class=\"hljs-number\">199.96.58.157</span> github.global.ssl.fastly.net<br><span class=\"hljs-number\">20.205.243.166</span> github.com<br></code></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"WSL-启动-Ubuntu\"><a href=\"#WSL-启动-Ubuntu\" class=\"headerlink\" title=\"WSL 启动 Ubuntu\"></a>WSL 启动 Ubuntu</h2><p>由于22.04 jammy不支持高版本nodejs，所以我们下载24.04 noble版本的Ubuntu。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\">## 查看可下载的发行版</span><br>wsl <span class=\"hljs-literal\">-l</span> <span class=\"hljs-literal\">-o</span><br><br>wsl <span class=\"hljs-literal\">--install</span> <span class=\"hljs-literal\">-d</span> Ubuntu<span class=\"hljs-literal\">-24</span>.<span class=\"hljs-number\">04</span> <br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/wsl-linux-init/available_list.png\" alt=\"list\"></p>\n<p>等待下载完成就会自动进入。</p>\n<h3 id=\"配置-apt阿里源\"><a href=\"#配置-apt阿里源\" class=\"headerlink\" title=\"配置 apt阿里源\"></a>配置 apt阿里源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br><br><span class=\"hljs-comment\">## 查看版本codename</span><br><span class=\"hljs-built_in\">cat</span> /etc/os-release | grep UBUNTU_CODENAME<br><span class=\"hljs-comment\">## 如用其他版本，如22.04 jammy，将noble替换为jammy即可</span><br><span class=\"hljs-built_in\">cat</span> &gt;&gt; /etc/apt/sources.list &lt;&lt;<span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\">deb http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse</span><br><span class=\"hljs-string\">deb-src http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse</span><br><span class=\"hljs-string\">deb http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse</span><br><span class=\"hljs-string\">deb-src http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse</span><br><span class=\"hljs-string\">EOF</span><br><span class=\"hljs-comment\">## 配置完后update</span><br>apt update<br><br>apt install nodejs npm<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"WSL-本地导入CentOS\"><a href=\"#WSL-本地导入CentOS\" class=\"headerlink\" title=\"WSL 本地导入CentOS\"></a>WSL 本地导入CentOS</h2><p>WSL没有CentOS的发行版，因此需要自行导出一个。</p>\n<p>centos的tar包从docker容器导出。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">wsl <span class=\"hljs-literal\">--import</span> CentOS D:\\wsl\\centos\\ .\\centos.tar<br>wsl <span class=\"hljs-literal\">-d</span> CentOS<br><br><span class=\"hljs-built_in\">cat</span> &gt;&gt; /etc/wsl.conf &lt;&lt;EOF<br>[<span class=\"hljs-type\">boot</span>]<br>systemd=true<br>EOF<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"配置-yum阿里源\"><a href=\"#配置-yum阿里源\" class=\"headerlink\" title=\"配置 yum阿里源\"></a>配置 yum阿里源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak<br>curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br>yum clean all &amp;&amp; yum makecache<br><br>yum install initscripts<br>yum install net-tools<br>yum install <span class=\"hljs-built_in\">which</span><br>yum install <span class=\"hljs-built_in\">sudo</span><br>yum install tmux<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h2><p>此处我将自己的WSL网络设置成了<code>mirrored</code>，因此在访问一些服务的时候可以通过127.0.0.1来访问。</p>\n<p>比如 ssh可以通过<code>ssh root@127.0.0.1</code>来远程连接，方便使用其他终端程序；Web服务可以通过<a href=\"http://127.0.0.1/\">http://127.0.0.1:80</a> 访问。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 设置网络为镜像网络，完成后关闭虚拟机，等待8秒后再启动</span><br><span class=\"hljs-built_in\">cat</span> &gt;&gt;/mnt/c/Users/xxx/.wslconfig &lt;&lt;<span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\">[experimental]</span><br><span class=\"hljs-string\">networkingMode=mirrored</span><br><span class=\"hljs-string\">EOF</span><br><br><span class=\"hljs-comment\">## 配置代理</span><br><span class=\"hljs-comment\">## 根据自己选择的工具填写端口号</span><br><span class=\"hljs-built_in\">cat</span> &gt;&gt; ~/.bashrc &lt;&lt;<span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\">alias proxy=&#x27;export all_proxy=http://127.0.0.1:7890&#x27;</span><br><span class=\"hljs-string\">alias unproxy=&#x27;unset all_proxy&#x27;</span><br><span class=\"hljs-string\">EOF</span><br><span class=\"hljs-built_in\">source</span> ~/.bashrc<br><span class=\"hljs-comment\">## 运行即可启动代理</span><br>proxy<br><br><span class=\"hljs-comment\">## 配置npm代理</span><br>npm config <span class=\"hljs-built_in\">set</span> proxy=http://127.0.0.1:7890<br><span class=\"hljs-comment\">## 默认registry地址，可换成其他国内源</span><br>npm config <span class=\"hljs-built_in\">set</span> registry=http://registry.npmjs.org<br><br>npm install -g hexo<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置-github加速\"><a href=\"#配置-github加速\" class=\"headerlink\" title=\"配置 github加速\"></a>配置 github加速</h2><p>在<code>/etc/hosts</code>下添加</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs accesslog\"><span class=\"hljs-number\">199.96.58.157</span> github.global.ssl.fastly.net<br><span class=\"hljs-number\">20.205.243.166</span> github.com<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Ansible Inventory Intro","date":"2024-07-12T05:35:03.000Z","_content":"# ansible inventory 文件基本介绍\n\n> 默认配置路径\n>\n> `/etc/ansible/hosts`\n\n## 定义主机和组\n\nansible 支持将同一个主机同时归并到多个不同的组中\n\n```ini\n# 可以直接写IP地址\n192.168.3.27\n# 支持hostname\nntp.example.com\n# 支持:+port\n192.168.3.27:22\nntp.example.com:222\n# []表示一个分组\n[ntpserver]\nntp1.example.com\nntp2.example.com\n# 表示3-4之间的所有数字,包含3,4\nntp[3:4].example.com\n# 表示a-c之间所有数字,包含a,c\nntp[a:c].example.com\n```\n\n## 定义主机变量\n\n```ini\n[webservers]\nweb1.example.com http_port=808\nmaxRequestsPerChild=801 \n# 自定义http_port的端口号为808，配置maxRequestsPerChild为801\n```\n\n> Ansible其实支持多种方式修改或自定义变量，Inventory是其中的一种修改方式\n\n## 定义组变量\n\n```ini\n[groupservers]\nweb1.example.com\nweb2.example.com\n[groupservers:vars]\nntp_server=ntp.example.com  \n# 定义groupservers组中所有主机ntp_server值为ntp.magedu.com\nnfs_server=nfs.example.com \n# 定义groupservers组中所有主机nfs_server值为nfs.magedu.com\n```\n\n## 定义组嵌套及组变量\n\n```ini\n[apache]\nhttpd1.example.com\nhttpd2.example.com\n[nginx]\nngx1.example.com\nngx2.example.com\n[webservers:children]\napache\nnginx\n[webservers:vars]\nntp_server=ntp.example.com\n```\n\n## 多重变量定义\n\n变量除了在inventory中定义,还可以在其他格式的配置文件中定义，如：yml、json\n\n通常在以下四个位置检索\n\n- inventory配置文件\n- playbook中vars定义的区域\n- roles中vars目录下的文件\n- roles同级目录group_vars和hosts_vars目录下的文件\n\n## 其他参数列表\n\n```ini\nansible_ssh_host=\nansible_ssh_user=root\nansible_ssh_pass=xxx\nansible_ssh_port=22\n# 指定特有私钥文件\nansible_ssh_private_key_file=\n```\n\n> 更多参数查询官网","source":"_posts/Ansible-Inventory-Intro.md","raw":"---\ntitle: Ansible Inventory Intro\ndate: 2024-07-12 13:35:03\ntags: ansible\n---\n# ansible inventory 文件基本介绍\n\n> 默认配置路径\n>\n> `/etc/ansible/hosts`\n\n## 定义主机和组\n\nansible 支持将同一个主机同时归并到多个不同的组中\n\n```ini\n# 可以直接写IP地址\n192.168.3.27\n# 支持hostname\nntp.example.com\n# 支持:+port\n192.168.3.27:22\nntp.example.com:222\n# []表示一个分组\n[ntpserver]\nntp1.example.com\nntp2.example.com\n# 表示3-4之间的所有数字,包含3,4\nntp[3:4].example.com\n# 表示a-c之间所有数字,包含a,c\nntp[a:c].example.com\n```\n\n## 定义主机变量\n\n```ini\n[webservers]\nweb1.example.com http_port=808\nmaxRequestsPerChild=801 \n# 自定义http_port的端口号为808，配置maxRequestsPerChild为801\n```\n\n> Ansible其实支持多种方式修改或自定义变量，Inventory是其中的一种修改方式\n\n## 定义组变量\n\n```ini\n[groupservers]\nweb1.example.com\nweb2.example.com\n[groupservers:vars]\nntp_server=ntp.example.com  \n# 定义groupservers组中所有主机ntp_server值为ntp.magedu.com\nnfs_server=nfs.example.com \n# 定义groupservers组中所有主机nfs_server值为nfs.magedu.com\n```\n\n## 定义组嵌套及组变量\n\n```ini\n[apache]\nhttpd1.example.com\nhttpd2.example.com\n[nginx]\nngx1.example.com\nngx2.example.com\n[webservers:children]\napache\nnginx\n[webservers:vars]\nntp_server=ntp.example.com\n```\n\n## 多重变量定义\n\n变量除了在inventory中定义,还可以在其他格式的配置文件中定义，如：yml、json\n\n通常在以下四个位置检索\n\n- inventory配置文件\n- playbook中vars定义的区域\n- roles中vars目录下的文件\n- roles同级目录group_vars和hosts_vars目录下的文件\n\n## 其他参数列表\n\n```ini\nansible_ssh_host=\nansible_ssh_user=root\nansible_ssh_pass=xxx\nansible_ssh_port=22\n# 指定特有私钥文件\nansible_ssh_private_key_file=\n```\n\n> 更多参数查询官网","slug":"Ansible-Inventory-Intro","published":1,"updated":"2024-07-12T06:10:30.000Z","comments":1,"layout":"post","photos":[],"_id":"clzfp1514000589iqfs7yhb5k","content":"<h1 id=\"ansible-inventory-文件基本介绍\"><a href=\"#ansible-inventory-文件基本介绍\" class=\"headerlink\" title=\"ansible inventory 文件基本介绍\"></a>ansible inventory 文件基本介绍</h1><blockquote>\n<p>默认配置路径</p>\n<p><code>/etc/ansible/hosts</code></p>\n</blockquote>\n<h2 id=\"定义主机和组\"><a href=\"#定义主机和组\" class=\"headerlink\" title=\"定义主机和组\"></a>定义主机和组</h2><p>ansible 支持将同一个主机同时归并到多个不同的组中</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># 可以直接写IP地址</span><br>192.168.3.27<br><span class=\"hljs-comment\"># 支持hostname</span><br>ntp.example.com<br><span class=\"hljs-comment\"># 支持:+port</span><br>192.168.3.27:22<br>ntp.example.com:222<br><span class=\"hljs-comment\"># []表示一个分组</span><br><span class=\"hljs-section\">[ntpserver]</span><br>ntp1.example.com<br>ntp2.example.com<br><span class=\"hljs-comment\"># 表示3-4之间的所有数字,包含3,4</span><br>ntp<span class=\"hljs-section\">[3:4]</span>.example.com<br><span class=\"hljs-comment\"># 表示a-c之间所有数字,包含a,c</span><br>ntp<span class=\"hljs-section\">[a:c]</span>.example.com<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"定义主机变量\"><a href=\"#定义主机变量\" class=\"headerlink\" title=\"定义主机变量\"></a>定义主机变量</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[webservers]</span><br>web1.example.com <span class=\"hljs-attr\">http_port</span>=<span class=\"hljs-number\">808</span><br><span class=\"hljs-attr\">maxRequestsPerChild</span>=<span class=\"hljs-number\">801</span> <br><span class=\"hljs-comment\"># 自定义http_port的端口号为808，配置maxRequestsPerChild为801</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Ansible其实支持多种方式修改或自定义变量，Inventory是其中的一种修改方式</p>\n</blockquote>\n<h2 id=\"定义组变量\"><a href=\"#定义组变量\" class=\"headerlink\" title=\"定义组变量\"></a>定义组变量</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[groupservers]</span><br>web1.example.com<br>web2.example.com<br><span class=\"hljs-section\">[groupservers:vars]</span><br><span class=\"hljs-attr\">ntp_server</span>=ntp.example.com  <br><span class=\"hljs-comment\"># 定义groupservers组中所有主机ntp_server值为ntp.magedu.com</span><br><span class=\"hljs-attr\">nfs_server</span>=nfs.example.com <br><span class=\"hljs-comment\"># 定义groupservers组中所有主机nfs_server值为nfs.magedu.com</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"定义组嵌套及组变量\"><a href=\"#定义组嵌套及组变量\" class=\"headerlink\" title=\"定义组嵌套及组变量\"></a>定义组嵌套及组变量</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[apache]</span><br>httpd1.example.com<br>httpd2.example.com<br><span class=\"hljs-section\">[nginx]</span><br>ngx1.example.com<br>ngx2.example.com<br><span class=\"hljs-section\">[webservers:children]</span><br>apache<br>nginx<br><span class=\"hljs-section\">[webservers:vars]</span><br><span class=\"hljs-attr\">ntp_server</span>=ntp.example.com<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"多重变量定义\"><a href=\"#多重变量定义\" class=\"headerlink\" title=\"多重变量定义\"></a>多重变量定义</h2><p>变量除了在inventory中定义,还可以在其他格式的配置文件中定义，如：yml、json</p>\n<p>通常在以下四个位置检索</p>\n<ul>\n<li>inventory配置文件</li>\n<li>playbook中vars定义的区域</li>\n<li>roles中vars目录下的文件</li>\n<li>roles同级目录group_vars和hosts_vars目录下的文件</li>\n</ul>\n<h2 id=\"其他参数列表\"><a href=\"#其他参数列表\" class=\"headerlink\" title=\"其他参数列表\"></a>其他参数列表</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">ansible_ssh_host</span>=<br><span class=\"hljs-attr\">ansible_ssh_user</span>=root<br><span class=\"hljs-attr\">ansible_ssh_pass</span>=xxx<br><span class=\"hljs-attr\">ansible_ssh_port</span>=<span class=\"hljs-number\">22</span><br><span class=\"hljs-comment\"># 指定特有私钥文件</span><br>ansible_ssh_private_key_file=<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>更多参数查询官网</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"ansible-inventory-文件基本介绍\"><a href=\"#ansible-inventory-文件基本介绍\" class=\"headerlink\" title=\"ansible inventory 文件基本介绍\"></a>ansible inventory 文件基本介绍</h1><blockquote>\n<p>默认配置路径</p>\n<p><code>/etc/ansible/hosts</code></p>\n</blockquote>\n<h2 id=\"定义主机和组\"><a href=\"#定义主机和组\" class=\"headerlink\" title=\"定义主机和组\"></a>定义主机和组</h2><p>ansible 支持将同一个主机同时归并到多个不同的组中</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># 可以直接写IP地址</span><br>192.168.3.27<br><span class=\"hljs-comment\"># 支持hostname</span><br>ntp.example.com<br><span class=\"hljs-comment\"># 支持:+port</span><br>192.168.3.27:22<br>ntp.example.com:222<br><span class=\"hljs-comment\"># []表示一个分组</span><br><span class=\"hljs-section\">[ntpserver]</span><br>ntp1.example.com<br>ntp2.example.com<br><span class=\"hljs-comment\"># 表示3-4之间的所有数字,包含3,4</span><br>ntp<span class=\"hljs-section\">[3:4]</span>.example.com<br><span class=\"hljs-comment\"># 表示a-c之间所有数字,包含a,c</span><br>ntp<span class=\"hljs-section\">[a:c]</span>.example.com<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"定义主机变量\"><a href=\"#定义主机变量\" class=\"headerlink\" title=\"定义主机变量\"></a>定义主机变量</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[webservers]</span><br>web1.example.com <span class=\"hljs-attr\">http_port</span>=<span class=\"hljs-number\">808</span><br><span class=\"hljs-attr\">maxRequestsPerChild</span>=<span class=\"hljs-number\">801</span> <br><span class=\"hljs-comment\"># 自定义http_port的端口号为808，配置maxRequestsPerChild为801</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Ansible其实支持多种方式修改或自定义变量，Inventory是其中的一种修改方式</p>\n</blockquote>\n<h2 id=\"定义组变量\"><a href=\"#定义组变量\" class=\"headerlink\" title=\"定义组变量\"></a>定义组变量</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[groupservers]</span><br>web1.example.com<br>web2.example.com<br><span class=\"hljs-section\">[groupservers:vars]</span><br><span class=\"hljs-attr\">ntp_server</span>=ntp.example.com  <br><span class=\"hljs-comment\"># 定义groupservers组中所有主机ntp_server值为ntp.magedu.com</span><br><span class=\"hljs-attr\">nfs_server</span>=nfs.example.com <br><span class=\"hljs-comment\"># 定义groupservers组中所有主机nfs_server值为nfs.magedu.com</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"定义组嵌套及组变量\"><a href=\"#定义组嵌套及组变量\" class=\"headerlink\" title=\"定义组嵌套及组变量\"></a>定义组嵌套及组变量</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[apache]</span><br>httpd1.example.com<br>httpd2.example.com<br><span class=\"hljs-section\">[nginx]</span><br>ngx1.example.com<br>ngx2.example.com<br><span class=\"hljs-section\">[webservers:children]</span><br>apache<br>nginx<br><span class=\"hljs-section\">[webservers:vars]</span><br><span class=\"hljs-attr\">ntp_server</span>=ntp.example.com<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"多重变量定义\"><a href=\"#多重变量定义\" class=\"headerlink\" title=\"多重变量定义\"></a>多重变量定义</h2><p>变量除了在inventory中定义,还可以在其他格式的配置文件中定义，如：yml、json</p>\n<p>通常在以下四个位置检索</p>\n<ul>\n<li>inventory配置文件</li>\n<li>playbook中vars定义的区域</li>\n<li>roles中vars目录下的文件</li>\n<li>roles同级目录group_vars和hosts_vars目录下的文件</li>\n</ul>\n<h2 id=\"其他参数列表\"><a href=\"#其他参数列表\" class=\"headerlink\" title=\"其他参数列表\"></a>其他参数列表</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">ansible_ssh_host</span>=<br><span class=\"hljs-attr\">ansible_ssh_user</span>=root<br><span class=\"hljs-attr\">ansible_ssh_pass</span>=xxx<br><span class=\"hljs-attr\">ansible_ssh_port</span>=<span class=\"hljs-number\">22</span><br><span class=\"hljs-comment\"># 指定特有私钥文件</span><br>ansible_ssh_private_key_file=<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>更多参数查询官网</p>\n</blockquote>\n"},{"title":"git 基本用法","date":"2024-07-08T05:33:02.000Z","_content":"\n# git 基本用法\n\n> git的结构就像一棵树一样\n>\n> main主干，dev，test，issue ... 都是分支树杈\n\n## pull & push\n\n```bash\n## 初始化一个git仓\ngit init \ngit remote add $alias $url\ngit branch -M master(main)\n## 查看远程仓库\ngit remote -v\ngit push -u origin master \n\n## 远程分支名:本地分支名\n## 旧版为master ，新版默认main\ngit pull origin master:master \n\n## 修改git地址\ngit remote set-url origin $url\n## 已跟踪文件取消跟踪，配合.gitignore，之后推送都忽略\ngit rm -r --cached $file\n```\n\n## reset\n\n```bash\ngit ls-files ## 查看暂存区文件\n\ngit reset --soft ## 工作区和暂存区都不清空\ngit reset --hard ## 工作区暂存区全部清空\ngit reset --mixed ## 保留工作区，清理暂存区，默认选项\n\ngit reset HEAD^ ## 回退到上一次提交\n\ngit log ## 公共提交记录\ngit reflog ## 本地操作记录\n```\n\n## switch/checkout\n\n```bash\n## 创建一个分支\ngit branch $branch \n## 可以切换分支也可以切换至某次提交或恢复某次提交的文件，如分支与文件名相同会产生冲突，默认是切换分支\ngit checkout $branch($commit) \n## 切换某分支的某次提交\ngit checkout -b $branch $commit \n## 仅切换至某分支\ngit switch $branch\n## 如果一个分支提交过后可以用-d选项删掉分支，没有提交想删除需用-D强制删除分支\ngit branch -d $branch\ngit branch -D $branch\n## 图表形式查看分支结构\ngit log --graph --oneline --decorate --all\n```\n\n## merge\n\n```bash\ngit merge $branch\n## 两个分支修改了同一个文件的同一处位置会产生冲突\n## 查看冲突具体内容，修改文件中的冲突后再提交\ngit diff\n## 中止合并\ngit merge --abort\n```\n\n## rebase\n\n```bash\n## 如果当前有两个分支，main和dev\n## 当前处在dev分支时，rebase会把dev分支接在main分支最新一次提交后\ngit switch dev\ngit rebase main\n## 当前处在main分支时，rebase会把main分支接在dev分支最新一次提交后\ngit switch main\ngit rebase dev\n```\n\n","source":"_posts/git-intro.md","raw":"---\ntitle: git 基本用法\ndate: 2024-07-08 13:33:02\ntags: tools\n---\n\n# git 基本用法\n\n> git的结构就像一棵树一样\n>\n> main主干，dev，test，issue ... 都是分支树杈\n\n## pull & push\n\n```bash\n## 初始化一个git仓\ngit init \ngit remote add $alias $url\ngit branch -M master(main)\n## 查看远程仓库\ngit remote -v\ngit push -u origin master \n\n## 远程分支名:本地分支名\n## 旧版为master ，新版默认main\ngit pull origin master:master \n\n## 修改git地址\ngit remote set-url origin $url\n## 已跟踪文件取消跟踪，配合.gitignore，之后推送都忽略\ngit rm -r --cached $file\n```\n\n## reset\n\n```bash\ngit ls-files ## 查看暂存区文件\n\ngit reset --soft ## 工作区和暂存区都不清空\ngit reset --hard ## 工作区暂存区全部清空\ngit reset --mixed ## 保留工作区，清理暂存区，默认选项\n\ngit reset HEAD^ ## 回退到上一次提交\n\ngit log ## 公共提交记录\ngit reflog ## 本地操作记录\n```\n\n## switch/checkout\n\n```bash\n## 创建一个分支\ngit branch $branch \n## 可以切换分支也可以切换至某次提交或恢复某次提交的文件，如分支与文件名相同会产生冲突，默认是切换分支\ngit checkout $branch($commit) \n## 切换某分支的某次提交\ngit checkout -b $branch $commit \n## 仅切换至某分支\ngit switch $branch\n## 如果一个分支提交过后可以用-d选项删掉分支，没有提交想删除需用-D强制删除分支\ngit branch -d $branch\ngit branch -D $branch\n## 图表形式查看分支结构\ngit log --graph --oneline --decorate --all\n```\n\n## merge\n\n```bash\ngit merge $branch\n## 两个分支修改了同一个文件的同一处位置会产生冲突\n## 查看冲突具体内容，修改文件中的冲突后再提交\ngit diff\n## 中止合并\ngit merge --abort\n```\n\n## rebase\n\n```bash\n## 如果当前有两个分支，main和dev\n## 当前处在dev分支时，rebase会把dev分支接在main分支最新一次提交后\ngit switch dev\ngit rebase main\n## 当前处在main分支时，rebase会把main分支接在dev分支最新一次提交后\ngit switch main\ngit rebase dev\n```\n\n","slug":"git-intro","published":1,"updated":"2024-08-05T04:32:26.243Z","_id":"clzfp1518000789iqh3v9cibc","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"git-基本用法\"><a href=\"#git-基本用法\" class=\"headerlink\" title=\"git 基本用法\"></a>git 基本用法</h1><blockquote>\n<p>git的结构就像一棵树一样</p>\n<p>main主干，dev，test，issue … 都是分支树杈</p>\n</blockquote>\n<h2 id=\"pull-push\"><a href=\"#pull-push\" class=\"headerlink\" title=\"pull &amp; push\"></a>pull &amp; push</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 初始化一个git仓</span><br>git init <br>git remote add <span class=\"hljs-variable\">$alias</span> <span class=\"hljs-variable\">$url</span><br>git branch -M master(main)<br><span class=\"hljs-comment\">## 查看远程仓库</span><br>git remote -v<br>git push -u origin master <br><br><span class=\"hljs-comment\">## 远程分支名:本地分支名</span><br><span class=\"hljs-comment\">## 旧版为master ，新版默认main</span><br>git pull origin master:master <br><br><span class=\"hljs-comment\">## 修改git地址</span><br>git remote set-url origin <span class=\"hljs-variable\">$url</span><br><span class=\"hljs-comment\">## 已跟踪文件取消跟踪，配合.gitignore，之后推送都忽略</span><br>git <span class=\"hljs-built_in\">rm</span> -r --cached <span class=\"hljs-variable\">$file</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git ls-files <span class=\"hljs-comment\">## 查看暂存区文件</span><br><br>git reset --soft <span class=\"hljs-comment\">## 工作区和暂存区都不清空</span><br>git reset --hard <span class=\"hljs-comment\">## 工作区暂存区全部清空</span><br>git reset --mixed <span class=\"hljs-comment\">## 保留工作区，清理暂存区，默认选项</span><br><br>git reset HEAD^ <span class=\"hljs-comment\">## 回退到上一次提交</span><br><br>git <span class=\"hljs-built_in\">log</span> <span class=\"hljs-comment\">## 公共提交记录</span><br>git reflog <span class=\"hljs-comment\">## 本地操作记录</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"switch-checkout\"><a href=\"#switch-checkout\" class=\"headerlink\" title=\"switch&#x2F;checkout\"></a>switch&#x2F;checkout</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 创建一个分支</span><br>git branch <span class=\"hljs-variable\">$branch</span> <br><span class=\"hljs-comment\">## 可以切换分支也可以切换至某次提交或恢复某次提交的文件，如分支与文件名相同会产生冲突，默认是切换分支</span><br>git checkout <span class=\"hljs-variable\">$branch</span>(<span class=\"hljs-variable\">$commit</span>) <br><span class=\"hljs-comment\">## 切换某分支的某次提交</span><br>git checkout -b <span class=\"hljs-variable\">$branch</span> <span class=\"hljs-variable\">$commit</span> <br><span class=\"hljs-comment\">## 仅切换至某分支</span><br>git switch <span class=\"hljs-variable\">$branch</span><br><span class=\"hljs-comment\">## 如果一个分支提交过后可以用-d选项删掉分支，没有提交想删除需用-D强制删除分支</span><br>git branch -d <span class=\"hljs-variable\">$branch</span><br>git branch -D <span class=\"hljs-variable\">$branch</span><br><span class=\"hljs-comment\">## 图表形式查看分支结构</span><br>git <span class=\"hljs-built_in\">log</span> --graph --oneline --decorate --all<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git merge <span class=\"hljs-variable\">$branch</span><br><span class=\"hljs-comment\">## 两个分支修改了同一个文件的同一处位置会产生冲突</span><br><span class=\"hljs-comment\">## 查看冲突具体内容，修改文件中的冲突后再提交</span><br>git diff<br><span class=\"hljs-comment\">## 中止合并</span><br>git merge --abort<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 如果当前有两个分支，main和dev</span><br><span class=\"hljs-comment\">## 当前处在dev分支时，rebase会把dev分支接在main分支最新一次提交后</span><br>git switch dev<br>git rebase main<br><span class=\"hljs-comment\">## 当前处在main分支时，rebase会把main分支接在dev分支最新一次提交后</span><br>git switch main<br>git rebase dev<br></code></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"git-基本用法\"><a href=\"#git-基本用法\" class=\"headerlink\" title=\"git 基本用法\"></a>git 基本用法</h1><blockquote>\n<p>git的结构就像一棵树一样</p>\n<p>main主干，dev，test，issue … 都是分支树杈</p>\n</blockquote>\n<h2 id=\"pull-push\"><a href=\"#pull-push\" class=\"headerlink\" title=\"pull &amp; push\"></a>pull &amp; push</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 初始化一个git仓</span><br>git init <br>git remote add <span class=\"hljs-variable\">$alias</span> <span class=\"hljs-variable\">$url</span><br>git branch -M master(main)<br><span class=\"hljs-comment\">## 查看远程仓库</span><br>git remote -v<br>git push -u origin master <br><br><span class=\"hljs-comment\">## 远程分支名:本地分支名</span><br><span class=\"hljs-comment\">## 旧版为master ，新版默认main</span><br>git pull origin master:master <br><br><span class=\"hljs-comment\">## 修改git地址</span><br>git remote set-url origin <span class=\"hljs-variable\">$url</span><br><span class=\"hljs-comment\">## 已跟踪文件取消跟踪，配合.gitignore，之后推送都忽略</span><br>git <span class=\"hljs-built_in\">rm</span> -r --cached <span class=\"hljs-variable\">$file</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git ls-files <span class=\"hljs-comment\">## 查看暂存区文件</span><br><br>git reset --soft <span class=\"hljs-comment\">## 工作区和暂存区都不清空</span><br>git reset --hard <span class=\"hljs-comment\">## 工作区暂存区全部清空</span><br>git reset --mixed <span class=\"hljs-comment\">## 保留工作区，清理暂存区，默认选项</span><br><br>git reset HEAD^ <span class=\"hljs-comment\">## 回退到上一次提交</span><br><br>git <span class=\"hljs-built_in\">log</span> <span class=\"hljs-comment\">## 公共提交记录</span><br>git reflog <span class=\"hljs-comment\">## 本地操作记录</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"switch-checkout\"><a href=\"#switch-checkout\" class=\"headerlink\" title=\"switch&#x2F;checkout\"></a>switch&#x2F;checkout</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 创建一个分支</span><br>git branch <span class=\"hljs-variable\">$branch</span> <br><span class=\"hljs-comment\">## 可以切换分支也可以切换至某次提交或恢复某次提交的文件，如分支与文件名相同会产生冲突，默认是切换分支</span><br>git checkout <span class=\"hljs-variable\">$branch</span>(<span class=\"hljs-variable\">$commit</span>) <br><span class=\"hljs-comment\">## 切换某分支的某次提交</span><br>git checkout -b <span class=\"hljs-variable\">$branch</span> <span class=\"hljs-variable\">$commit</span> <br><span class=\"hljs-comment\">## 仅切换至某分支</span><br>git switch <span class=\"hljs-variable\">$branch</span><br><span class=\"hljs-comment\">## 如果一个分支提交过后可以用-d选项删掉分支，没有提交想删除需用-D强制删除分支</span><br>git branch -d <span class=\"hljs-variable\">$branch</span><br>git branch -D <span class=\"hljs-variable\">$branch</span><br><span class=\"hljs-comment\">## 图表形式查看分支结构</span><br>git <span class=\"hljs-built_in\">log</span> --graph --oneline --decorate --all<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git merge <span class=\"hljs-variable\">$branch</span><br><span class=\"hljs-comment\">## 两个分支修改了同一个文件的同一处位置会产生冲突</span><br><span class=\"hljs-comment\">## 查看冲突具体内容，修改文件中的冲突后再提交</span><br>git diff<br><span class=\"hljs-comment\">## 中止合并</span><br>git merge --abort<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 如果当前有两个分支，main和dev</span><br><span class=\"hljs-comment\">## 当前处在dev分支时，rebase会把dev分支接在main分支最新一次提交后</span><br>git switch dev<br>git rebase main<br><span class=\"hljs-comment\">## 当前处在main分支时，rebase会把main分支接在dev分支最新一次提交后</span><br>git switch main<br>git rebase dev<br></code></pre></td></tr></table></figure>\n\n"},{"title":"本地大模型部署","date":"2024-08-04T10:59:10.000Z","_content":"\n# 本地大模型部署\n\n> Windows根据官网下载安装即可\n>\n> [Linux 官方安装步骤](https://github.com/ollama/ollama/blob/main/docs/linux.md)\n\n## 1. 安装ollama\n\n```bash\n## 可能会比较慢，需要magic\ncurl -fsSL https://ollama.com/install.sh | sh\n## 也可先把ollama-linux-amd64下载到本地\n## 然后上传到linux\n## 修改安装脚本两处地方再安装\ncurl -fsSL https://ollama.com/install.sh >> ollama_install.sh\nsed -i.bak -e '/TEMP_DIR=/c TEMP_DIR=/tmp' -e '/curl --fail.*-o/s/^/#/' ollama_install.sh\n## 将 ollama-linux-amd64放到tmp下，并重命名为ollama\nmv ollama-linux-amd64 /tmp/ollama\n## 运行ollama_install.sh即可\nsh ollama_install.sh\n## 查看ollama状态\nsystemctl status ollama\n```\n\n```\nroot@localhost:~/mp_mount/llm# sh ollama_install.sh\n>>> Downloading ollama...\n>>> Installing ollama to /usr/local/bin...\n>>> Creating ollama user...\n>>> Adding ollama user to render group...\n>>> Adding ollama user to video group...\n>>> Adding current user to ollama group...\n>>> Creating ollama systemd service...\n>>> Enabling and starting ollama service...\nCreated symlink /etc/systemd/system/default.target.wants/ollama.service → /etc/systemd/system/ollama.service.\n>>> The Ollama API is now available at 127.0.0.1:11434.\n>>> Install complete. Run \"ollama\" from the command line.\n```\n\n此时访问`127.0.0.1:11434`显示`Ollama is running`，则部署成功。\n\n## 2. 选择模型\n\nhttps://ollama.com/ 官网右上角 model\n\n![select-model](../images/local-llm-deploy/select-model.png)\n\n\n\n这里模型我们选择阿里的千问2，复制命令`ollama run qwen2`在linux上运行即可，下载时间会有点长，耐心等待。\n\n![open-webui](../images/local-llm-deploy/qwen2.png)\n\n## 3. 安装open-webui\n\nhttps://github.com/open-webui/open-webui\n\n通过容器化部署。\n\n```bash\ndocker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main\n```\n\nhttp://127.0.0.1:3000 访问，需要注册，随便填写即可。\n\n登录后效果如图：\n\n![open-webui](../images/local-llm-deploy/open-webui.png)\n\n至此，我们就成功部署了一个由CPU提供算力的大语言模型。\n\n由于CPU和GPU设计结构的不同，CPU在处理大模型语言时效果并不理想。\n\n根据前面部署完后，使用时会发现模型给出回复的时候反应很慢，且是一个字一个字蹦出来的。\n\n然而GPU驱动大模型能够显著提高其反应速度，回复也是一段一段显示。\n\n下面容器化部署一并介绍如何使用GPU提供算力。\n\n## 4. 容器化部署\n\n使用Nvidia显卡需要下载驱动\n\n> Nvidia 官网\n>\n> https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html\n\n```bash\n## 配置apt包仓库地址\ncurl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\\n  && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \\\n    sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \\\n    sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list\n    \n## 更新仓库包列表\nsudo apt-get update\n\n## 安装工具\nsudo apt-get install -y nvidia-container-toolkit\n\n## 可使用该命令查看gpu\nnvidia-smi\n## 查看显卡列表\nnvidia-smi -L\n## 在使用过程中可观察gpu运行情况变化\nwatch -n 1 nvidia-smi\n# 或\nnvidia-smi -l\n\n## 运行由gpu驱动的ollama，将大模型存放路径持久化，--gpus all将所有gpu设备加入容器\ndocker run --gpus all -d -v /opt/ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama\n\n## 下载大模型\ndocker exec -it ollama ollama pull qwen2:7b\n```\n\n**其他包管理工具配置**\n\n```bash\n## yum 地址\ncurl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \\\n  sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo\n  \n## zypper地址\nsudo zypper ar https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo\nsudo zypper --gpg-auto-import-keys install -y nvidia-container-toolkit\n```\n\n","source":"_posts/local-llm-deploy.md","raw":"---\ntitle: 本地大模型部署\ndate: 2024-08-04 18:59:10\ntags: tools\n---\n\n# 本地大模型部署\n\n> Windows根据官网下载安装即可\n>\n> [Linux 官方安装步骤](https://github.com/ollama/ollama/blob/main/docs/linux.md)\n\n## 1. 安装ollama\n\n```bash\n## 可能会比较慢，需要magic\ncurl -fsSL https://ollama.com/install.sh | sh\n## 也可先把ollama-linux-amd64下载到本地\n## 然后上传到linux\n## 修改安装脚本两处地方再安装\ncurl -fsSL https://ollama.com/install.sh >> ollama_install.sh\nsed -i.bak -e '/TEMP_DIR=/c TEMP_DIR=/tmp' -e '/curl --fail.*-o/s/^/#/' ollama_install.sh\n## 将 ollama-linux-amd64放到tmp下，并重命名为ollama\nmv ollama-linux-amd64 /tmp/ollama\n## 运行ollama_install.sh即可\nsh ollama_install.sh\n## 查看ollama状态\nsystemctl status ollama\n```\n\n```\nroot@localhost:~/mp_mount/llm# sh ollama_install.sh\n>>> Downloading ollama...\n>>> Installing ollama to /usr/local/bin...\n>>> Creating ollama user...\n>>> Adding ollama user to render group...\n>>> Adding ollama user to video group...\n>>> Adding current user to ollama group...\n>>> Creating ollama systemd service...\n>>> Enabling and starting ollama service...\nCreated symlink /etc/systemd/system/default.target.wants/ollama.service → /etc/systemd/system/ollama.service.\n>>> The Ollama API is now available at 127.0.0.1:11434.\n>>> Install complete. Run \"ollama\" from the command line.\n```\n\n此时访问`127.0.0.1:11434`显示`Ollama is running`，则部署成功。\n\n## 2. 选择模型\n\nhttps://ollama.com/ 官网右上角 model\n\n![select-model](../images/local-llm-deploy/select-model.png)\n\n\n\n这里模型我们选择阿里的千问2，复制命令`ollama run qwen2`在linux上运行即可，下载时间会有点长，耐心等待。\n\n![open-webui](../images/local-llm-deploy/qwen2.png)\n\n## 3. 安装open-webui\n\nhttps://github.com/open-webui/open-webui\n\n通过容器化部署。\n\n```bash\ndocker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main\n```\n\nhttp://127.0.0.1:3000 访问，需要注册，随便填写即可。\n\n登录后效果如图：\n\n![open-webui](../images/local-llm-deploy/open-webui.png)\n\n至此，我们就成功部署了一个由CPU提供算力的大语言模型。\n\n由于CPU和GPU设计结构的不同，CPU在处理大模型语言时效果并不理想。\n\n根据前面部署完后，使用时会发现模型给出回复的时候反应很慢，且是一个字一个字蹦出来的。\n\n然而GPU驱动大模型能够显著提高其反应速度，回复也是一段一段显示。\n\n下面容器化部署一并介绍如何使用GPU提供算力。\n\n## 4. 容器化部署\n\n使用Nvidia显卡需要下载驱动\n\n> Nvidia 官网\n>\n> https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html\n\n```bash\n## 配置apt包仓库地址\ncurl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\\n  && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \\\n    sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \\\n    sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list\n    \n## 更新仓库包列表\nsudo apt-get update\n\n## 安装工具\nsudo apt-get install -y nvidia-container-toolkit\n\n## 可使用该命令查看gpu\nnvidia-smi\n## 查看显卡列表\nnvidia-smi -L\n## 在使用过程中可观察gpu运行情况变化\nwatch -n 1 nvidia-smi\n# 或\nnvidia-smi -l\n\n## 运行由gpu驱动的ollama，将大模型存放路径持久化，--gpus all将所有gpu设备加入容器\ndocker run --gpus all -d -v /opt/ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama\n\n## 下载大模型\ndocker exec -it ollama ollama pull qwen2:7b\n```\n\n**其他包管理工具配置**\n\n```bash\n## yum 地址\ncurl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \\\n  sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo\n  \n## zypper地址\nsudo zypper ar https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo\nsudo zypper --gpg-auto-import-keys install -y nvidia-container-toolkit\n```\n\n","slug":"local-llm-deploy","published":1,"updated":"2024-08-05T14:29:58.916Z","_id":"clzfp151c000889iq7cs2ef51","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"本地大模型部署\"><a href=\"#本地大模型部署\" class=\"headerlink\" title=\"本地大模型部署\"></a>本地大模型部署</h1><blockquote>\n<p>Windows根据官网下载安装即可</p>\n<p><a href=\"https://github.com/ollama/ollama/blob/main/docs/linux.md\">Linux 官方安装步骤</a></p>\n</blockquote>\n<h2 id=\"1-安装ollama\"><a href=\"#1-安装ollama\" class=\"headerlink\" title=\"1. 安装ollama\"></a>1. 安装ollama</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 可能会比较慢，需要magic</span><br>curl -fsSL https://ollama.com/install.sh | sh<br><span class=\"hljs-comment\">## 也可先把ollama-linux-amd64下载到本地</span><br><span class=\"hljs-comment\">## 然后上传到linux</span><br><span class=\"hljs-comment\">## 修改安装脚本两处地方再安装</span><br>curl -fsSL https://ollama.com/install.sh &gt;&gt; ollama_install.sh<br>sed -i.bak -e <span class=\"hljs-string\">&#x27;/TEMP_DIR=/c TEMP_DIR=/tmp&#x27;</span> -e <span class=\"hljs-string\">&#x27;/curl --fail.*-o/s/^/#/&#x27;</span> ollama_install.sh<br><span class=\"hljs-comment\">## 将 ollama-linux-amd64放到tmp下，并重命名为ollama</span><br><span class=\"hljs-built_in\">mv</span> ollama-linux-amd64 /tmp/ollama<br><span class=\"hljs-comment\">## 运行ollama_install.sh即可</span><br>sh ollama_install.sh<br><span class=\"hljs-comment\">## 查看ollama状态</span><br>systemctl status ollama<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight python-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python-repl\">root@localhost:~/mp_mount/llm# sh ollama_install.sh<br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Downloading ollama...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Installing ollama to /usr/local/<span class=\"hljs-built_in\">bin</span>...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Creating ollama user...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Adding ollama user to render group...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Adding ollama user to video group...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Adding current user to ollama group...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Creating ollama systemd service...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Enabling <span class=\"hljs-keyword\">and</span> starting ollama service...</span><br>Created symlink /etc/systemd/system/default.target.wants/ollama.service → /etc/systemd/system/ollama.service.<br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">The Ollama API <span class=\"hljs-keyword\">is</span> now available at <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>:<span class=\"hljs-number\">11434.</span></span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Install complete. Run <span class=\"hljs-string\">&quot;ollama&quot;</span> <span class=\"hljs-keyword\">from</span> the command line.</span><br></code></pre></td></tr></table></figure>\n\n<p>此时访问<code>127.0.0.1:11434</code>显示<code>Ollama is running</code>，则部署成功。</p>\n<h2 id=\"2-选择模型\"><a href=\"#2-选择模型\" class=\"headerlink\" title=\"2. 选择模型\"></a>2. 选择模型</h2><p><a href=\"https://ollama.com/\">https://ollama.com/</a> 官网右上角 model</p>\n<p><img src=\"/../images/local-llm-deploy/select-model.png\" alt=\"select-model\"></p>\n<p>这里模型我们选择阿里的千问2，复制命令<code>ollama run qwen2</code>在linux上运行即可，下载时间会有点长，耐心等待。</p>\n<p><img src=\"/../images/local-llm-deploy/qwen2.png\" alt=\"open-webui\"></p>\n<h2 id=\"3-安装open-webui\"><a href=\"#3-安装open-webui\" class=\"headerlink\" title=\"3. 安装open-webui\"></a>3. 安装open-webui</h2><p><a href=\"https://github.com/open-webui/open-webui\">https://github.com/open-webui/open-webui</a></p>\n<p>通过容器化部署。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"http://127.0.0.1:3000/\">http://127.0.0.1:3000</a> 访问，需要注册，随便填写即可。</p>\n<p>登录后效果如图：</p>\n<p><img src=\"/../images/local-llm-deploy/open-webui.png\" alt=\"open-webui\"></p>\n<p>至此，我们就成功部署了一个由CPU提供算力的大语言模型。</p>\n<p>由于CPU和GPU设计结构的不同，CPU在处理大模型语言时效果并不理想。</p>\n<p>根据前面部署完后，使用时会发现模型给出回复的时候反应很慢，且是一个字一个字蹦出来的。</p>\n<p>然而GPU驱动大模型能够显著提高其反应速度，回复也是一段一段显示。</p>\n<p>下面容器化部署一并介绍如何使用GPU提供算力。</p>\n<h2 id=\"4-容器化部署\"><a href=\"#4-容器化部署\" class=\"headerlink\" title=\"4. 容器化部署\"></a>4. 容器化部署</h2><p>使用Nvidia显卡需要下载驱动</p>\n<blockquote>\n<p>Nvidia 官网</p>\n<p><a href=\"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html\">https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 配置apt包仓库地址</span><br>curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | <span class=\"hljs-built_in\">sudo</span> gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\<br>  &amp;&amp; curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \\<br>    sed <span class=\"hljs-string\">&#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#x27;</span> | \\<br>    <span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/nvidia-container-toolkit.list<br>    <br><span class=\"hljs-comment\">## 更新仓库包列表</span><br><span class=\"hljs-built_in\">sudo</span> apt-get update<br><br><span class=\"hljs-comment\">## 安装工具</span><br><span class=\"hljs-built_in\">sudo</span> apt-get install -y nvidia-container-toolkit<br><br><span class=\"hljs-comment\">## 可使用该命令查看gpu</span><br>nvidia-smi<br><span class=\"hljs-comment\">## 查看显卡列表</span><br>nvidia-smi -L<br><span class=\"hljs-comment\">## 在使用过程中可观察gpu运行情况变化</span><br>watch -n 1 nvidia-smi<br><span class=\"hljs-comment\"># 或</span><br>nvidia-smi -l<br><br><span class=\"hljs-comment\">## 运行由gpu驱动的ollama，将大模型存放路径持久化，--gpus all将所有gpu设备加入容器</span><br>docker run --gpus all -d -v /opt/ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama<br><br><span class=\"hljs-comment\">## 下载大模型</span><br>docker <span class=\"hljs-built_in\">exec</span> -it ollama ollama pull qwen2:7b<br></code></pre></td></tr></table></figure>\n\n<p><strong>其他包管理工具配置</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## yum 地址</span><br>curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \\<br>  <span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">tee</span> /etc/yum.repos.d/nvidia-container-toolkit.repo<br>  <br><span class=\"hljs-comment\">## zypper地址</span><br><span class=\"hljs-built_in\">sudo</span> zypper ar https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo<br><span class=\"hljs-built_in\">sudo</span> zypper --gpg-auto-import-keys install -y nvidia-container-toolkit<br></code></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"本地大模型部署\"><a href=\"#本地大模型部署\" class=\"headerlink\" title=\"本地大模型部署\"></a>本地大模型部署</h1><blockquote>\n<p>Windows根据官网下载安装即可</p>\n<p><a href=\"https://github.com/ollama/ollama/blob/main/docs/linux.md\">Linux 官方安装步骤</a></p>\n</blockquote>\n<h2 id=\"1-安装ollama\"><a href=\"#1-安装ollama\" class=\"headerlink\" title=\"1. 安装ollama\"></a>1. 安装ollama</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 可能会比较慢，需要magic</span><br>curl -fsSL https://ollama.com/install.sh | sh<br><span class=\"hljs-comment\">## 也可先把ollama-linux-amd64下载到本地</span><br><span class=\"hljs-comment\">## 然后上传到linux</span><br><span class=\"hljs-comment\">## 修改安装脚本两处地方再安装</span><br>curl -fsSL https://ollama.com/install.sh &gt;&gt; ollama_install.sh<br>sed -i.bak -e <span class=\"hljs-string\">&#x27;/TEMP_DIR=/c TEMP_DIR=/tmp&#x27;</span> -e <span class=\"hljs-string\">&#x27;/curl --fail.*-o/s/^/#/&#x27;</span> ollama_install.sh<br><span class=\"hljs-comment\">## 将 ollama-linux-amd64放到tmp下，并重命名为ollama</span><br><span class=\"hljs-built_in\">mv</span> ollama-linux-amd64 /tmp/ollama<br><span class=\"hljs-comment\">## 运行ollama_install.sh即可</span><br>sh ollama_install.sh<br><span class=\"hljs-comment\">## 查看ollama状态</span><br>systemctl status ollama<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight python-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python-repl\">root@localhost:~/mp_mount/llm# sh ollama_install.sh<br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Downloading ollama...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Installing ollama to /usr/local/<span class=\"hljs-built_in\">bin</span>...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Creating ollama user...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Adding ollama user to render group...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Adding ollama user to video group...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Adding current user to ollama group...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Creating ollama systemd service...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Enabling <span class=\"hljs-keyword\">and</span> starting ollama service...</span><br>Created symlink /etc/systemd/system/default.target.wants/ollama.service → /etc/systemd/system/ollama.service.<br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">The Ollama API <span class=\"hljs-keyword\">is</span> now available at <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>:<span class=\"hljs-number\">11434.</span></span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">Install complete. Run <span class=\"hljs-string\">&quot;ollama&quot;</span> <span class=\"hljs-keyword\">from</span> the command line.</span><br></code></pre></td></tr></table></figure>\n\n<p>此时访问<code>127.0.0.1:11434</code>显示<code>Ollama is running</code>，则部署成功。</p>\n<h2 id=\"2-选择模型\"><a href=\"#2-选择模型\" class=\"headerlink\" title=\"2. 选择模型\"></a>2. 选择模型</h2><p><a href=\"https://ollama.com/\">https://ollama.com/</a> 官网右上角 model</p>\n<p><img src=\"/../images/local-llm-deploy/select-model.png\" alt=\"select-model\"></p>\n<p>这里模型我们选择阿里的千问2，复制命令<code>ollama run qwen2</code>在linux上运行即可，下载时间会有点长，耐心等待。</p>\n<p><img src=\"/../images/local-llm-deploy/qwen2.png\" alt=\"open-webui\"></p>\n<h2 id=\"3-安装open-webui\"><a href=\"#3-安装open-webui\" class=\"headerlink\" title=\"3. 安装open-webui\"></a>3. 安装open-webui</h2><p><a href=\"https://github.com/open-webui/open-webui\">https://github.com/open-webui/open-webui</a></p>\n<p>通过容器化部署。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"http://127.0.0.1:3000/\">http://127.0.0.1:3000</a> 访问，需要注册，随便填写即可。</p>\n<p>登录后效果如图：</p>\n<p><img src=\"/../images/local-llm-deploy/open-webui.png\" alt=\"open-webui\"></p>\n<p>至此，我们就成功部署了一个由CPU提供算力的大语言模型。</p>\n<p>由于CPU和GPU设计结构的不同，CPU在处理大模型语言时效果并不理想。</p>\n<p>根据前面部署完后，使用时会发现模型给出回复的时候反应很慢，且是一个字一个字蹦出来的。</p>\n<p>然而GPU驱动大模型能够显著提高其反应速度，回复也是一段一段显示。</p>\n<p>下面容器化部署一并介绍如何使用GPU提供算力。</p>\n<h2 id=\"4-容器化部署\"><a href=\"#4-容器化部署\" class=\"headerlink\" title=\"4. 容器化部署\"></a>4. 容器化部署</h2><p>使用Nvidia显卡需要下载驱动</p>\n<blockquote>\n<p>Nvidia 官网</p>\n<p><a href=\"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html\">https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 配置apt包仓库地址</span><br>curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | <span class=\"hljs-built_in\">sudo</span> gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\<br>  &amp;&amp; curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \\<br>    sed <span class=\"hljs-string\">&#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#x27;</span> | \\<br>    <span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/nvidia-container-toolkit.list<br>    <br><span class=\"hljs-comment\">## 更新仓库包列表</span><br><span class=\"hljs-built_in\">sudo</span> apt-get update<br><br><span class=\"hljs-comment\">## 安装工具</span><br><span class=\"hljs-built_in\">sudo</span> apt-get install -y nvidia-container-toolkit<br><br><span class=\"hljs-comment\">## 可使用该命令查看gpu</span><br>nvidia-smi<br><span class=\"hljs-comment\">## 查看显卡列表</span><br>nvidia-smi -L<br><span class=\"hljs-comment\">## 在使用过程中可观察gpu运行情况变化</span><br>watch -n 1 nvidia-smi<br><span class=\"hljs-comment\"># 或</span><br>nvidia-smi -l<br><br><span class=\"hljs-comment\">## 运行由gpu驱动的ollama，将大模型存放路径持久化，--gpus all将所有gpu设备加入容器</span><br>docker run --gpus all -d -v /opt/ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama<br><br><span class=\"hljs-comment\">## 下载大模型</span><br>docker <span class=\"hljs-built_in\">exec</span> -it ollama ollama pull qwen2:7b<br></code></pre></td></tr></table></figure>\n\n<p><strong>其他包管理工具配置</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## yum 地址</span><br>curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \\<br>  <span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">tee</span> /etc/yum.repos.d/nvidia-container-toolkit.repo<br>  <br><span class=\"hljs-comment\">## zypper地址</span><br><span class=\"hljs-built_in\">sudo</span> zypper ar https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo<br><span class=\"hljs-built_in\">sudo</span> zypper --gpg-auto-import-keys install -y nvidia-container-toolkit<br></code></pre></td></tr></table></figure>\n\n"},{"title":"[k8s] K8s Install","date":"2024-07-08T05:30:02.000Z","_content":"\n# K8s Install\n\n## 1. standard\n\n- 2GB or more of RAM\n- 2CPUs or more\n\n## 2. prepare\n\n- You need to install a container runtime into each node in the cluster so that Pods can run there.\n\n- Certain ports are open on your machines\n  - systemctl firewalld stop\n- Disable swap\n  - swapoff -a\n  - check /etc/fstab\n- Verify glibc is provide or not in machines\n- Verify the MAC address and product_uuid are unique for every node\n  - ip link\n  - ifconfig -a\n  - cat /sys/class/dmi/id/product_uuid\n- Check required ports\n  - nc 127.0.0.1 6443\n\n## 3. Installing kubeadm, kubelet and kubectl\n\n>kubelet version may never exceed the API server version.\n>\n>For example, the kubelet running 1.7.0 should be fully compatible with a 1.8.0 API server, but not vice versa.\n\n#### **Red Hat-based distributions**\n\n- Set SELinux to `permissive` mode\n\n  - setenforce 0\n  - sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\n- Add the Kubernetes `yum` repository\n\n  ```bash\n  cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n  [kubernetes]\n  name=Kubernetes\n  baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/\n  enabled=1\n  gpgcheck=1\n  gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key\n  exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni\n  EOF\n  ```\n\n- Install kubelet, kubeadm and kubectl, and enable kubelet to ensure it's automatically started on startup\n\n  - yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes\n  - systemctl enable --now kubelet\n\n#### **Without a package manager**\n\n- Install CNI plugins (required for most pod network)\n\n  ```bash\n  CNI_PLUGINS_VERSION=\"v1.3.0\"\n  ARCH=\"amd64\"\n  DEST=\"/opt/cni/bin\"\n  sudo mkdir -p \"$DEST\"\n  curl -L \"https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_VERSION}/cni-plugins-linux-${ARCH}-${CNI_PLUGINS_VERSION}.tgz\" | sudo tar -C \"$DEST\" -xz\n  \n  cat >> /etc/cni/net.d/10-containerd-net.conflist <<EOF\n  {\n    \"cniVersion\": \"1.0.0\",\n    \"name\": \"containerd-net\",\n    \"plugins\": [\n      {\n        \"type\": \"bridge\",\n        \"bridge\": \"cni0\",\n        \"isGateway\": true,\n        \"ipMasq\": true,\n        \"promiscMode\": true,\n        \"ipam\": {\n          \"type\": \"host-local\",\n          \"ranges\": [\n            [{\n              \"subnet\": \"10.88.0.0/16\"\n            }],\n            [{\n              \"subnet\": \"2001:4860:4860::/64\"\n            }]\n          ],\n          \"routes\": [\n            { \"dst\": \"0.0.0.0/0\" },\n            { \"dst\": \"::/0\" }\n          ]\n        }\n      },\n      {\n        \"type\": \"portmap\",\n        \"capabilities\": {\"portMappings\": true}\n      }\n    ]\n  }\n  EOF\n  ```\n\n- Define the directory to download command files\n\n  ```bash\n  DOWNLOAD_DIR=\"/usr/local/bin\"\n  sudo mkdir -p \"$DOWNLOAD_DIR\"\n  ```\n\n- Install crictl (required for kubeadm / Kubelet Container Runtime Interface (CRI))\n\n  ```bash\n  CRICTL_VERSION=\"v1.28.0\"\n  ARCH=\"amd64\"\n  curl -L \"https://github.com/kubernetes-sigs/cri-tools/releases/download/${CRICTL_VERSION}/crictl-${CRICTL_VERSION}-linux-${ARCH}.tar.gz\" | sudo tar -C $DOWNLOAD_DIR -xz\n  ```\n\n- Install `kubeadm`, `kubelet`, `kubectl` and add a `kubelet` systemd service\n\n  ```bash\n  RELEASE=\"$(curl -sSL https://dl.k8s.io/release/stable.txt)\"\n  ARCH=\"amd64\"\n  cd $DOWNLOAD_DIR\n  sudo curl -L --remote-name-all https://dl.k8s.io/release/${RELEASE}/bin/linux/${ARCH}/{kubeadm,kubelet}\n  sudo chmod +x {kubeadm,kubelet}\n  \n  RELEASE_VERSION=\"v0.16.2\"\n  curl -sSL \"https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/krel/templates/latest/kubelet/kubelet.service\" | sed \"s:/usr/bin:${DOWNLOAD_DIR}:g\" | sudo tee /etc/systemd/system/kubelet.service\n  sudo mkdir -p /etc/systemd/system/kubelet.service.d\n  curl -sSL \"https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf\" | sed \"s:/usr/bin:${DOWNLOAD_DIR}:g\" | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n  ```\n\n  > Notes:\n  >\n  > Site raw.githubusercontent.com is 404 ... replace following url\n  >\n  > https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubelet/kubelet.service\n  >\n  > https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf\n\n  ```bash\n  cat >> /etc/systemd/system/kubelet.service << 'EOF'\n  [Unit]\n  Description=kubelet: The Kubernetes Node Agent\n  Documentation=https://kubernetes.io/docs/\n  Wants=network-online.target\n  After=network-online.target\n  \n  [Service]\n  ExecStart=/usr/bin/kubelet\n  Restart=always\n  StartLimitInterval=0\n  RestartSec=10\n  \n  [Install]\n  WantedBy=multi-user.target\n  EOF\n  cat >> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf << 'EOF'\n  # Note: This dropin only works with kubeadm and kubelet v1.11+\n  [Service]\n  Environment=\"KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf\"\n  Environment=\"KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml\"\n  # This is a file that \"kubeadm init\" and \"kubeadm join\" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically\n  EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env\n  # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use\n  # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.\n  EnvironmentFile=-/etc/sysconfig/kubelet\n  ExecStart=\n  ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS\n  EOF\n  ```\n\n- Install and Set Up kubectl on Linux\n\n  - Install kubectl binary with curl on Linux\n\n    1. Download the latest release with the command\n\n       ```bash\n       curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n       \n       ## View stable version\n       curl -L -s https://dl.k8s.io/release/stable.txt\n       ```\n\n    2. Validate the binary (optional)\n\n       ```bash\n       ## Download the kubectl checksum file\n       curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256\"\n       \n       ## Validate the kubectl binary against the checksum file\n       echo \"$(cat kubectl.sha256)  kubectl\" | sha256sum --check\n       ```\n\n    3. Install kubectl\n\n       ```bash\n       sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n       ```\n\n    4. Test to ensure the version you installed is up-to-date\n\n       ```bash\n       kubectl version --client\n       ## Or use this for detailed view of version\n       kubectl version --client --output=yaml\n       ```\n\n  - Install using native package management\n\n    1. Add the Kubernetes `yum` repository. If you want to use Kubernetes version different than v1.29, replace v1.29 with the desired minor version in the command below.\n\n       ```bash\n       # This overwrites any existing configuration in /etc/yum.repos.d/kubernetes.repo\n       cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n       [kubernetes]\n       name=Kubernetes\n       baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/\n       enabled=1\n       gpgcheck=1\n       gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key\n       EOF\n       ```\n\n    2. Install kubectl using `yum`\n\n       ```bash\n       sudo yum install -y kubectl\n       ```\n\n- Enable and start `kubelet`\n\n  - ```bash\n    systemctl enable --now kubelet\n    ```\n\n> Container runtimes\n>\n> `kubeadm init` output error\n>\n> ` [ERROR CRI]: container runtime is not running`\n>\n> https://github.com/containerd/containerd/blob/main/docs/getting-started.md\n>\n> https://github.com/containerd/containerd/blob/main/containerd.service\n>\n> yum -y install socat conntrack-tools\n\n## 4. Creating a cluster with kubeadm\n\n```bash\nkubeadm init   --apiserver-advertise-address=192.168.175.133   --image-repository registry.aliyuncs.com/google_containers   --kubernetes-version v1.29.0   --service-cidr=10.1.0.0/16   --pod-network-cidr=10.244.0.0/16\n\n\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n## if you are the root user, you can run:\n  export KUBECONFIG=/etc/kubernetes/admin.conf\n```\n\n### Installing a Pod network add-on\n\n> https://github.com/containerd/containerd/blob/main/script/setup/install-cni\n\n```bash\n#!/usr/bin/env bash\n\n#   Copyright The containerd Authors.\n\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n\n#       http://www.apache.org/licenses/LICENSE-2.0\n\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n\n#\n# Builds and installs cni plugins to /opt/cni/bin,\n# and create basic cni config in /etc/cni/net.d.\n# The commit defined in go.mod\n#\nset -eu -o pipefail\n\nCNI_COMMIT=${1:-$(go list -f \"{{.Version}}\" -m github.com/containernetworking/plugins)}\nCNI_DIR=${DESTDIR:=''}/opt/cni\nCNI_CONFIG_DIR=${DESTDIR}/etc/cni/net.d\n: \"${CNI_REPO:=https://github.com/containernetworking/plugins.git}\"\n\n# e2e and Cirrus will fail with \"sudo: command not found\"\nSUDO=''\nif (( $EUID != 0 )); then\n    SUDO='sudo'\nfi\n\nTMPROOT=$(mktemp -d)\ngit clone \"${CNI_REPO}\" \"${TMPROOT}\"/plugins\npushd \"${TMPROOT}\"/plugins\ngit checkout \"$CNI_COMMIT\"\n./build_linux.sh\n$SUDO mkdir -p $CNI_DIR\n$SUDO cp -r ./bin $CNI_DIR\n$SUDO mkdir -p $CNI_CONFIG_DIR\n$SUDO cat << EOF | $SUDO tee $CNI_CONFIG_DIR/10-containerd-net.conflist\n{\n  \"cniVersion\": \"1.0.0\",\n  \"name\": \"containerd-net\",\n  \"plugins\": [\n    {\n      \"type\": \"bridge\",\n      \"bridge\": \"cni0\",\n      \"isGateway\": true,\n      \"ipMasq\": true,\n      \"promiscMode\": true,\n      \"ipam\": {\n        \"type\": \"host-local\",\n        \"ranges\": [\n          [{\n            \"subnet\": \"10.88.0.0/16\"\n          }],\n          [{\n            \"subnet\": \"2001:4860:4860::/64\"\n          }]\n        ],\n        \"routes\": [\n          { \"dst\": \"0.0.0.0/0\" },\n          { \"dst\": \"::/0\" }\n        ]\n      }\n    },\n    {\n      \"type\": \"portmap\",\n      \"capabilities\": {\"portMappings\": true}\n    }\n  ]\n}\nEOF\n\npopd\nrm -fR \"${TMPROOT}\"\n```\n\n### Control plane node isolation\n\n```bash\n## By default, your cluster will not schedule Pods on the control plane nodes for security reasons. If you want to be able to schedule Pods on the control plane nodes, for example for a single machine Kubernetes cluster, run:\nkubectl taint nodes --all node-role.kubernetes.io/control-plane-\n```\n\n","source":"_posts/k8s-K8s-Install.md","raw":"---\ntitle: '[k8s] K8s Install'\ndate: 2024-07-08 13:30:02\ntags: k8s\n---\n\n# K8s Install\n\n## 1. standard\n\n- 2GB or more of RAM\n- 2CPUs or more\n\n## 2. prepare\n\n- You need to install a container runtime into each node in the cluster so that Pods can run there.\n\n- Certain ports are open on your machines\n  - systemctl firewalld stop\n- Disable swap\n  - swapoff -a\n  - check /etc/fstab\n- Verify glibc is provide or not in machines\n- Verify the MAC address and product_uuid are unique for every node\n  - ip link\n  - ifconfig -a\n  - cat /sys/class/dmi/id/product_uuid\n- Check required ports\n  - nc 127.0.0.1 6443\n\n## 3. Installing kubeadm, kubelet and kubectl\n\n>kubelet version may never exceed the API server version.\n>\n>For example, the kubelet running 1.7.0 should be fully compatible with a 1.8.0 API server, but not vice versa.\n\n#### **Red Hat-based distributions**\n\n- Set SELinux to `permissive` mode\n\n  - setenforce 0\n  - sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\n- Add the Kubernetes `yum` repository\n\n  ```bash\n  cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n  [kubernetes]\n  name=Kubernetes\n  baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/\n  enabled=1\n  gpgcheck=1\n  gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key\n  exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni\n  EOF\n  ```\n\n- Install kubelet, kubeadm and kubectl, and enable kubelet to ensure it's automatically started on startup\n\n  - yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes\n  - systemctl enable --now kubelet\n\n#### **Without a package manager**\n\n- Install CNI plugins (required for most pod network)\n\n  ```bash\n  CNI_PLUGINS_VERSION=\"v1.3.0\"\n  ARCH=\"amd64\"\n  DEST=\"/opt/cni/bin\"\n  sudo mkdir -p \"$DEST\"\n  curl -L \"https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_VERSION}/cni-plugins-linux-${ARCH}-${CNI_PLUGINS_VERSION}.tgz\" | sudo tar -C \"$DEST\" -xz\n  \n  cat >> /etc/cni/net.d/10-containerd-net.conflist <<EOF\n  {\n    \"cniVersion\": \"1.0.0\",\n    \"name\": \"containerd-net\",\n    \"plugins\": [\n      {\n        \"type\": \"bridge\",\n        \"bridge\": \"cni0\",\n        \"isGateway\": true,\n        \"ipMasq\": true,\n        \"promiscMode\": true,\n        \"ipam\": {\n          \"type\": \"host-local\",\n          \"ranges\": [\n            [{\n              \"subnet\": \"10.88.0.0/16\"\n            }],\n            [{\n              \"subnet\": \"2001:4860:4860::/64\"\n            }]\n          ],\n          \"routes\": [\n            { \"dst\": \"0.0.0.0/0\" },\n            { \"dst\": \"::/0\" }\n          ]\n        }\n      },\n      {\n        \"type\": \"portmap\",\n        \"capabilities\": {\"portMappings\": true}\n      }\n    ]\n  }\n  EOF\n  ```\n\n- Define the directory to download command files\n\n  ```bash\n  DOWNLOAD_DIR=\"/usr/local/bin\"\n  sudo mkdir -p \"$DOWNLOAD_DIR\"\n  ```\n\n- Install crictl (required for kubeadm / Kubelet Container Runtime Interface (CRI))\n\n  ```bash\n  CRICTL_VERSION=\"v1.28.0\"\n  ARCH=\"amd64\"\n  curl -L \"https://github.com/kubernetes-sigs/cri-tools/releases/download/${CRICTL_VERSION}/crictl-${CRICTL_VERSION}-linux-${ARCH}.tar.gz\" | sudo tar -C $DOWNLOAD_DIR -xz\n  ```\n\n- Install `kubeadm`, `kubelet`, `kubectl` and add a `kubelet` systemd service\n\n  ```bash\n  RELEASE=\"$(curl -sSL https://dl.k8s.io/release/stable.txt)\"\n  ARCH=\"amd64\"\n  cd $DOWNLOAD_DIR\n  sudo curl -L --remote-name-all https://dl.k8s.io/release/${RELEASE}/bin/linux/${ARCH}/{kubeadm,kubelet}\n  sudo chmod +x {kubeadm,kubelet}\n  \n  RELEASE_VERSION=\"v0.16.2\"\n  curl -sSL \"https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/krel/templates/latest/kubelet/kubelet.service\" | sed \"s:/usr/bin:${DOWNLOAD_DIR}:g\" | sudo tee /etc/systemd/system/kubelet.service\n  sudo mkdir -p /etc/systemd/system/kubelet.service.d\n  curl -sSL \"https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf\" | sed \"s:/usr/bin:${DOWNLOAD_DIR}:g\" | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n  ```\n\n  > Notes:\n  >\n  > Site raw.githubusercontent.com is 404 ... replace following url\n  >\n  > https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubelet/kubelet.service\n  >\n  > https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf\n\n  ```bash\n  cat >> /etc/systemd/system/kubelet.service << 'EOF'\n  [Unit]\n  Description=kubelet: The Kubernetes Node Agent\n  Documentation=https://kubernetes.io/docs/\n  Wants=network-online.target\n  After=network-online.target\n  \n  [Service]\n  ExecStart=/usr/bin/kubelet\n  Restart=always\n  StartLimitInterval=0\n  RestartSec=10\n  \n  [Install]\n  WantedBy=multi-user.target\n  EOF\n  cat >> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf << 'EOF'\n  # Note: This dropin only works with kubeadm and kubelet v1.11+\n  [Service]\n  Environment=\"KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf\"\n  Environment=\"KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml\"\n  # This is a file that \"kubeadm init\" and \"kubeadm join\" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically\n  EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env\n  # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use\n  # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.\n  EnvironmentFile=-/etc/sysconfig/kubelet\n  ExecStart=\n  ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS\n  EOF\n  ```\n\n- Install and Set Up kubectl on Linux\n\n  - Install kubectl binary with curl on Linux\n\n    1. Download the latest release with the command\n\n       ```bash\n       curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n       \n       ## View stable version\n       curl -L -s https://dl.k8s.io/release/stable.txt\n       ```\n\n    2. Validate the binary (optional)\n\n       ```bash\n       ## Download the kubectl checksum file\n       curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256\"\n       \n       ## Validate the kubectl binary against the checksum file\n       echo \"$(cat kubectl.sha256)  kubectl\" | sha256sum --check\n       ```\n\n    3. Install kubectl\n\n       ```bash\n       sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n       ```\n\n    4. Test to ensure the version you installed is up-to-date\n\n       ```bash\n       kubectl version --client\n       ## Or use this for detailed view of version\n       kubectl version --client --output=yaml\n       ```\n\n  - Install using native package management\n\n    1. Add the Kubernetes `yum` repository. If you want to use Kubernetes version different than v1.29, replace v1.29 with the desired minor version in the command below.\n\n       ```bash\n       # This overwrites any existing configuration in /etc/yum.repos.d/kubernetes.repo\n       cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n       [kubernetes]\n       name=Kubernetes\n       baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/\n       enabled=1\n       gpgcheck=1\n       gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key\n       EOF\n       ```\n\n    2. Install kubectl using `yum`\n\n       ```bash\n       sudo yum install -y kubectl\n       ```\n\n- Enable and start `kubelet`\n\n  - ```bash\n    systemctl enable --now kubelet\n    ```\n\n> Container runtimes\n>\n> `kubeadm init` output error\n>\n> ` [ERROR CRI]: container runtime is not running`\n>\n> https://github.com/containerd/containerd/blob/main/docs/getting-started.md\n>\n> https://github.com/containerd/containerd/blob/main/containerd.service\n>\n> yum -y install socat conntrack-tools\n\n## 4. Creating a cluster with kubeadm\n\n```bash\nkubeadm init   --apiserver-advertise-address=192.168.175.133   --image-repository registry.aliyuncs.com/google_containers   --kubernetes-version v1.29.0   --service-cidr=10.1.0.0/16   --pod-network-cidr=10.244.0.0/16\n\n\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n## if you are the root user, you can run:\n  export KUBECONFIG=/etc/kubernetes/admin.conf\n```\n\n### Installing a Pod network add-on\n\n> https://github.com/containerd/containerd/blob/main/script/setup/install-cni\n\n```bash\n#!/usr/bin/env bash\n\n#   Copyright The containerd Authors.\n\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n\n#       http://www.apache.org/licenses/LICENSE-2.0\n\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n\n#\n# Builds and installs cni plugins to /opt/cni/bin,\n# and create basic cni config in /etc/cni/net.d.\n# The commit defined in go.mod\n#\nset -eu -o pipefail\n\nCNI_COMMIT=${1:-$(go list -f \"{{.Version}}\" -m github.com/containernetworking/plugins)}\nCNI_DIR=${DESTDIR:=''}/opt/cni\nCNI_CONFIG_DIR=${DESTDIR}/etc/cni/net.d\n: \"${CNI_REPO:=https://github.com/containernetworking/plugins.git}\"\n\n# e2e and Cirrus will fail with \"sudo: command not found\"\nSUDO=''\nif (( $EUID != 0 )); then\n    SUDO='sudo'\nfi\n\nTMPROOT=$(mktemp -d)\ngit clone \"${CNI_REPO}\" \"${TMPROOT}\"/plugins\npushd \"${TMPROOT}\"/plugins\ngit checkout \"$CNI_COMMIT\"\n./build_linux.sh\n$SUDO mkdir -p $CNI_DIR\n$SUDO cp -r ./bin $CNI_DIR\n$SUDO mkdir -p $CNI_CONFIG_DIR\n$SUDO cat << EOF | $SUDO tee $CNI_CONFIG_DIR/10-containerd-net.conflist\n{\n  \"cniVersion\": \"1.0.0\",\n  \"name\": \"containerd-net\",\n  \"plugins\": [\n    {\n      \"type\": \"bridge\",\n      \"bridge\": \"cni0\",\n      \"isGateway\": true,\n      \"ipMasq\": true,\n      \"promiscMode\": true,\n      \"ipam\": {\n        \"type\": \"host-local\",\n        \"ranges\": [\n          [{\n            \"subnet\": \"10.88.0.0/16\"\n          }],\n          [{\n            \"subnet\": \"2001:4860:4860::/64\"\n          }]\n        ],\n        \"routes\": [\n          { \"dst\": \"0.0.0.0/0\" },\n          { \"dst\": \"::/0\" }\n        ]\n      }\n    },\n    {\n      \"type\": \"portmap\",\n      \"capabilities\": {\"portMappings\": true}\n    }\n  ]\n}\nEOF\n\npopd\nrm -fR \"${TMPROOT}\"\n```\n\n### Control plane node isolation\n\n```bash\n## By default, your cluster will not schedule Pods on the control plane nodes for security reasons. If you want to be able to schedule Pods on the control plane nodes, for example for a single machine Kubernetes cluster, run:\nkubectl taint nodes --all node-role.kubernetes.io/control-plane-\n```\n\n","slug":"k8s-K8s-Install","published":1,"updated":"2024-07-08T05:32:17.000Z","comments":1,"layout":"post","photos":[],"_id":"clzfp151e000989iqa5m90g51","content":"<h1 id=\"K8s-Install\"><a href=\"#K8s-Install\" class=\"headerlink\" title=\"K8s Install\"></a>K8s Install</h1><h2 id=\"1-standard\"><a href=\"#1-standard\" class=\"headerlink\" title=\"1. standard\"></a>1. standard</h2><ul>\n<li>2GB or more of RAM</li>\n<li>2CPUs or more</li>\n</ul>\n<h2 id=\"2-prepare\"><a href=\"#2-prepare\" class=\"headerlink\" title=\"2. prepare\"></a>2. prepare</h2><ul>\n<li><p>You need to install a container runtime into each node in the cluster so that Pods can run there.</p>\n</li>\n<li><p>Certain ports are open on your machines</p>\n<ul>\n<li>systemctl firewalld stop</li>\n</ul>\n</li>\n<li><p>Disable swap</p>\n<ul>\n<li>swapoff -a</li>\n<li>check &#x2F;etc&#x2F;fstab</li>\n</ul>\n</li>\n<li><p>Verify glibc is provide or not in machines</p>\n</li>\n<li><p>Verify the MAC address and product_uuid are unique for every node</p>\n<ul>\n<li>ip link</li>\n<li>ifconfig -a</li>\n<li>cat &#x2F;sys&#x2F;class&#x2F;dmi&#x2F;id&#x2F;product_uuid</li>\n</ul>\n</li>\n<li><p>Check required ports</p>\n<ul>\n<li>nc 127.0.0.1 6443</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-Installing-kubeadm-kubelet-and-kubectl\"><a href=\"#3-Installing-kubeadm-kubelet-and-kubectl\" class=\"headerlink\" title=\"3. Installing kubeadm, kubelet and kubectl\"></a>3. Installing kubeadm, kubelet and kubectl</h2><blockquote>\n<p>kubelet version may never exceed the API server version.</p>\n<p>For example, the kubelet running 1.7.0 should be fully compatible with a 1.8.0 API server, but not vice versa.</p>\n</blockquote>\n<h4 id=\"Red-Hat-based-distributions\"><a href=\"#Red-Hat-based-distributions\" class=\"headerlink\" title=\"Red Hat-based distributions\"></a><strong>Red Hat-based distributions</strong></h4><ul>\n<li><p>Set SELinux to <code>permissive</code> mode</p>\n<ul>\n<li>setenforce 0</li>\n<li>sed -i ‘s&#x2F;^SELINUX&#x3D;enforcing$&#x2F;SELINUX&#x3D;permissive&#x2F;‘ &#x2F;etc&#x2F;selinux&#x2F;config</li>\n</ul>\n</li>\n<li><p>Add the Kubernetes <code>yum</code> repository</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"hljs-string\">[kubernetes]</span><br><span class=\"hljs-string\">name=Kubernetes</span><br><span class=\"hljs-string\">baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/</span><br><span class=\"hljs-string\">enabled=1</span><br><span class=\"hljs-string\">gpgcheck=1</span><br><span class=\"hljs-string\">gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key</span><br><span class=\"hljs-string\">exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Install kubelet, kubeadm and kubectl, and enable kubelet to ensure it’s automatically started on startup</p>\n<ul>\n<li>yum install -y kubelet kubeadm kubectl –disableexcludes&#x3D;kubernetes</li>\n<li>systemctl enable –now kubelet</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Without-a-package-manager\"><a href=\"#Without-a-package-manager\" class=\"headerlink\" title=\"Without a package manager\"></a><strong>Without a package manager</strong></h4><ul>\n<li><p>Install CNI plugins (required for most pod network)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">CNI_PLUGINS_VERSION=<span class=\"hljs-string\">&quot;v1.3.0&quot;</span><br>ARCH=<span class=\"hljs-string\">&quot;amd64&quot;</span><br>DEST=<span class=\"hljs-string\">&quot;/opt/cni/bin&quot;</span><br><span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DEST</span>&quot;</span><br>curl -L <span class=\"hljs-string\">&quot;https://github.com/containernetworking/plugins/releases/download/<span class=\"hljs-variable\">$&#123;CNI_PLUGINS_VERSION&#125;</span>/cni-plugins-linux-<span class=\"hljs-variable\">$&#123;ARCH&#125;</span>-<span class=\"hljs-variable\">$&#123;CNI_PLUGINS_VERSION&#125;</span>.tgz&quot;</span> | <span class=\"hljs-built_in\">sudo</span> tar -C <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DEST</span>&quot;</span> -xz<br><br><span class=\"hljs-built_in\">cat</span> &gt;&gt; /etc/cni/net.d/10-containerd-net.conflist &lt;&lt;<span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\">&#123;</span><br><span class=\"hljs-string\">  &quot;cniVersion&quot;: &quot;1.0.0&quot;,</span><br><span class=\"hljs-string\">  &quot;name&quot;: &quot;containerd-net&quot;,</span><br><span class=\"hljs-string\">  &quot;plugins&quot;: [</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;type&quot;: &quot;bridge&quot;,</span><br><span class=\"hljs-string\">      &quot;bridge&quot;: &quot;cni0&quot;,</span><br><span class=\"hljs-string\">      &quot;isGateway&quot;: true,</span><br><span class=\"hljs-string\">      &quot;ipMasq&quot;: true,</span><br><span class=\"hljs-string\">      &quot;promiscMode&quot;: true,</span><br><span class=\"hljs-string\">      &quot;ipam&quot;: &#123;</span><br><span class=\"hljs-string\">        &quot;type&quot;: &quot;host-local&quot;,</span><br><span class=\"hljs-string\">        &quot;ranges&quot;: [</span><br><span class=\"hljs-string\">          [&#123;</span><br><span class=\"hljs-string\">            &quot;subnet&quot;: &quot;10.88.0.0/16&quot;</span><br><span class=\"hljs-string\">          &#125;],</span><br><span class=\"hljs-string\">          [&#123;</span><br><span class=\"hljs-string\">            &quot;subnet&quot;: &quot;2001:4860:4860::/64&quot;</span><br><span class=\"hljs-string\">          &#125;]</span><br><span class=\"hljs-string\">        ],</span><br><span class=\"hljs-string\">        &quot;routes&quot;: [</span><br><span class=\"hljs-string\">          &#123; &quot;dst&quot;: &quot;0.0.0.0/0&quot; &#125;,</span><br><span class=\"hljs-string\">          &#123; &quot;dst&quot;: &quot;::/0&quot; &#125;</span><br><span class=\"hljs-string\">        ]</span><br><span class=\"hljs-string\">      &#125;</span><br><span class=\"hljs-string\">    &#125;,</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;type&quot;: &quot;portmap&quot;,</span><br><span class=\"hljs-string\">      &quot;capabilities&quot;: &#123;&quot;portMappings&quot;: true&#125;</span><br><span class=\"hljs-string\">    &#125;</span><br><span class=\"hljs-string\">  ]</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Define the directory to download command files</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">DOWNLOAD_DIR=<span class=\"hljs-string\">&quot;/usr/local/bin&quot;</span><br><span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DOWNLOAD_DIR</span>&quot;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Install crictl (required for kubeadm &#x2F; Kubelet Container Runtime Interface (CRI))</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">CRICTL_VERSION=<span class=\"hljs-string\">&quot;v1.28.0&quot;</span><br>ARCH=<span class=\"hljs-string\">&quot;amd64&quot;</span><br>curl -L <span class=\"hljs-string\">&quot;https://github.com/kubernetes-sigs/cri-tools/releases/download/<span class=\"hljs-variable\">$&#123;CRICTL_VERSION&#125;</span>/crictl-<span class=\"hljs-variable\">$&#123;CRICTL_VERSION&#125;</span>-linux-<span class=\"hljs-variable\">$&#123;ARCH&#125;</span>.tar.gz&quot;</span> | <span class=\"hljs-built_in\">sudo</span> tar -C <span class=\"hljs-variable\">$DOWNLOAD_DIR</span> -xz<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Install <code>kubeadm</code>, <code>kubelet</code>, <code>kubectl</code> and add a <code>kubelet</code> systemd service</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">RELEASE=<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(curl -sSL https://dl.k8s.io/release/stable.txt)</span>&quot;</span><br>ARCH=<span class=\"hljs-string\">&quot;amd64&quot;</span><br><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$DOWNLOAD_DIR</span><br><span class=\"hljs-built_in\">sudo</span> curl -L --remote-name-all https://dl.k8s.io/release/<span class=\"hljs-variable\">$&#123;RELEASE&#125;</span>/bin/linux/<span class=\"hljs-variable\">$&#123;ARCH&#125;</span>/&#123;kubeadm,kubelet&#125;<br><span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">chmod</span> +x &#123;kubeadm,kubelet&#125;<br><br>RELEASE_VERSION=<span class=\"hljs-string\">&quot;v0.16.2&quot;</span><br>curl -sSL <span class=\"hljs-string\">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class=\"hljs-variable\">$&#123;RELEASE_VERSION&#125;</span>/cmd/krel/templates/latest/kubelet/kubelet.service&quot;</span> | sed <span class=\"hljs-string\">&quot;s:/usr/bin:<span class=\"hljs-variable\">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | <span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">tee</span> /etc/systemd/system/kubelet.service<br><span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">mkdir</span> -p /etc/systemd/system/kubelet.service.d<br>curl -sSL <span class=\"hljs-string\">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class=\"hljs-variable\">$&#123;RELEASE_VERSION&#125;</span>/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf&quot;</span> | sed <span class=\"hljs-string\">&quot;s:/usr/bin:<span class=\"hljs-variable\">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | <span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">tee</span> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Notes:</p>\n<p>Site raw.githubusercontent.com is 404 … replace following url</p>\n<p><a href=\"https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubelet/kubelet.service\">https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubelet/kubelet.service</a></p>\n<p><a href=\"https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf\">https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> &gt;&gt; /etc/systemd/system/kubelet.service &lt;&lt; <span class=\"hljs-string\">&#x27;EOF&#x27;</span><br>[Unit]<br>Description=kubelet: The Kubernetes Node Agent<br>Documentation=https://kubernetes.io/docs/<br>Wants=network-online.target<br>After=network-online.target<br><br>[Service]<br>ExecStart=/usr/bin/kubelet<br>Restart=always<br>StartLimitInterval=0<br>RestartSec=10<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><span class=\"hljs-built_in\">cat</span> &gt;&gt; /etc/systemd/system/kubelet.service.d/10-kubeadm.conf &lt;&lt; <span class=\"hljs-string\">&#x27;EOF&#x27;</span><br><span class=\"hljs-comment\"># Note: This dropin only works with kubeadm and kubelet v1.11+</span><br>[Service]<br>Environment=<span class=\"hljs-string\">&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf&quot;</span><br>Environment=<span class=\"hljs-string\">&quot;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml&quot;</span><br><span class=\"hljs-comment\"># This is a file that &quot;kubeadm init&quot; and &quot;kubeadm join&quot; generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically</span><br>EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env<br><span class=\"hljs-comment\"># This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use</span><br><span class=\"hljs-comment\"># the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.</span><br>EnvironmentFile=-/etc/sysconfig/kubelet<br>ExecStart=<br>ExecStart=/usr/bin/kubelet <span class=\"hljs-variable\">$KUBELET_KUBECONFIG_ARGS</span> <span class=\"hljs-variable\">$KUBELET_CONFIG_ARGS</span> <span class=\"hljs-variable\">$KUBELET_KUBEADM_ARGS</span> <span class=\"hljs-variable\">$KUBELET_EXTRA_ARGS</span><br>EOF<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Install and Set Up kubectl on Linux</p>\n<ul>\n<li><p>Install kubectl binary with curl on Linux</p>\n<ol>\n<li><p>Download the latest release with the command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">curl -LO <span class=\"hljs-string\">&quot;https://dl.k8s.io/release/<span class=\"hljs-subst\">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl&quot;</span><br><br><span class=\"hljs-comment\">## View stable version</span><br>curl -L -s https://dl.k8s.io/release/stable.txt<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Validate the binary (optional)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## Download the kubectl checksum file</span><br>curl -LO <span class=\"hljs-string\">&quot;https://dl.k8s.io/release/<span class=\"hljs-subst\">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl.sha256&quot;</span><br><br><span class=\"hljs-comment\">## Validate the kubectl binary against the checksum file</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(cat kubectl.sha256)</span>  kubectl&quot;</span> | <span class=\"hljs-built_in\">sha256sum</span> --check<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Install kubectl</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Test to ensure the version you installed is up-to-date</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">kubectl version --client<br><span class=\"hljs-comment\">## Or use this for detailed view of version</span><br>kubectl version --client --output=yaml<br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>Install using native package management</p>\n<ol>\n<li><p>Add the Kubernetes <code>yum</code> repository. If you want to use Kubernetes version different than v1.29, replace v1.29 with the desired minor version in the command below.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># This overwrites any existing configuration in /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"hljs-string\">[kubernetes]</span><br><span class=\"hljs-string\">name=Kubernetes</span><br><span class=\"hljs-string\">baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/</span><br><span class=\"hljs-string\">enabled=1</span><br><span class=\"hljs-string\">gpgcheck=1</span><br><span class=\"hljs-string\">gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Install kubectl using <code>yum</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> yum install -y kubectl<br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>Enable and start <code>kubelet</code></p>\n<ul>\n<li><pre><code class=\"bash\">systemctl enable --now kubelet\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-title class_\">Container</span> runtimes</span><br><span class=\"hljs-meta prompt_\">&gt;</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-string\">`kubeadm init`</span> output error</span><br><span class=\"hljs-meta prompt_\">&gt;</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-string\">` [ERROR CRI]: container runtime is not running`</span></span><br><span class=\"hljs-meta prompt_\">&gt;</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/containerd/containerd/blob/main/docs/getting-started.md</span></span><br><span class=\"hljs-meta prompt_\">&gt;</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/containerd/containerd/blob/main/containerd.service</span></span><br><span class=\"hljs-meta prompt_\">&gt;</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">yum -y install socat conntrack-tools</span><br><br>## 4. Creating a cluster with kubeadm<br><br>```bash<br>kubeadm init   --apiserver-advertise-address=192.168.175.133   --image-repository registry.aliyuncs.com/google_containers   --kubernetes-version v1.29.0   --service-cidr=10.1.0.0/16   --pod-network-cidr=10.244.0.0/16<br><br><br>mkdir -p $HOME/.kube<br>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br>## if you are the root user, you can run:<br>  export KUBECONFIG=/etc/kubernetes/admin.conf<br></code></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Installing-a-Pod-network-add-on\"><a href=\"#Installing-a-Pod-network-add-on\" class=\"headerlink\" title=\"Installing a Pod network add-on\"></a>Installing a Pod network add-on</h3><blockquote>\n<p><a href=\"https://github.com/containerd/containerd/blob/main/script/setup/install-cni\">https://github.com/containerd/containerd/blob/main/script/setup/install-cni</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env bash</span><br><br><span class=\"hljs-comment\">#   Copyright The containerd Authors.</span><br><br><span class=\"hljs-comment\">#   Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class=\"hljs-comment\">#   you may not use this file except in compliance with the License.</span><br><span class=\"hljs-comment\">#   You may obtain a copy of the License at</span><br><br><span class=\"hljs-comment\">#       http://www.apache.org/licenses/LICENSE-2.0</span><br><br><span class=\"hljs-comment\">#   Unless required by applicable law or agreed to in writing, software</span><br><span class=\"hljs-comment\">#   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"hljs-comment\">#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"hljs-comment\">#   See the License for the specific language governing permissions and</span><br><span class=\"hljs-comment\">#   limitations under the License.</span><br><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># Builds and installs cni plugins to /opt/cni/bin,</span><br><span class=\"hljs-comment\"># and create basic cni config in /etc/cni/net.d.</span><br><span class=\"hljs-comment\"># The commit defined in go.mod</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-built_in\">set</span> -eu -o pipefail<br><br>CNI_COMMIT=<span class=\"hljs-variable\">$&#123;1:-$(go list -f &quot;&#123;&#123;.Version&#125;</span>&#125;<span class=\"hljs-string\">&quot; -m github.com/containernetworking/plugins)&#125;</span><br><span class=\"hljs-string\">CNI_DIR=<span class=\"hljs-variable\">$&#123;DESTDIR:=&#x27;&#x27;&#125;</span>/opt/cni</span><br><span class=\"hljs-string\">CNI_CONFIG_DIR=<span class=\"hljs-variable\">$&#123;DESTDIR&#125;</span>/etc/cni/net.d</span><br><span class=\"hljs-string\">: &quot;</span><span class=\"hljs-variable\">$&#123;CNI_REPO:=https://github.com/containernetworking/plugins.git&#125;</span><span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"># e2e and Cirrus will fail with &quot;</span><span class=\"hljs-built_in\">sudo</span>: <span class=\"hljs-built_in\">command</span> not found<span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">SUDO=&#x27;&#x27;</span><br><span class=\"hljs-string\">if (( <span class=\"hljs-variable\">$EUID</span> != 0 )); then</span><br><span class=\"hljs-string\">    SUDO=&#x27;sudo&#x27;</span><br><span class=\"hljs-string\">fi</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">TMPROOT=<span class=\"hljs-subst\">$(mktemp -d)</span></span><br><span class=\"hljs-string\">git clone &quot;</span><span class=\"hljs-variable\">$&#123;CNI_REPO&#125;</span><span class=\"hljs-string\">&quot; &quot;</span><span class=\"hljs-variable\">$&#123;TMPROOT&#125;</span><span class=\"hljs-string\">&quot;/plugins</span><br><span class=\"hljs-string\">pushd &quot;</span><span class=\"hljs-variable\">$&#123;TMPROOT&#125;</span><span class=\"hljs-string\">&quot;/plugins</span><br><span class=\"hljs-string\">git checkout &quot;</span><span class=\"hljs-variable\">$CNI_COMMIT</span><span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">./build_linux.sh</span><br><span class=\"hljs-string\"><span class=\"hljs-variable\">$SUDO</span> mkdir -p <span class=\"hljs-variable\">$CNI_DIR</span></span><br><span class=\"hljs-string\"><span class=\"hljs-variable\">$SUDO</span> cp -r ./bin <span class=\"hljs-variable\">$CNI_DIR</span></span><br><span class=\"hljs-string\"><span class=\"hljs-variable\">$SUDO</span> mkdir -p <span class=\"hljs-variable\">$CNI_CONFIG_DIR</span></span><br><span class=\"hljs-string\"><span class=\"hljs-variable\">$SUDO</span> cat &lt;&lt; EOF | <span class=\"hljs-variable\">$SUDO</span> tee <span class=\"hljs-variable\">$CNI_CONFIG_DIR</span>/10-containerd-net.conflist</span><br><span class=\"hljs-string\">&#123;</span><br><span class=\"hljs-string\">  &quot;</span>cniVersion<span class=\"hljs-string\">&quot;: &quot;</span>1.0.0<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">  &quot;</span>name<span class=\"hljs-string\">&quot;: &quot;</span>containerd-net<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">  &quot;</span>plugins<span class=\"hljs-string\">&quot;: [</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;</span><span class=\"hljs-built_in\">type</span><span class=\"hljs-string\">&quot;: &quot;</span>bridge<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">      &quot;</span>bridge<span class=\"hljs-string\">&quot;: &quot;</span>cni0<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">      &quot;</span>isGateway<span class=\"hljs-string\">&quot;: true,</span><br><span class=\"hljs-string\">      &quot;</span>ipMasq<span class=\"hljs-string\">&quot;: true,</span><br><span class=\"hljs-string\">      &quot;</span>promiscMode<span class=\"hljs-string\">&quot;: true,</span><br><span class=\"hljs-string\">      &quot;</span>ipam<span class=\"hljs-string\">&quot;: &#123;</span><br><span class=\"hljs-string\">        &quot;</span><span class=\"hljs-built_in\">type</span><span class=\"hljs-string\">&quot;: &quot;</span>host-local<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">        &quot;</span>ranges<span class=\"hljs-string\">&quot;: [</span><br><span class=\"hljs-string\">          [&#123;</span><br><span class=\"hljs-string\">            &quot;</span>subnet<span class=\"hljs-string\">&quot;: &quot;</span>10.88.0.0/16<span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">          &#125;],</span><br><span class=\"hljs-string\">          [&#123;</span><br><span class=\"hljs-string\">            &quot;</span>subnet<span class=\"hljs-string\">&quot;: &quot;</span>2001:4860:4860::/64<span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">          &#125;]</span><br><span class=\"hljs-string\">        ],</span><br><span class=\"hljs-string\">        &quot;</span>routes<span class=\"hljs-string\">&quot;: [</span><br><span class=\"hljs-string\">          &#123; &quot;</span>dst<span class=\"hljs-string\">&quot;: &quot;</span>0.0.0.0/0<span class=\"hljs-string\">&quot; &#125;,</span><br><span class=\"hljs-string\">          &#123; &quot;</span>dst<span class=\"hljs-string\">&quot;: &quot;</span>::/0<span class=\"hljs-string\">&quot; &#125;</span><br><span class=\"hljs-string\">        ]</span><br><span class=\"hljs-string\">      &#125;</span><br><span class=\"hljs-string\">    &#125;,</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;</span><span class=\"hljs-built_in\">type</span><span class=\"hljs-string\">&quot;: &quot;</span>portmap<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">      &quot;</span>capabilities<span class=\"hljs-string\">&quot;: &#123;&quot;</span>portMappings<span class=\"hljs-string\">&quot;: true&#125;</span><br><span class=\"hljs-string\">    &#125;</span><br><span class=\"hljs-string\">  ]</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">popd</span><br><span class=\"hljs-string\">rm -fR &quot;</span><span class=\"hljs-variable\">$&#123;TMPROOT&#125;</span><span class=\"hljs-string\">&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Control-plane-node-isolation\"><a href=\"#Control-plane-node-isolation\" class=\"headerlink\" title=\"Control plane node isolation\"></a>Control plane node isolation</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## By default, your cluster will not schedule Pods on the control plane nodes for security reasons. If you want to be able to schedule Pods on the control plane nodes, for example for a single machine Kubernetes cluster, run:</span><br>kubectl taint nodes --all node-role.kubernetes.io/control-plane-<br></code></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"K8s-Install\"><a href=\"#K8s-Install\" class=\"headerlink\" title=\"K8s Install\"></a>K8s Install</h1><h2 id=\"1-standard\"><a href=\"#1-standard\" class=\"headerlink\" title=\"1. standard\"></a>1. standard</h2><ul>\n<li>2GB or more of RAM</li>\n<li>2CPUs or more</li>\n</ul>\n<h2 id=\"2-prepare\"><a href=\"#2-prepare\" class=\"headerlink\" title=\"2. prepare\"></a>2. prepare</h2><ul>\n<li><p>You need to install a container runtime into each node in the cluster so that Pods can run there.</p>\n</li>\n<li><p>Certain ports are open on your machines</p>\n<ul>\n<li>systemctl firewalld stop</li>\n</ul>\n</li>\n<li><p>Disable swap</p>\n<ul>\n<li>swapoff -a</li>\n<li>check &#x2F;etc&#x2F;fstab</li>\n</ul>\n</li>\n<li><p>Verify glibc is provide or not in machines</p>\n</li>\n<li><p>Verify the MAC address and product_uuid are unique for every node</p>\n<ul>\n<li>ip link</li>\n<li>ifconfig -a</li>\n<li>cat &#x2F;sys&#x2F;class&#x2F;dmi&#x2F;id&#x2F;product_uuid</li>\n</ul>\n</li>\n<li><p>Check required ports</p>\n<ul>\n<li>nc 127.0.0.1 6443</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-Installing-kubeadm-kubelet-and-kubectl\"><a href=\"#3-Installing-kubeadm-kubelet-and-kubectl\" class=\"headerlink\" title=\"3. Installing kubeadm, kubelet and kubectl\"></a>3. Installing kubeadm, kubelet and kubectl</h2><blockquote>\n<p>kubelet version may never exceed the API server version.</p>\n<p>For example, the kubelet running 1.7.0 should be fully compatible with a 1.8.0 API server, but not vice versa.</p>\n</blockquote>\n<h4 id=\"Red-Hat-based-distributions\"><a href=\"#Red-Hat-based-distributions\" class=\"headerlink\" title=\"Red Hat-based distributions\"></a><strong>Red Hat-based distributions</strong></h4><ul>\n<li><p>Set SELinux to <code>permissive</code> mode</p>\n<ul>\n<li>setenforce 0</li>\n<li>sed -i ‘s&#x2F;^SELINUX&#x3D;enforcing$&#x2F;SELINUX&#x3D;permissive&#x2F;‘ &#x2F;etc&#x2F;selinux&#x2F;config</li>\n</ul>\n</li>\n<li><p>Add the Kubernetes <code>yum</code> repository</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"hljs-string\">[kubernetes]</span><br><span class=\"hljs-string\">name=Kubernetes</span><br><span class=\"hljs-string\">baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/</span><br><span class=\"hljs-string\">enabled=1</span><br><span class=\"hljs-string\">gpgcheck=1</span><br><span class=\"hljs-string\">gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key</span><br><span class=\"hljs-string\">exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Install kubelet, kubeadm and kubectl, and enable kubelet to ensure it’s automatically started on startup</p>\n<ul>\n<li>yum install -y kubelet kubeadm kubectl –disableexcludes&#x3D;kubernetes</li>\n<li>systemctl enable –now kubelet</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Without-a-package-manager\"><a href=\"#Without-a-package-manager\" class=\"headerlink\" title=\"Without a package manager\"></a><strong>Without a package manager</strong></h4><ul>\n<li><p>Install CNI plugins (required for most pod network)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">CNI_PLUGINS_VERSION=<span class=\"hljs-string\">&quot;v1.3.0&quot;</span><br>ARCH=<span class=\"hljs-string\">&quot;amd64&quot;</span><br>DEST=<span class=\"hljs-string\">&quot;/opt/cni/bin&quot;</span><br><span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DEST</span>&quot;</span><br>curl -L <span class=\"hljs-string\">&quot;https://github.com/containernetworking/plugins/releases/download/<span class=\"hljs-variable\">$&#123;CNI_PLUGINS_VERSION&#125;</span>/cni-plugins-linux-<span class=\"hljs-variable\">$&#123;ARCH&#125;</span>-<span class=\"hljs-variable\">$&#123;CNI_PLUGINS_VERSION&#125;</span>.tgz&quot;</span> | <span class=\"hljs-built_in\">sudo</span> tar -C <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DEST</span>&quot;</span> -xz<br><br><span class=\"hljs-built_in\">cat</span> &gt;&gt; /etc/cni/net.d/10-containerd-net.conflist &lt;&lt;<span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\">&#123;</span><br><span class=\"hljs-string\">  &quot;cniVersion&quot;: &quot;1.0.0&quot;,</span><br><span class=\"hljs-string\">  &quot;name&quot;: &quot;containerd-net&quot;,</span><br><span class=\"hljs-string\">  &quot;plugins&quot;: [</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;type&quot;: &quot;bridge&quot;,</span><br><span class=\"hljs-string\">      &quot;bridge&quot;: &quot;cni0&quot;,</span><br><span class=\"hljs-string\">      &quot;isGateway&quot;: true,</span><br><span class=\"hljs-string\">      &quot;ipMasq&quot;: true,</span><br><span class=\"hljs-string\">      &quot;promiscMode&quot;: true,</span><br><span class=\"hljs-string\">      &quot;ipam&quot;: &#123;</span><br><span class=\"hljs-string\">        &quot;type&quot;: &quot;host-local&quot;,</span><br><span class=\"hljs-string\">        &quot;ranges&quot;: [</span><br><span class=\"hljs-string\">          [&#123;</span><br><span class=\"hljs-string\">            &quot;subnet&quot;: &quot;10.88.0.0/16&quot;</span><br><span class=\"hljs-string\">          &#125;],</span><br><span class=\"hljs-string\">          [&#123;</span><br><span class=\"hljs-string\">            &quot;subnet&quot;: &quot;2001:4860:4860::/64&quot;</span><br><span class=\"hljs-string\">          &#125;]</span><br><span class=\"hljs-string\">        ],</span><br><span class=\"hljs-string\">        &quot;routes&quot;: [</span><br><span class=\"hljs-string\">          &#123; &quot;dst&quot;: &quot;0.0.0.0/0&quot; &#125;,</span><br><span class=\"hljs-string\">          &#123; &quot;dst&quot;: &quot;::/0&quot; &#125;</span><br><span class=\"hljs-string\">        ]</span><br><span class=\"hljs-string\">      &#125;</span><br><span class=\"hljs-string\">    &#125;,</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;type&quot;: &quot;portmap&quot;,</span><br><span class=\"hljs-string\">      &quot;capabilities&quot;: &#123;&quot;portMappings&quot;: true&#125;</span><br><span class=\"hljs-string\">    &#125;</span><br><span class=\"hljs-string\">  ]</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Define the directory to download command files</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">DOWNLOAD_DIR=<span class=\"hljs-string\">&quot;/usr/local/bin&quot;</span><br><span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DOWNLOAD_DIR</span>&quot;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Install crictl (required for kubeadm &#x2F; Kubelet Container Runtime Interface (CRI))</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">CRICTL_VERSION=<span class=\"hljs-string\">&quot;v1.28.0&quot;</span><br>ARCH=<span class=\"hljs-string\">&quot;amd64&quot;</span><br>curl -L <span class=\"hljs-string\">&quot;https://github.com/kubernetes-sigs/cri-tools/releases/download/<span class=\"hljs-variable\">$&#123;CRICTL_VERSION&#125;</span>/crictl-<span class=\"hljs-variable\">$&#123;CRICTL_VERSION&#125;</span>-linux-<span class=\"hljs-variable\">$&#123;ARCH&#125;</span>.tar.gz&quot;</span> | <span class=\"hljs-built_in\">sudo</span> tar -C <span class=\"hljs-variable\">$DOWNLOAD_DIR</span> -xz<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Install <code>kubeadm</code>, <code>kubelet</code>, <code>kubectl</code> and add a <code>kubelet</code> systemd service</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">RELEASE=<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(curl -sSL https://dl.k8s.io/release/stable.txt)</span>&quot;</span><br>ARCH=<span class=\"hljs-string\">&quot;amd64&quot;</span><br><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$DOWNLOAD_DIR</span><br><span class=\"hljs-built_in\">sudo</span> curl -L --remote-name-all https://dl.k8s.io/release/<span class=\"hljs-variable\">$&#123;RELEASE&#125;</span>/bin/linux/<span class=\"hljs-variable\">$&#123;ARCH&#125;</span>/&#123;kubeadm,kubelet&#125;<br><span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">chmod</span> +x &#123;kubeadm,kubelet&#125;<br><br>RELEASE_VERSION=<span class=\"hljs-string\">&quot;v0.16.2&quot;</span><br>curl -sSL <span class=\"hljs-string\">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class=\"hljs-variable\">$&#123;RELEASE_VERSION&#125;</span>/cmd/krel/templates/latest/kubelet/kubelet.service&quot;</span> | sed <span class=\"hljs-string\">&quot;s:/usr/bin:<span class=\"hljs-variable\">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | <span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">tee</span> /etc/systemd/system/kubelet.service<br><span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">mkdir</span> -p /etc/systemd/system/kubelet.service.d<br>curl -sSL <span class=\"hljs-string\">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class=\"hljs-variable\">$&#123;RELEASE_VERSION&#125;</span>/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf&quot;</span> | sed <span class=\"hljs-string\">&quot;s:/usr/bin:<span class=\"hljs-variable\">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | <span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">tee</span> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Notes:</p>\n<p>Site raw.githubusercontent.com is 404 … replace following url</p>\n<p><a href=\"https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubelet/kubelet.service\">https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubelet/kubelet.service</a></p>\n<p><a href=\"https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf\">https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> &gt;&gt; /etc/systemd/system/kubelet.service &lt;&lt; <span class=\"hljs-string\">&#x27;EOF&#x27;</span><br>[Unit]<br>Description=kubelet: The Kubernetes Node Agent<br>Documentation=https://kubernetes.io/docs/<br>Wants=network-online.target<br>After=network-online.target<br><br>[Service]<br>ExecStart=/usr/bin/kubelet<br>Restart=always<br>StartLimitInterval=0<br>RestartSec=10<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><span class=\"hljs-built_in\">cat</span> &gt;&gt; /etc/systemd/system/kubelet.service.d/10-kubeadm.conf &lt;&lt; <span class=\"hljs-string\">&#x27;EOF&#x27;</span><br><span class=\"hljs-comment\"># Note: This dropin only works with kubeadm and kubelet v1.11+</span><br>[Service]<br>Environment=<span class=\"hljs-string\">&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf&quot;</span><br>Environment=<span class=\"hljs-string\">&quot;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml&quot;</span><br><span class=\"hljs-comment\"># This is a file that &quot;kubeadm init&quot; and &quot;kubeadm join&quot; generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically</span><br>EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env<br><span class=\"hljs-comment\"># This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use</span><br><span class=\"hljs-comment\"># the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.</span><br>EnvironmentFile=-/etc/sysconfig/kubelet<br>ExecStart=<br>ExecStart=/usr/bin/kubelet <span class=\"hljs-variable\">$KUBELET_KUBECONFIG_ARGS</span> <span class=\"hljs-variable\">$KUBELET_CONFIG_ARGS</span> <span class=\"hljs-variable\">$KUBELET_KUBEADM_ARGS</span> <span class=\"hljs-variable\">$KUBELET_EXTRA_ARGS</span><br>EOF<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Install and Set Up kubectl on Linux</p>\n<ul>\n<li><p>Install kubectl binary with curl on Linux</p>\n<ol>\n<li><p>Download the latest release with the command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">curl -LO <span class=\"hljs-string\">&quot;https://dl.k8s.io/release/<span class=\"hljs-subst\">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl&quot;</span><br><br><span class=\"hljs-comment\">## View stable version</span><br>curl -L -s https://dl.k8s.io/release/stable.txt<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Validate the binary (optional)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## Download the kubectl checksum file</span><br>curl -LO <span class=\"hljs-string\">&quot;https://dl.k8s.io/release/<span class=\"hljs-subst\">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl.sha256&quot;</span><br><br><span class=\"hljs-comment\">## Validate the kubectl binary against the checksum file</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(cat kubectl.sha256)</span>  kubectl&quot;</span> | <span class=\"hljs-built_in\">sha256sum</span> --check<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Install kubectl</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Test to ensure the version you installed is up-to-date</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">kubectl version --client<br><span class=\"hljs-comment\">## Or use this for detailed view of version</span><br>kubectl version --client --output=yaml<br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>Install using native package management</p>\n<ol>\n<li><p>Add the Kubernetes <code>yum</code> repository. If you want to use Kubernetes version different than v1.29, replace v1.29 with the desired minor version in the command below.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># This overwrites any existing configuration in /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"hljs-string\">[kubernetes]</span><br><span class=\"hljs-string\">name=Kubernetes</span><br><span class=\"hljs-string\">baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/</span><br><span class=\"hljs-string\">enabled=1</span><br><span class=\"hljs-string\">gpgcheck=1</span><br><span class=\"hljs-string\">gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Install kubectl using <code>yum</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> yum install -y kubectl<br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>Enable and start <code>kubelet</code></p>\n<ul>\n<li><pre><code class=\"bash\">systemctl enable --now kubelet\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-title class_\">Container</span> runtimes</span><br><span class=\"hljs-meta prompt_\">&gt;</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-string\">`kubeadm init`</span> output error</span><br><span class=\"hljs-meta prompt_\">&gt;</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-string\">` [ERROR CRI]: container runtime is not running`</span></span><br><span class=\"hljs-meta prompt_\">&gt;</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/containerd/containerd/blob/main/docs/getting-started.md</span></span><br><span class=\"hljs-meta prompt_\">&gt;</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/containerd/containerd/blob/main/containerd.service</span></span><br><span class=\"hljs-meta prompt_\">&gt;</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">yum -y install socat conntrack-tools</span><br><br>## 4. Creating a cluster with kubeadm<br><br>```bash<br>kubeadm init   --apiserver-advertise-address=192.168.175.133   --image-repository registry.aliyuncs.com/google_containers   --kubernetes-version v1.29.0   --service-cidr=10.1.0.0/16   --pod-network-cidr=10.244.0.0/16<br><br><br>mkdir -p $HOME/.kube<br>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br>## if you are the root user, you can run:<br>  export KUBECONFIG=/etc/kubernetes/admin.conf<br></code></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Installing-a-Pod-network-add-on\"><a href=\"#Installing-a-Pod-network-add-on\" class=\"headerlink\" title=\"Installing a Pod network add-on\"></a>Installing a Pod network add-on</h3><blockquote>\n<p><a href=\"https://github.com/containerd/containerd/blob/main/script/setup/install-cni\">https://github.com/containerd/containerd/blob/main/script/setup/install-cni</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env bash</span><br><br><span class=\"hljs-comment\">#   Copyright The containerd Authors.</span><br><br><span class=\"hljs-comment\">#   Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class=\"hljs-comment\">#   you may not use this file except in compliance with the License.</span><br><span class=\"hljs-comment\">#   You may obtain a copy of the License at</span><br><br><span class=\"hljs-comment\">#       http://www.apache.org/licenses/LICENSE-2.0</span><br><br><span class=\"hljs-comment\">#   Unless required by applicable law or agreed to in writing, software</span><br><span class=\"hljs-comment\">#   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"hljs-comment\">#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"hljs-comment\">#   See the License for the specific language governing permissions and</span><br><span class=\"hljs-comment\">#   limitations under the License.</span><br><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># Builds and installs cni plugins to /opt/cni/bin,</span><br><span class=\"hljs-comment\"># and create basic cni config in /etc/cni/net.d.</span><br><span class=\"hljs-comment\"># The commit defined in go.mod</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-built_in\">set</span> -eu -o pipefail<br><br>CNI_COMMIT=<span class=\"hljs-variable\">$&#123;1:-$(go list -f &quot;&#123;&#123;.Version&#125;</span>&#125;<span class=\"hljs-string\">&quot; -m github.com/containernetworking/plugins)&#125;</span><br><span class=\"hljs-string\">CNI_DIR=<span class=\"hljs-variable\">$&#123;DESTDIR:=&#x27;&#x27;&#125;</span>/opt/cni</span><br><span class=\"hljs-string\">CNI_CONFIG_DIR=<span class=\"hljs-variable\">$&#123;DESTDIR&#125;</span>/etc/cni/net.d</span><br><span class=\"hljs-string\">: &quot;</span><span class=\"hljs-variable\">$&#123;CNI_REPO:=https://github.com/containernetworking/plugins.git&#125;</span><span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"># e2e and Cirrus will fail with &quot;</span><span class=\"hljs-built_in\">sudo</span>: <span class=\"hljs-built_in\">command</span> not found<span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">SUDO=&#x27;&#x27;</span><br><span class=\"hljs-string\">if (( <span class=\"hljs-variable\">$EUID</span> != 0 )); then</span><br><span class=\"hljs-string\">    SUDO=&#x27;sudo&#x27;</span><br><span class=\"hljs-string\">fi</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">TMPROOT=<span class=\"hljs-subst\">$(mktemp -d)</span></span><br><span class=\"hljs-string\">git clone &quot;</span><span class=\"hljs-variable\">$&#123;CNI_REPO&#125;</span><span class=\"hljs-string\">&quot; &quot;</span><span class=\"hljs-variable\">$&#123;TMPROOT&#125;</span><span class=\"hljs-string\">&quot;/plugins</span><br><span class=\"hljs-string\">pushd &quot;</span><span class=\"hljs-variable\">$&#123;TMPROOT&#125;</span><span class=\"hljs-string\">&quot;/plugins</span><br><span class=\"hljs-string\">git checkout &quot;</span><span class=\"hljs-variable\">$CNI_COMMIT</span><span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">./build_linux.sh</span><br><span class=\"hljs-string\"><span class=\"hljs-variable\">$SUDO</span> mkdir -p <span class=\"hljs-variable\">$CNI_DIR</span></span><br><span class=\"hljs-string\"><span class=\"hljs-variable\">$SUDO</span> cp -r ./bin <span class=\"hljs-variable\">$CNI_DIR</span></span><br><span class=\"hljs-string\"><span class=\"hljs-variable\">$SUDO</span> mkdir -p <span class=\"hljs-variable\">$CNI_CONFIG_DIR</span></span><br><span class=\"hljs-string\"><span class=\"hljs-variable\">$SUDO</span> cat &lt;&lt; EOF | <span class=\"hljs-variable\">$SUDO</span> tee <span class=\"hljs-variable\">$CNI_CONFIG_DIR</span>/10-containerd-net.conflist</span><br><span class=\"hljs-string\">&#123;</span><br><span class=\"hljs-string\">  &quot;</span>cniVersion<span class=\"hljs-string\">&quot;: &quot;</span>1.0.0<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">  &quot;</span>name<span class=\"hljs-string\">&quot;: &quot;</span>containerd-net<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">  &quot;</span>plugins<span class=\"hljs-string\">&quot;: [</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;</span><span class=\"hljs-built_in\">type</span><span class=\"hljs-string\">&quot;: &quot;</span>bridge<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">      &quot;</span>bridge<span class=\"hljs-string\">&quot;: &quot;</span>cni0<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">      &quot;</span>isGateway<span class=\"hljs-string\">&quot;: true,</span><br><span class=\"hljs-string\">      &quot;</span>ipMasq<span class=\"hljs-string\">&quot;: true,</span><br><span class=\"hljs-string\">      &quot;</span>promiscMode<span class=\"hljs-string\">&quot;: true,</span><br><span class=\"hljs-string\">      &quot;</span>ipam<span class=\"hljs-string\">&quot;: &#123;</span><br><span class=\"hljs-string\">        &quot;</span><span class=\"hljs-built_in\">type</span><span class=\"hljs-string\">&quot;: &quot;</span>host-local<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">        &quot;</span>ranges<span class=\"hljs-string\">&quot;: [</span><br><span class=\"hljs-string\">          [&#123;</span><br><span class=\"hljs-string\">            &quot;</span>subnet<span class=\"hljs-string\">&quot;: &quot;</span>10.88.0.0/16<span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">          &#125;],</span><br><span class=\"hljs-string\">          [&#123;</span><br><span class=\"hljs-string\">            &quot;</span>subnet<span class=\"hljs-string\">&quot;: &quot;</span>2001:4860:4860::/64<span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">          &#125;]</span><br><span class=\"hljs-string\">        ],</span><br><span class=\"hljs-string\">        &quot;</span>routes<span class=\"hljs-string\">&quot;: [</span><br><span class=\"hljs-string\">          &#123; &quot;</span>dst<span class=\"hljs-string\">&quot;: &quot;</span>0.0.0.0/0<span class=\"hljs-string\">&quot; &#125;,</span><br><span class=\"hljs-string\">          &#123; &quot;</span>dst<span class=\"hljs-string\">&quot;: &quot;</span>::/0<span class=\"hljs-string\">&quot; &#125;</span><br><span class=\"hljs-string\">        ]</span><br><span class=\"hljs-string\">      &#125;</span><br><span class=\"hljs-string\">    &#125;,</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;</span><span class=\"hljs-built_in\">type</span><span class=\"hljs-string\">&quot;: &quot;</span>portmap<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">      &quot;</span>capabilities<span class=\"hljs-string\">&quot;: &#123;&quot;</span>portMappings<span class=\"hljs-string\">&quot;: true&#125;</span><br><span class=\"hljs-string\">    &#125;</span><br><span class=\"hljs-string\">  ]</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">popd</span><br><span class=\"hljs-string\">rm -fR &quot;</span><span class=\"hljs-variable\">$&#123;TMPROOT&#125;</span><span class=\"hljs-string\">&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Control-plane-node-isolation\"><a href=\"#Control-plane-node-isolation\" class=\"headerlink\" title=\"Control plane node isolation\"></a>Control plane node isolation</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## By default, your cluster will not schedule Pods on the control plane nodes for security reasons. If you want to be able to schedule Pods on the control plane nodes, for example for a single machine Kubernetes cluster, run:</span><br>kubectl taint nodes --all node-role.kubernetes.io/control-plane-<br></code></pre></td></tr></table></figure>\n\n"},{"title":"[k8s] Prepare Environment","date":"2024-07-08T05:26:38.000Z","_content":"\n# Prepare Environment\n\n## Containerd Install\n\n> Container Runtimes\n>\n> Kubernetes 1.29 requires that you use a runtime that conforms with the [Container Runtime Interface](https://kubernetes.io/docs/concepts/overview/components/#container-runtime) (CRI).\n\n###  1. Installing containerd\n\n```bash\nwget https://github.com/containerd/containerd/releases/download/v1.7.11/containerd-1.7.11-linux-amd64.tar.gz\n\ntar -xvf containerd-1.6.26-linux-amd64.tar.gz -C /usr/local/\n```\n\n> https://github.com/containerd/containerd/blob/main/containerd.service\n\n```bash\ncat >> /etc/systemd/system/containerd.service << 'EOF'\n# Copyright The containerd Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n[Unit]\nDescription=containerd container runtime\nDocumentation=https://containerd.io\nAfter=network.target local-fs.target\n\n[Service]\nExecStartPre=-/sbin/modprobe overlay\nExecStart=/usr/local/bin/containerd\n\nType=notify\nDelegate=yes\nKillMode=process\nRestart=always\nRestartSec=5\n\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNPROC=infinity\nLimitCORE=infinity\n\n# Comment TasksMax if your systemd version does not supports it.\n# Only systemd 226 and above support this version.\nTasksMax=infinity\nOOMScoreAdjust=-999\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsystemctl daemon-reload\nsystemctl enable --now containerd\nsystemctl status containerd\n```\n\n### 2. Installing runc\n\n```bash\nwget https://github.com/opencontainers/runc/releases/download/v1.1.11/runc.amd64\n\ninstall -m 755 runc.amd64 /usr/local/sbin/runc\n```\n\n### 3. Installing CNI plugins\n\n```bash\nwget https://github.com/containernetworking/plugins/releases/download/v1.4.0/cni-plugins-linux-amd64-v1.4.0.tgz\n\nmkdir -p /opt/cni/bin\ntar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.1.1.tgz\n```\n\n### Default config\n\n> containerd uses a configuration file located in `/etc/containerd/config.toml` for specifying daemon level options. A sample configuration file can be found [here](https://github.com/containerd/containerd/blob/main/docs/man/containerd-config.toml.5.md).\n>\n> The default configuration can be generated via `containerd config default > /etc/containerd/config.toml`.\n\n```\nversion = 2\n\nroot = \"/var/lib/containerd\"\nstate = \"/run/containerd\"\noom_score = 0\nimports = [\"/etc/containerd/runtime_*.toml\", \"./debug.toml\"]\n\n[grpc]\n  address = \"/run/containerd/containerd.sock\"\n  uid = 0\n  gid = 0\n\n[debug]\n  address = \"/run/containerd/debug.sock\"\n  uid = 0\n  gid = 0\n  level = \"info\"\n\n[metrics]\n  address = \"\"\n  grpc_histogram = false\n\n[cgroup]\n  path = \"\"\n\n[plugins]\n  [plugins.\"io.containerd.monitor.v1.cgroups\"]\n    no_prometheus = false\n  [plugins.\"io.containerd.service.v1.diff-service\"]\n    default = [\"walking\"]\n  [plugins.\"io.containerd.gc.v1.scheduler\"]\n    pause_threshold = 0.02\n    deletion_threshold = 0\n    mutation_threshold = 100\n    schedule_delay = 0\n    startup_delay = \"100ms\"\n  [plugins.\"io.containerd.runtime.v2.task\"]\n    platforms = [\"linux/amd64\"]\n    sched_core = true\n  [plugins.\"io.containerd.service.v1.tasks-service\"]\n    blockio_config_file = \"\"\n    rdt_config_file = \"\"\n```\n\n## Install and configure prerequisites\n\n```bash\n## Forwarding IPv4 and letting iptables see bridged traffic\ncat <<EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n## sysctl params required by setup, params persist across reboots\ncat <<EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n\n## Verify that the br_netfilter, overlay modules are loaded by running the following commands:\nlsmod | grep br_netfilter\nlsmod | grep overlay\n\n## Verify that the net.bridge.bridge-nf-call-iptables, net.bridge.bridge-nf-call-ip6tables, and net.ipv4.ip_forward system variables are set to 1 in your sysctl config by running the following command:\nsysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward\n```\n\n## Cgroup drivers\n\n- cgroupfs\n\n  - The `cgroupfs` driver is **not** recommended when [systemd](https://www.freedesktop.org/wiki/Software/systemd/) is the init system because systemd expects a single cgroup manager on the system. Additionally, if you use [cgroup v2](https://kubernetes.io/docs/concepts/architecture/cgroups), use the `systemd` cgroup driver instead of `cgroupfs`.\n\n- systemd\n\n  - To set `systemd` as the cgroup driver, edit the [`KubeletConfiguration`](https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/) option of `cgroupDriver` and set it to `systemd`. For example:\n\n    ```yaml\n    apiVersion: kubelet.config.k8s.io/v1beta1\n    kind: KubeletConfiguration\n    ...\n    cgroupDriver: systemd\n    ```\n\n  > Note: Starting with v1.22 and later, when creating a cluster with kubeadm, if the user does not set the cgroupDriver field under KubeletConfiguration, kubeadm defaults it to systemd\n\n##  Container runtimes\n\n> In this step once you've created a valid `config.toml` configuration file.\n>\n> You can find this file under the path `/etc/containerd/config.toml`.\n>\n> On Linux the default CRI socket for containerd is `/run/containerd/containerd.sock`.\n\n### Configuring the systemd cgroup driver\n\n> The `systemd` cgroup driver is recommended if you use [cgroup v2](https://kubernetes.io/docs/concepts/architecture/cgroups).\n\n```bash\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n  ...\n  [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n    SystemdCgroup = true\n    \nsudo sed -i \"s#SystemdCgroup = false#SystemdCgroup = true#g\" /etc/containerd/config.toml\n### If you apply this change, make sure to restart containerd:\nsudo systemctl restart containerd\n```\n\n###  Overriding the sandbox (pause) image\n\nIn your [containerd config](https://github.com/containerd/containerd/blob/main/docs/cri/config.md) you can overwrite the sandbox image by setting the following config:\n\n```\n[plugins.\"io.containerd.grpc.v1.cri\"]\n  sandbox_image = \"registry.k8s.io/pause:3.2\"\n```\n\n```bash\n[plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]\n### add following config in China   [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"k8s.gcr.io\"]\n      endpoint = [\"registry.cn-hangzhou.aliyuncs.com/google_containers\"]\n\n### This is important if you live in China.\nsudo sed -i \"s#registry.k8s.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g\" /etc/containerd/config.toml\nsudo systemctl restart containerd\n```\n\n```bash\nctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.22.3\nctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.22.3\nctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.22.3\nctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.22.3\nctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5\nctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.0-0\nctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4\n\nctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.22.3 k8s.gcr.io/kube-apiserver:v1.22.3\nctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.22.3 k8s.gcr.io/kube-controller-manager:v1.22.3\nctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.22.3 k8s.gcr.io/kube-scheduler:v1.22.3\nctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.22.3 k8s.gcr.io/kube-proxy:v1.22.3\nctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5 k8s.gcr.io/pause:3.5\nctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.0-0 k8s.gcr.io/etcd:3.5.0-0\nctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4 k8s.gcr.io/coredns/coredns:v1.8.4\n```\n\n","source":"_posts/k8s-Prepare-Environment.md","raw":"---\ntitle: '[k8s] Prepare Environment'\ndate: 2024-07-08 13:26:38\ntags: k8s\n---\n\n# Prepare Environment\n\n## Containerd Install\n\n> Container Runtimes\n>\n> Kubernetes 1.29 requires that you use a runtime that conforms with the [Container Runtime Interface](https://kubernetes.io/docs/concepts/overview/components/#container-runtime) (CRI).\n\n###  1. Installing containerd\n\n```bash\nwget https://github.com/containerd/containerd/releases/download/v1.7.11/containerd-1.7.11-linux-amd64.tar.gz\n\ntar -xvf containerd-1.6.26-linux-amd64.tar.gz -C /usr/local/\n```\n\n> https://github.com/containerd/containerd/blob/main/containerd.service\n\n```bash\ncat >> /etc/systemd/system/containerd.service << 'EOF'\n# Copyright The containerd Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n[Unit]\nDescription=containerd container runtime\nDocumentation=https://containerd.io\nAfter=network.target local-fs.target\n\n[Service]\nExecStartPre=-/sbin/modprobe overlay\nExecStart=/usr/local/bin/containerd\n\nType=notify\nDelegate=yes\nKillMode=process\nRestart=always\nRestartSec=5\n\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNPROC=infinity\nLimitCORE=infinity\n\n# Comment TasksMax if your systemd version does not supports it.\n# Only systemd 226 and above support this version.\nTasksMax=infinity\nOOMScoreAdjust=-999\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsystemctl daemon-reload\nsystemctl enable --now containerd\nsystemctl status containerd\n```\n\n### 2. Installing runc\n\n```bash\nwget https://github.com/opencontainers/runc/releases/download/v1.1.11/runc.amd64\n\ninstall -m 755 runc.amd64 /usr/local/sbin/runc\n```\n\n### 3. Installing CNI plugins\n\n```bash\nwget https://github.com/containernetworking/plugins/releases/download/v1.4.0/cni-plugins-linux-amd64-v1.4.0.tgz\n\nmkdir -p /opt/cni/bin\ntar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.1.1.tgz\n```\n\n### Default config\n\n> containerd uses a configuration file located in `/etc/containerd/config.toml` for specifying daemon level options. A sample configuration file can be found [here](https://github.com/containerd/containerd/blob/main/docs/man/containerd-config.toml.5.md).\n>\n> The default configuration can be generated via `containerd config default > /etc/containerd/config.toml`.\n\n```\nversion = 2\n\nroot = \"/var/lib/containerd\"\nstate = \"/run/containerd\"\noom_score = 0\nimports = [\"/etc/containerd/runtime_*.toml\", \"./debug.toml\"]\n\n[grpc]\n  address = \"/run/containerd/containerd.sock\"\n  uid = 0\n  gid = 0\n\n[debug]\n  address = \"/run/containerd/debug.sock\"\n  uid = 0\n  gid = 0\n  level = \"info\"\n\n[metrics]\n  address = \"\"\n  grpc_histogram = false\n\n[cgroup]\n  path = \"\"\n\n[plugins]\n  [plugins.\"io.containerd.monitor.v1.cgroups\"]\n    no_prometheus = false\n  [plugins.\"io.containerd.service.v1.diff-service\"]\n    default = [\"walking\"]\n  [plugins.\"io.containerd.gc.v1.scheduler\"]\n    pause_threshold = 0.02\n    deletion_threshold = 0\n    mutation_threshold = 100\n    schedule_delay = 0\n    startup_delay = \"100ms\"\n  [plugins.\"io.containerd.runtime.v2.task\"]\n    platforms = [\"linux/amd64\"]\n    sched_core = true\n  [plugins.\"io.containerd.service.v1.tasks-service\"]\n    blockio_config_file = \"\"\n    rdt_config_file = \"\"\n```\n\n## Install and configure prerequisites\n\n```bash\n## Forwarding IPv4 and letting iptables see bridged traffic\ncat <<EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n## sysctl params required by setup, params persist across reboots\ncat <<EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n\n## Verify that the br_netfilter, overlay modules are loaded by running the following commands:\nlsmod | grep br_netfilter\nlsmod | grep overlay\n\n## Verify that the net.bridge.bridge-nf-call-iptables, net.bridge.bridge-nf-call-ip6tables, and net.ipv4.ip_forward system variables are set to 1 in your sysctl config by running the following command:\nsysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward\n```\n\n## Cgroup drivers\n\n- cgroupfs\n\n  - The `cgroupfs` driver is **not** recommended when [systemd](https://www.freedesktop.org/wiki/Software/systemd/) is the init system because systemd expects a single cgroup manager on the system. Additionally, if you use [cgroup v2](https://kubernetes.io/docs/concepts/architecture/cgroups), use the `systemd` cgroup driver instead of `cgroupfs`.\n\n- systemd\n\n  - To set `systemd` as the cgroup driver, edit the [`KubeletConfiguration`](https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/) option of `cgroupDriver` and set it to `systemd`. For example:\n\n    ```yaml\n    apiVersion: kubelet.config.k8s.io/v1beta1\n    kind: KubeletConfiguration\n    ...\n    cgroupDriver: systemd\n    ```\n\n  > Note: Starting with v1.22 and later, when creating a cluster with kubeadm, if the user does not set the cgroupDriver field under KubeletConfiguration, kubeadm defaults it to systemd\n\n##  Container runtimes\n\n> In this step once you've created a valid `config.toml` configuration file.\n>\n> You can find this file under the path `/etc/containerd/config.toml`.\n>\n> On Linux the default CRI socket for containerd is `/run/containerd/containerd.sock`.\n\n### Configuring the systemd cgroup driver\n\n> The `systemd` cgroup driver is recommended if you use [cgroup v2](https://kubernetes.io/docs/concepts/architecture/cgroups).\n\n```bash\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n  ...\n  [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n    SystemdCgroup = true\n    \nsudo sed -i \"s#SystemdCgroup = false#SystemdCgroup = true#g\" /etc/containerd/config.toml\n### If you apply this change, make sure to restart containerd:\nsudo systemctl restart containerd\n```\n\n###  Overriding the sandbox (pause) image\n\nIn your [containerd config](https://github.com/containerd/containerd/blob/main/docs/cri/config.md) you can overwrite the sandbox image by setting the following config:\n\n```\n[plugins.\"io.containerd.grpc.v1.cri\"]\n  sandbox_image = \"registry.k8s.io/pause:3.2\"\n```\n\n```bash\n[plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]\n### add following config in China   [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"k8s.gcr.io\"]\n      endpoint = [\"registry.cn-hangzhou.aliyuncs.com/google_containers\"]\n\n### This is important if you live in China.\nsudo sed -i \"s#registry.k8s.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g\" /etc/containerd/config.toml\nsudo systemctl restart containerd\n```\n\n```bash\nctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.22.3\nctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.22.3\nctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.22.3\nctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.22.3\nctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5\nctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.0-0\nctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4\n\nctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.22.3 k8s.gcr.io/kube-apiserver:v1.22.3\nctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.22.3 k8s.gcr.io/kube-controller-manager:v1.22.3\nctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.22.3 k8s.gcr.io/kube-scheduler:v1.22.3\nctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.22.3 k8s.gcr.io/kube-proxy:v1.22.3\nctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5 k8s.gcr.io/pause:3.5\nctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.0-0 k8s.gcr.io/etcd:3.5.0-0\nctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4 k8s.gcr.io/coredns/coredns:v1.8.4\n```\n\n","slug":"k8s-Prepare-Environment","published":1,"updated":"2024-07-08T05:30:24.000Z","comments":1,"layout":"post","photos":[],"_id":"clzfp151i000c89iq2nji3bud","content":"<h1 id=\"Prepare-Environment\"><a href=\"#Prepare-Environment\" class=\"headerlink\" title=\"Prepare Environment\"></a>Prepare Environment</h1><h2 id=\"Containerd-Install\"><a href=\"#Containerd-Install\" class=\"headerlink\" title=\"Containerd Install\"></a>Containerd Install</h2><blockquote>\n<p>Container Runtimes</p>\n<p>Kubernetes 1.29 requires that you use a runtime that conforms with the <a href=\"https://kubernetes.io/docs/concepts/overview/components/#container-runtime\">Container Runtime Interface</a> (CRI).</p>\n</blockquote>\n<h3 id=\"1-Installing-containerd\"><a href=\"#1-Installing-containerd\" class=\"headerlink\" title=\"1. Installing containerd\"></a>1. Installing containerd</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">wget https://github.com/containerd/containerd/releases/download/v1.7.11/containerd-1.7.11-linux-amd64.tar.gz<br><br>tar -xvf containerd-1.6.26-linux-amd64.tar.gz -C /usr/local/<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://github.com/containerd/containerd/blob/main/containerd.service\">https://github.com/containerd/containerd/blob/main/containerd.service</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> &gt;&gt; /etc/systemd/system/containerd.service &lt;&lt; <span class=\"hljs-string\">&#x27;EOF&#x27;</span><br><span class=\"hljs-comment\"># Copyright The containerd Authors.</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class=\"hljs-comment\"># you may not use this file except in compliance with the License.</span><br><span class=\"hljs-comment\"># You may obtain a copy of the License at</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># Unless required by applicable law or agreed to in writing, software</span><br><span class=\"hljs-comment\"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"hljs-comment\"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"hljs-comment\"># See the License for the specific language governing permissions and</span><br><span class=\"hljs-comment\"># limitations under the License.</span><br><br>[Unit]<br>Description=containerd container runtime<br>Documentation=https://containerd.io<br>After=network.target local-fs.target<br><br>[Service]<br>ExecStartPre=-/sbin/modprobe overlay<br>ExecStart=/usr/local/bin/containerd<br><br>Type=notify<br>Delegate=<span class=\"hljs-built_in\">yes</span><br>KillMode=process<br>Restart=always<br>RestartSec=5<br><br><span class=\"hljs-comment\"># Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class=\"hljs-comment\"># in the kernel. We recommend using cgroups to do container-local accounting.</span><br>LimitNPROC=infinity<br>LimitCORE=infinity<br><br><span class=\"hljs-comment\"># Comment TasksMax if your systemd version does not supports it.</span><br><span class=\"hljs-comment\"># Only systemd 226 and above support this version.</span><br>TasksMax=infinity<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><br>systemctl daemon-reload<br>systemctl <span class=\"hljs-built_in\">enable</span> --now containerd<br>systemctl status containerd<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-Installing-runc\"><a href=\"#2-Installing-runc\" class=\"headerlink\" title=\"2. Installing runc\"></a>2. Installing runc</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">wget https://github.com/opencontainers/runc/releases/download/v1.1.11/runc.amd64<br><br>install -m 755 runc.amd64 /usr/local/sbin/runc<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-Installing-CNI-plugins\"><a href=\"#3-Installing-CNI-plugins\" class=\"headerlink\" title=\"3. Installing CNI plugins\"></a>3. Installing CNI plugins</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">wget https://github.com/containernetworking/plugins/releases/download/v1.4.0/cni-plugins-linux-amd64-v1.4.0.tgz<br><br><span class=\"hljs-built_in\">mkdir</span> -p /opt/cni/bin<br>tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.1.1.tgz<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Default-config\"><a href=\"#Default-config\" class=\"headerlink\" title=\"Default config\"></a>Default config</h3><blockquote>\n<p>containerd uses a configuration file located in <code>/etc/containerd/config.toml</code> for specifying daemon level options. A sample configuration file can be found <a href=\"https://github.com/containerd/containerd/blob/main/docs/man/containerd-config.toml.5.md\">here</a>.</p>\n<p>The default configuration can be generated via <code>containerd config default &gt; /etc/containerd/config.toml</code>.</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">version</span> = <span class=\"hljs-number\">2</span><br><br><span class=\"hljs-attr\">root</span> = <span class=\"hljs-string\">&quot;/var/lib/containerd&quot;</span><br><span class=\"hljs-attr\">state</span> = <span class=\"hljs-string\">&quot;/run/containerd&quot;</span><br><span class=\"hljs-attr\">oom_score</span> = <span class=\"hljs-number\">0</span><br><span class=\"hljs-attr\">imports</span> = [<span class=\"hljs-string\">&quot;/etc/containerd/runtime_*.toml&quot;</span>, <span class=\"hljs-string\">&quot;./debug.toml&quot;</span>]<br><br><span class=\"hljs-section\">[grpc]</span><br>  <span class=\"hljs-attr\">address</span> = <span class=\"hljs-string\">&quot;/run/containerd/containerd.sock&quot;</span><br>  <span class=\"hljs-attr\">uid</span> = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">gid</span> = <span class=\"hljs-number\">0</span><br><br><span class=\"hljs-section\">[debug]</span><br>  <span class=\"hljs-attr\">address</span> = <span class=\"hljs-string\">&quot;/run/containerd/debug.sock&quot;</span><br>  <span class=\"hljs-attr\">uid</span> = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">gid</span> = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">level</span> = <span class=\"hljs-string\">&quot;info&quot;</span><br><br><span class=\"hljs-section\">[metrics]</span><br>  <span class=\"hljs-attr\">address</span> = <span class=\"hljs-string\">&quot;&quot;</span><br>  <span class=\"hljs-attr\">grpc_histogram</span> = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-section\">[cgroup]</span><br>  <span class=\"hljs-attr\">path</span> = <span class=\"hljs-string\">&quot;&quot;</span><br><br><span class=\"hljs-section\">[plugins]</span><br>  <span class=\"hljs-section\">[plugins.&quot;io.containerd.monitor.v1.cgroups&quot;]</span><br>    <span class=\"hljs-attr\">no_prometheus</span> = <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-section\">[plugins.&quot;io.containerd.service.v1.diff-service&quot;]</span><br>    <span class=\"hljs-attr\">default</span> = [<span class=\"hljs-string\">&quot;walking&quot;</span>]<br>  <span class=\"hljs-section\">[plugins.&quot;io.containerd.gc.v1.scheduler&quot;]</span><br>    <span class=\"hljs-attr\">pause_threshold</span> = <span class=\"hljs-number\">0.02</span><br>    <span class=\"hljs-attr\">deletion_threshold</span> = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-attr\">mutation_threshold</span> = <span class=\"hljs-number\">100</span><br>    <span class=\"hljs-attr\">schedule_delay</span> = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-attr\">startup_delay</span> = <span class=\"hljs-string\">&quot;100ms&quot;</span><br>  <span class=\"hljs-section\">[plugins.&quot;io.containerd.runtime.v2.task&quot;]</span><br>    <span class=\"hljs-attr\">platforms</span> = [<span class=\"hljs-string\">&quot;linux/amd64&quot;</span>]<br>    <span class=\"hljs-attr\">sched_core</span> = <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-section\">[plugins.&quot;io.containerd.service.v1.tasks-service&quot;]</span><br>    <span class=\"hljs-attr\">blockio_config_file</span> = <span class=\"hljs-string\">&quot;&quot;</span><br>    <span class=\"hljs-attr\">rdt_config_file</span> = <span class=\"hljs-string\">&quot;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Install-and-configure-prerequisites\"><a href=\"#Install-and-configure-prerequisites\" class=\"headerlink\" title=\"Install and configure prerequisites\"></a>Install and configure prerequisites</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## Forwarding IPv4 and letting iptables see bridged traffic</span><br><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class=\"hljs-string\">overlay</span><br><span class=\"hljs-string\">br_netfilter</span><br><span class=\"hljs-string\">EOF</span><br><br><span class=\"hljs-built_in\">sudo</span> modprobe overlay<br><span class=\"hljs-built_in\">sudo</span> modprobe br_netfilter<br><br><span class=\"hljs-comment\">## sysctl params required by setup, params persist across reboots</span><br><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class=\"hljs-string\">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class=\"hljs-string\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"hljs-string\">net.ipv4.ip_forward                 = 1</span><br><span class=\"hljs-string\">EOF</span><br><br><span class=\"hljs-comment\"># Apply sysctl params without reboot</span><br><span class=\"hljs-built_in\">sudo</span> sysctl --system<br><br><span class=\"hljs-comment\">## Verify that the br_netfilter, overlay modules are loaded by running the following commands:</span><br>lsmod | grep br_netfilter<br>lsmod | grep overlay<br><br><span class=\"hljs-comment\">## Verify that the net.bridge.bridge-nf-call-iptables, net.bridge.bridge-nf-call-ip6tables, and net.ipv4.ip_forward system variables are set to 1 in your sysctl config by running the following command:</span><br>sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Cgroup-drivers\"><a href=\"#Cgroup-drivers\" class=\"headerlink\" title=\"Cgroup drivers\"></a>Cgroup drivers</h2><ul>\n<li><p>cgroupfs</p>\n<ul>\n<li>The <code>cgroupfs</code> driver is <strong>not</strong> recommended when <a href=\"https://www.freedesktop.org/wiki/Software/systemd/\">systemd</a> is the init system because systemd expects a single cgroup manager on the system. Additionally, if you use <a href=\"https://kubernetes.io/docs/concepts/architecture/cgroups\">cgroup v2</a>, use the <code>systemd</code> cgroup driver instead of <code>cgroupfs</code>.</li>\n</ul>\n</li>\n<li><p>systemd</p>\n<ul>\n<li><p>To set <code>systemd</code> as the cgroup driver, edit the <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/\"><code>KubeletConfiguration</code></a> option of <code>cgroupDriver</code> and set it to <code>systemd</code>. For example:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">kubelet.config.k8s.io/v1beta1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">KubeletConfiguration</span><br><span class=\"hljs-string\">...</span><br><span class=\"hljs-attr\">cgroupDriver:</span> <span class=\"hljs-string\">systemd</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>Note: Starting with v1.22 and later, when creating a cluster with kubeadm, if the user does not set the cgroupDriver field under KubeletConfiguration, kubeadm defaults it to systemd</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Container-runtimes\"><a href=\"#Container-runtimes\" class=\"headerlink\" title=\"Container runtimes\"></a>Container runtimes</h2><blockquote>\n<p>In this step once you’ve created a valid <code>config.toml</code> configuration file.</p>\n<p>You can find this file under the path <code>/etc/containerd/config.toml</code>.</p>\n<p>On Linux the default CRI socket for containerd is <code>/run/containerd/containerd.sock</code>.</p>\n</blockquote>\n<h3 id=\"Configuring-the-systemd-cgroup-driver\"><a href=\"#Configuring-the-systemd-cgroup-driver\" class=\"headerlink\" title=\"Configuring the systemd cgroup driver\"></a>Configuring the systemd cgroup driver</h3><blockquote>\n<p>The <code>systemd</code> cgroup driver is recommended if you use <a href=\"https://kubernetes.io/docs/concepts/architecture/cgroups\">cgroup v2</a>.</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[plugins.<span class=\"hljs-string\">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc]<br>  ...<br>  [plugins.<span class=\"hljs-string\">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc.options]<br>    SystemdCgroup = <span class=\"hljs-literal\">true</span><br>    <br><span class=\"hljs-built_in\">sudo</span> sed -i <span class=\"hljs-string\">&quot;s#SystemdCgroup = false#SystemdCgroup = true#g&quot;</span> /etc/containerd/config.toml<br><span class=\"hljs-comment\">### If you apply this change, make sure to restart containerd:</span><br><span class=\"hljs-built_in\">sudo</span> systemctl restart containerd<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Overriding-the-sandbox-pause-image\"><a href=\"#Overriding-the-sandbox-pause-image\" class=\"headerlink\" title=\"Overriding the sandbox (pause) image\"></a>Overriding the sandbox (pause) image</h3><p>In your <a href=\"https://github.com/containerd/containerd/blob/main/docs/cri/config.md\">containerd config</a> you can overwrite the sandbox image by setting the following config:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span><br>  <span class=\"hljs-attr\">sandbox_image</span> = <span class=\"hljs-string\">&quot;registry.k8s.io/pause:3.2&quot;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[plugins.<span class=\"hljs-string\">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors]<br><span class=\"hljs-comment\">### add following config in China   [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;k8s.gcr.io&quot;]</span><br>      endpoint = [<span class=\"hljs-string\">&quot;registry.cn-hangzhou.aliyuncs.com/google_containers&quot;</span>]<br><br><span class=\"hljs-comment\">### This is important if you live in China.</span><br><span class=\"hljs-built_in\">sudo</span> sed -i <span class=\"hljs-string\">&quot;s#registry.k8s.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g&quot;</span> /etc/containerd/config.toml<br><span class=\"hljs-built_in\">sudo</span> systemctl restart containerd<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.22.3<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.22.3<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.22.3<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.22.3<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.0-0<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4<br><br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.22.3 k8s.gcr.io/kube-apiserver:v1.22.3<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.22.3 k8s.gcr.io/kube-controller-manager:v1.22.3<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.22.3 k8s.gcr.io/kube-scheduler:v1.22.3<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.22.3 k8s.gcr.io/kube-proxy:v1.22.3<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5 k8s.gcr.io/pause:3.5<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.0-0 k8s.gcr.io/etcd:3.5.0-0<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4 k8s.gcr.io/coredns/coredns:v1.8.4<br></code></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"Prepare-Environment\"><a href=\"#Prepare-Environment\" class=\"headerlink\" title=\"Prepare Environment\"></a>Prepare Environment</h1><h2 id=\"Containerd-Install\"><a href=\"#Containerd-Install\" class=\"headerlink\" title=\"Containerd Install\"></a>Containerd Install</h2><blockquote>\n<p>Container Runtimes</p>\n<p>Kubernetes 1.29 requires that you use a runtime that conforms with the <a href=\"https://kubernetes.io/docs/concepts/overview/components/#container-runtime\">Container Runtime Interface</a> (CRI).</p>\n</blockquote>\n<h3 id=\"1-Installing-containerd\"><a href=\"#1-Installing-containerd\" class=\"headerlink\" title=\"1. Installing containerd\"></a>1. Installing containerd</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">wget https://github.com/containerd/containerd/releases/download/v1.7.11/containerd-1.7.11-linux-amd64.tar.gz<br><br>tar -xvf containerd-1.6.26-linux-amd64.tar.gz -C /usr/local/<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://github.com/containerd/containerd/blob/main/containerd.service\">https://github.com/containerd/containerd/blob/main/containerd.service</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> &gt;&gt; /etc/systemd/system/containerd.service &lt;&lt; <span class=\"hljs-string\">&#x27;EOF&#x27;</span><br><span class=\"hljs-comment\"># Copyright The containerd Authors.</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class=\"hljs-comment\"># you may not use this file except in compliance with the License.</span><br><span class=\"hljs-comment\"># You may obtain a copy of the License at</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># Unless required by applicable law or agreed to in writing, software</span><br><span class=\"hljs-comment\"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"hljs-comment\"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"hljs-comment\"># See the License for the specific language governing permissions and</span><br><span class=\"hljs-comment\"># limitations under the License.</span><br><br>[Unit]<br>Description=containerd container runtime<br>Documentation=https://containerd.io<br>After=network.target local-fs.target<br><br>[Service]<br>ExecStartPre=-/sbin/modprobe overlay<br>ExecStart=/usr/local/bin/containerd<br><br>Type=notify<br>Delegate=<span class=\"hljs-built_in\">yes</span><br>KillMode=process<br>Restart=always<br>RestartSec=5<br><br><span class=\"hljs-comment\"># Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class=\"hljs-comment\"># in the kernel. We recommend using cgroups to do container-local accounting.</span><br>LimitNPROC=infinity<br>LimitCORE=infinity<br><br><span class=\"hljs-comment\"># Comment TasksMax if your systemd version does not supports it.</span><br><span class=\"hljs-comment\"># Only systemd 226 and above support this version.</span><br>TasksMax=infinity<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><br>systemctl daemon-reload<br>systemctl <span class=\"hljs-built_in\">enable</span> --now containerd<br>systemctl status containerd<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-Installing-runc\"><a href=\"#2-Installing-runc\" class=\"headerlink\" title=\"2. Installing runc\"></a>2. Installing runc</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">wget https://github.com/opencontainers/runc/releases/download/v1.1.11/runc.amd64<br><br>install -m 755 runc.amd64 /usr/local/sbin/runc<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-Installing-CNI-plugins\"><a href=\"#3-Installing-CNI-plugins\" class=\"headerlink\" title=\"3. Installing CNI plugins\"></a>3. Installing CNI plugins</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">wget https://github.com/containernetworking/plugins/releases/download/v1.4.0/cni-plugins-linux-amd64-v1.4.0.tgz<br><br><span class=\"hljs-built_in\">mkdir</span> -p /opt/cni/bin<br>tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.1.1.tgz<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Default-config\"><a href=\"#Default-config\" class=\"headerlink\" title=\"Default config\"></a>Default config</h3><blockquote>\n<p>containerd uses a configuration file located in <code>/etc/containerd/config.toml</code> for specifying daemon level options. A sample configuration file can be found <a href=\"https://github.com/containerd/containerd/blob/main/docs/man/containerd-config.toml.5.md\">here</a>.</p>\n<p>The default configuration can be generated via <code>containerd config default &gt; /etc/containerd/config.toml</code>.</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">version</span> = <span class=\"hljs-number\">2</span><br><br><span class=\"hljs-attr\">root</span> = <span class=\"hljs-string\">&quot;/var/lib/containerd&quot;</span><br><span class=\"hljs-attr\">state</span> = <span class=\"hljs-string\">&quot;/run/containerd&quot;</span><br><span class=\"hljs-attr\">oom_score</span> = <span class=\"hljs-number\">0</span><br><span class=\"hljs-attr\">imports</span> = [<span class=\"hljs-string\">&quot;/etc/containerd/runtime_*.toml&quot;</span>, <span class=\"hljs-string\">&quot;./debug.toml&quot;</span>]<br><br><span class=\"hljs-section\">[grpc]</span><br>  <span class=\"hljs-attr\">address</span> = <span class=\"hljs-string\">&quot;/run/containerd/containerd.sock&quot;</span><br>  <span class=\"hljs-attr\">uid</span> = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">gid</span> = <span class=\"hljs-number\">0</span><br><br><span class=\"hljs-section\">[debug]</span><br>  <span class=\"hljs-attr\">address</span> = <span class=\"hljs-string\">&quot;/run/containerd/debug.sock&quot;</span><br>  <span class=\"hljs-attr\">uid</span> = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">gid</span> = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">level</span> = <span class=\"hljs-string\">&quot;info&quot;</span><br><br><span class=\"hljs-section\">[metrics]</span><br>  <span class=\"hljs-attr\">address</span> = <span class=\"hljs-string\">&quot;&quot;</span><br>  <span class=\"hljs-attr\">grpc_histogram</span> = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-section\">[cgroup]</span><br>  <span class=\"hljs-attr\">path</span> = <span class=\"hljs-string\">&quot;&quot;</span><br><br><span class=\"hljs-section\">[plugins]</span><br>  <span class=\"hljs-section\">[plugins.&quot;io.containerd.monitor.v1.cgroups&quot;]</span><br>    <span class=\"hljs-attr\">no_prometheus</span> = <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-section\">[plugins.&quot;io.containerd.service.v1.diff-service&quot;]</span><br>    <span class=\"hljs-attr\">default</span> = [<span class=\"hljs-string\">&quot;walking&quot;</span>]<br>  <span class=\"hljs-section\">[plugins.&quot;io.containerd.gc.v1.scheduler&quot;]</span><br>    <span class=\"hljs-attr\">pause_threshold</span> = <span class=\"hljs-number\">0.02</span><br>    <span class=\"hljs-attr\">deletion_threshold</span> = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-attr\">mutation_threshold</span> = <span class=\"hljs-number\">100</span><br>    <span class=\"hljs-attr\">schedule_delay</span> = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-attr\">startup_delay</span> = <span class=\"hljs-string\">&quot;100ms&quot;</span><br>  <span class=\"hljs-section\">[plugins.&quot;io.containerd.runtime.v2.task&quot;]</span><br>    <span class=\"hljs-attr\">platforms</span> = [<span class=\"hljs-string\">&quot;linux/amd64&quot;</span>]<br>    <span class=\"hljs-attr\">sched_core</span> = <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-section\">[plugins.&quot;io.containerd.service.v1.tasks-service&quot;]</span><br>    <span class=\"hljs-attr\">blockio_config_file</span> = <span class=\"hljs-string\">&quot;&quot;</span><br>    <span class=\"hljs-attr\">rdt_config_file</span> = <span class=\"hljs-string\">&quot;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Install-and-configure-prerequisites\"><a href=\"#Install-and-configure-prerequisites\" class=\"headerlink\" title=\"Install and configure prerequisites\"></a>Install and configure prerequisites</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## Forwarding IPv4 and letting iptables see bridged traffic</span><br><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class=\"hljs-string\">overlay</span><br><span class=\"hljs-string\">br_netfilter</span><br><span class=\"hljs-string\">EOF</span><br><br><span class=\"hljs-built_in\">sudo</span> modprobe overlay<br><span class=\"hljs-built_in\">sudo</span> modprobe br_netfilter<br><br><span class=\"hljs-comment\">## sysctl params required by setup, params persist across reboots</span><br><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class=\"hljs-string\">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class=\"hljs-string\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"hljs-string\">net.ipv4.ip_forward                 = 1</span><br><span class=\"hljs-string\">EOF</span><br><br><span class=\"hljs-comment\"># Apply sysctl params without reboot</span><br><span class=\"hljs-built_in\">sudo</span> sysctl --system<br><br><span class=\"hljs-comment\">## Verify that the br_netfilter, overlay modules are loaded by running the following commands:</span><br>lsmod | grep br_netfilter<br>lsmod | grep overlay<br><br><span class=\"hljs-comment\">## Verify that the net.bridge.bridge-nf-call-iptables, net.bridge.bridge-nf-call-ip6tables, and net.ipv4.ip_forward system variables are set to 1 in your sysctl config by running the following command:</span><br>sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Cgroup-drivers\"><a href=\"#Cgroup-drivers\" class=\"headerlink\" title=\"Cgroup drivers\"></a>Cgroup drivers</h2><ul>\n<li><p>cgroupfs</p>\n<ul>\n<li>The <code>cgroupfs</code> driver is <strong>not</strong> recommended when <a href=\"https://www.freedesktop.org/wiki/Software/systemd/\">systemd</a> is the init system because systemd expects a single cgroup manager on the system. Additionally, if you use <a href=\"https://kubernetes.io/docs/concepts/architecture/cgroups\">cgroup v2</a>, use the <code>systemd</code> cgroup driver instead of <code>cgroupfs</code>.</li>\n</ul>\n</li>\n<li><p>systemd</p>\n<ul>\n<li><p>To set <code>systemd</code> as the cgroup driver, edit the <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/\"><code>KubeletConfiguration</code></a> option of <code>cgroupDriver</code> and set it to <code>systemd</code>. For example:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">kubelet.config.k8s.io/v1beta1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">KubeletConfiguration</span><br><span class=\"hljs-string\">...</span><br><span class=\"hljs-attr\">cgroupDriver:</span> <span class=\"hljs-string\">systemd</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>Note: Starting with v1.22 and later, when creating a cluster with kubeadm, if the user does not set the cgroupDriver field under KubeletConfiguration, kubeadm defaults it to systemd</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Container-runtimes\"><a href=\"#Container-runtimes\" class=\"headerlink\" title=\"Container runtimes\"></a>Container runtimes</h2><blockquote>\n<p>In this step once you’ve created a valid <code>config.toml</code> configuration file.</p>\n<p>You can find this file under the path <code>/etc/containerd/config.toml</code>.</p>\n<p>On Linux the default CRI socket for containerd is <code>/run/containerd/containerd.sock</code>.</p>\n</blockquote>\n<h3 id=\"Configuring-the-systemd-cgroup-driver\"><a href=\"#Configuring-the-systemd-cgroup-driver\" class=\"headerlink\" title=\"Configuring the systemd cgroup driver\"></a>Configuring the systemd cgroup driver</h3><blockquote>\n<p>The <code>systemd</code> cgroup driver is recommended if you use <a href=\"https://kubernetes.io/docs/concepts/architecture/cgroups\">cgroup v2</a>.</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[plugins.<span class=\"hljs-string\">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc]<br>  ...<br>  [plugins.<span class=\"hljs-string\">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc.options]<br>    SystemdCgroup = <span class=\"hljs-literal\">true</span><br>    <br><span class=\"hljs-built_in\">sudo</span> sed -i <span class=\"hljs-string\">&quot;s#SystemdCgroup = false#SystemdCgroup = true#g&quot;</span> /etc/containerd/config.toml<br><span class=\"hljs-comment\">### If you apply this change, make sure to restart containerd:</span><br><span class=\"hljs-built_in\">sudo</span> systemctl restart containerd<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Overriding-the-sandbox-pause-image\"><a href=\"#Overriding-the-sandbox-pause-image\" class=\"headerlink\" title=\"Overriding the sandbox (pause) image\"></a>Overriding the sandbox (pause) image</h3><p>In your <a href=\"https://github.com/containerd/containerd/blob/main/docs/cri/config.md\">containerd config</a> you can overwrite the sandbox image by setting the following config:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span><br>  <span class=\"hljs-attr\">sandbox_image</span> = <span class=\"hljs-string\">&quot;registry.k8s.io/pause:3.2&quot;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[plugins.<span class=\"hljs-string\">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors]<br><span class=\"hljs-comment\">### add following config in China   [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;k8s.gcr.io&quot;]</span><br>      endpoint = [<span class=\"hljs-string\">&quot;registry.cn-hangzhou.aliyuncs.com/google_containers&quot;</span>]<br><br><span class=\"hljs-comment\">### This is important if you live in China.</span><br><span class=\"hljs-built_in\">sudo</span> sed -i <span class=\"hljs-string\">&quot;s#registry.k8s.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g&quot;</span> /etc/containerd/config.toml<br><span class=\"hljs-built_in\">sudo</span> systemctl restart containerd<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.22.3<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.22.3<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.22.3<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.22.3<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.0-0<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4<br><br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.22.3 k8s.gcr.io/kube-apiserver:v1.22.3<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.22.3 k8s.gcr.io/kube-controller-manager:v1.22.3<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.22.3 k8s.gcr.io/kube-scheduler:v1.22.3<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.22.3 k8s.gcr.io/kube-proxy:v1.22.3<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5 k8s.gcr.io/pause:3.5<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.0-0 k8s.gcr.io/etcd:3.5.0-0<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4 k8s.gcr.io/coredns/coredns:v1.8.4<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Ansible ad-hoc简介","date":"2024-07-12T07:59:04.000Z","_content":"# Ansible Ad-Hoc\nAd-Hoc形式应用场景主要在临时执行一些操作时会用到，更注重解决一些简单或临时任务，复杂操作会使用playbook来实现。\n比如想临时传一个文件到被控机上就可以使用ad-hoc形式来完成。\n```bash\nansible all -m copy -a \"src=/root/monitor.sh dest=/root/ backup=yes\"\n```\n## 常用选项\n```bash\n# -v 可使用-vvv输出更详细内容\n# -i 指定inventory\n# -f 指定并发线程数\n# --private-key 指定密钥文件\n# -m 指定执行模块\n# -M 指定模块存放路径\n# -a 模块参数，默认command模块\n# -t 输出信息到指定目录，文件以主机名命名\n# -T 指定最大超时时间\n# -B 后台执行命令，超过指定时间后中止执行的任务\n# -P 定期以指定时间间隔返回后台任务进度\n# --list-hosts 列出符合条件的主机，不执行任何命令\nansible -i hosts all -f 20 -B 10 -P 2 -T 1 -m shell -a \"df -h\" -vvv\nansible all --list-hosts\n```\nsuccess 表示命令执行成功，changed 是否对主机做出变更\n> 建议并发数配置为CPU核数偶数倍就行。如4C 8G的机器，最多并发20个线程\n## ansible-doc\n如果不知道有哪些模块以及模块有哪些参数可用，就可使用此命令查看\n```bash\nansible-doc -l\nansible-doc -s shell\n```\n- `-l` 选项列出所有可用模块\n- `-s` 只显示playbook说明的代码段\n## 指定主机执行任务\n```bash\n# --limit \nansible all -m shell -a \"ls -l\" --limit \"192.168.3.27\"\n# 指定IP\nansible 192.168.3.27 -m shell -a \"ls -l\"\n# : 分隔符指定多台机器做变更，但\"\"必须使用\nansible \"192.168.3.27:192.168.33.22\" -m shell -a \"ls -l\"\n# * 通配符匹配多台机器\nansible 192.168.3.* -m shell -a \"ls -l\"\n```\n\n","source":"_posts/ansible-ad-hoc.md","raw":"---\ntitle: Ansible ad-hoc简介\ndate: 2024-07-12 15:59:04\ntags: ansible\n---\n# Ansible Ad-Hoc\nAd-Hoc形式应用场景主要在临时执行一些操作时会用到，更注重解决一些简单或临时任务，复杂操作会使用playbook来实现。\n比如想临时传一个文件到被控机上就可以使用ad-hoc形式来完成。\n```bash\nansible all -m copy -a \"src=/root/monitor.sh dest=/root/ backup=yes\"\n```\n## 常用选项\n```bash\n# -v 可使用-vvv输出更详细内容\n# -i 指定inventory\n# -f 指定并发线程数\n# --private-key 指定密钥文件\n# -m 指定执行模块\n# -M 指定模块存放路径\n# -a 模块参数，默认command模块\n# -t 输出信息到指定目录，文件以主机名命名\n# -T 指定最大超时时间\n# -B 后台执行命令，超过指定时间后中止执行的任务\n# -P 定期以指定时间间隔返回后台任务进度\n# --list-hosts 列出符合条件的主机，不执行任何命令\nansible -i hosts all -f 20 -B 10 -P 2 -T 1 -m shell -a \"df -h\" -vvv\nansible all --list-hosts\n```\nsuccess 表示命令执行成功，changed 是否对主机做出变更\n> 建议并发数配置为CPU核数偶数倍就行。如4C 8G的机器，最多并发20个线程\n## ansible-doc\n如果不知道有哪些模块以及模块有哪些参数可用，就可使用此命令查看\n```bash\nansible-doc -l\nansible-doc -s shell\n```\n- `-l` 选项列出所有可用模块\n- `-s` 只显示playbook说明的代码段\n## 指定主机执行任务\n```bash\n# --limit \nansible all -m shell -a \"ls -l\" --limit \"192.168.3.27\"\n# 指定IP\nansible 192.168.3.27 -m shell -a \"ls -l\"\n# : 分隔符指定多台机器做变更，但\"\"必须使用\nansible \"192.168.3.27:192.168.33.22\" -m shell -a \"ls -l\"\n# * 通配符匹配多台机器\nansible 192.168.3.* -m shell -a \"ls -l\"\n```\n\n","slug":"ansible-ad-hoc","published":1,"updated":"2024-07-12T08:45:24.000Z","comments":1,"layout":"post","photos":[],"_id":"clzfp1521000l89iqdx9634q3","content":"<h1 id=\"Ansible-Ad-Hoc\"><a href=\"#Ansible-Ad-Hoc\" class=\"headerlink\" title=\"Ansible Ad-Hoc\"></a>Ansible Ad-Hoc</h1><p>Ad-Hoc形式应用场景主要在临时执行一些操作时会用到，更注重解决一些简单或临时任务，复杂操作会使用playbook来实现。<br>比如想临时传一个文件到被控机上就可以使用ad-hoc形式来完成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ansible all -m copy -a <span class=\"hljs-string\">&quot;src=/root/monitor.sh dest=/root/ backup=yes&quot;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"常用选项\"><a href=\"#常用选项\" class=\"headerlink\" title=\"常用选项\"></a>常用选项</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># -v 可使用-vvv输出更详细内容</span><br><span class=\"hljs-comment\"># -i 指定inventory</span><br><span class=\"hljs-comment\"># -f 指定并发线程数</span><br><span class=\"hljs-comment\"># --private-key 指定密钥文件</span><br><span class=\"hljs-comment\"># -m 指定执行模块</span><br><span class=\"hljs-comment\"># -M 指定模块存放路径</span><br><span class=\"hljs-comment\"># -a 模块参数，默认command模块</span><br><span class=\"hljs-comment\"># -t 输出信息到指定目录，文件以主机名命名</span><br><span class=\"hljs-comment\"># -T 指定最大超时时间</span><br><span class=\"hljs-comment\"># -B 后台执行命令，超过指定时间后中止执行的任务</span><br><span class=\"hljs-comment\"># -P 定期以指定时间间隔返回后台任务进度</span><br><span class=\"hljs-comment\"># --list-hosts 列出符合条件的主机，不执行任何命令</span><br>ansible -i hosts all -f 20 -B 10 -P 2 -T 1 -m shell -a <span class=\"hljs-string\">&quot;df -h&quot;</span> -vvv<br>ansible all --list-hosts<br></code></pre></td></tr></table></figure>\n<p>success 表示命令执行成功，changed 是否对主机做出变更</p>\n<blockquote>\n<p>建议并发数配置为CPU核数偶数倍就行。如4C 8G的机器，最多并发20个线程</p>\n</blockquote>\n<h2 id=\"ansible-doc\"><a href=\"#ansible-doc\" class=\"headerlink\" title=\"ansible-doc\"></a>ansible-doc</h2><p>如果不知道有哪些模块以及模块有哪些参数可用，就可使用此命令查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ansible-doc -l<br>ansible-doc -s shell<br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>-l</code> 选项列出所有可用模块</li>\n<li><code>-s</code> 只显示playbook说明的代码段</li>\n</ul>\n<h2 id=\"指定主机执行任务\"><a href=\"#指定主机执行任务\" class=\"headerlink\" title=\"指定主机执行任务\"></a>指定主机执行任务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># --limit </span><br>ansible all -m shell -a <span class=\"hljs-string\">&quot;ls -l&quot;</span> --<span class=\"hljs-built_in\">limit</span> <span class=\"hljs-string\">&quot;192.168.3.27&quot;</span><br><span class=\"hljs-comment\"># 指定IP</span><br>ansible 192.168.3.27 -m shell -a <span class=\"hljs-string\">&quot;ls -l&quot;</span><br><span class=\"hljs-comment\"># : 分隔符指定多台机器做变更，但&quot;&quot;必须使用</span><br>ansible <span class=\"hljs-string\">&quot;192.168.3.27:192.168.33.22&quot;</span> -m shell -a <span class=\"hljs-string\">&quot;ls -l&quot;</span><br><span class=\"hljs-comment\"># * 通配符匹配多台机器</span><br>ansible 192.168.3.* -m shell -a <span class=\"hljs-string\">&quot;ls -l&quot;</span><br></code></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"Ansible-Ad-Hoc\"><a href=\"#Ansible-Ad-Hoc\" class=\"headerlink\" title=\"Ansible Ad-Hoc\"></a>Ansible Ad-Hoc</h1><p>Ad-Hoc形式应用场景主要在临时执行一些操作时会用到，更注重解决一些简单或临时任务，复杂操作会使用playbook来实现。<br>比如想临时传一个文件到被控机上就可以使用ad-hoc形式来完成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ansible all -m copy -a <span class=\"hljs-string\">&quot;src=/root/monitor.sh dest=/root/ backup=yes&quot;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"常用选项\"><a href=\"#常用选项\" class=\"headerlink\" title=\"常用选项\"></a>常用选项</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># -v 可使用-vvv输出更详细内容</span><br><span class=\"hljs-comment\"># -i 指定inventory</span><br><span class=\"hljs-comment\"># -f 指定并发线程数</span><br><span class=\"hljs-comment\"># --private-key 指定密钥文件</span><br><span class=\"hljs-comment\"># -m 指定执行模块</span><br><span class=\"hljs-comment\"># -M 指定模块存放路径</span><br><span class=\"hljs-comment\"># -a 模块参数，默认command模块</span><br><span class=\"hljs-comment\"># -t 输出信息到指定目录，文件以主机名命名</span><br><span class=\"hljs-comment\"># -T 指定最大超时时间</span><br><span class=\"hljs-comment\"># -B 后台执行命令，超过指定时间后中止执行的任务</span><br><span class=\"hljs-comment\"># -P 定期以指定时间间隔返回后台任务进度</span><br><span class=\"hljs-comment\"># --list-hosts 列出符合条件的主机，不执行任何命令</span><br>ansible -i hosts all -f 20 -B 10 -P 2 -T 1 -m shell -a <span class=\"hljs-string\">&quot;df -h&quot;</span> -vvv<br>ansible all --list-hosts<br></code></pre></td></tr></table></figure>\n<p>success 表示命令执行成功，changed 是否对主机做出变更</p>\n<blockquote>\n<p>建议并发数配置为CPU核数偶数倍就行。如4C 8G的机器，最多并发20个线程</p>\n</blockquote>\n<h2 id=\"ansible-doc\"><a href=\"#ansible-doc\" class=\"headerlink\" title=\"ansible-doc\"></a>ansible-doc</h2><p>如果不知道有哪些模块以及模块有哪些参数可用，就可使用此命令查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ansible-doc -l<br>ansible-doc -s shell<br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>-l</code> 选项列出所有可用模块</li>\n<li><code>-s</code> 只显示playbook说明的代码段</li>\n</ul>\n<h2 id=\"指定主机执行任务\"><a href=\"#指定主机执行任务\" class=\"headerlink\" title=\"指定主机执行任务\"></a>指定主机执行任务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># --limit </span><br>ansible all -m shell -a <span class=\"hljs-string\">&quot;ls -l&quot;</span> --<span class=\"hljs-built_in\">limit</span> <span class=\"hljs-string\">&quot;192.168.3.27&quot;</span><br><span class=\"hljs-comment\"># 指定IP</span><br>ansible 192.168.3.27 -m shell -a <span class=\"hljs-string\">&quot;ls -l&quot;</span><br><span class=\"hljs-comment\"># : 分隔符指定多台机器做变更，但&quot;&quot;必须使用</span><br>ansible <span class=\"hljs-string\">&quot;192.168.3.27:192.168.33.22&quot;</span> -m shell -a <span class=\"hljs-string\">&quot;ls -l&quot;</span><br><span class=\"hljs-comment\"># * 通配符匹配多台机器</span><br>ansible 192.168.3.* -m shell -a <span class=\"hljs-string\">&quot;ls -l&quot;</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"Multipass基本用法及常见问题","date":"2024-07-08T03:02:11.000Z","_content":"这是一份Multipass基本操作文档，以及包含一些常见问题的解决方法。\n\nMultipass 是一个轻量级的虚拟机管理工具，旨在简化在本地环境中创建和管理 Ubuntu 虚拟机。\n\n参考资料\n\n- [Multipass 官网](https://multipass.run/)\n- [Multipass 文档](https://multipass.run/docs)\n\n# 安装Multipass\n\n1. **在 Linux 上安装**:\n\n   ```bash\n   sudo snap install multipass\n   ```\n\n2. **在 macOS 上安装**:\n   使用 Homebrew:\n\n   ```bash\n   brew install --cask multipass\n   ```\n\n3. **在 Windows 上安装**:\n   访问 [Multipass 官网](https://multipass.run/) 下载适用于 Windows 的安装程序，并按照提示完成安装。\n\n## 基本命令\n\n1. **启动一个新的虚拟机**:\n\n   ```bash\n   multipass launch --name <instance-name>\n   ```\n\n   例如:\n\n   ```bash\n   multipass launch --name my-vm\n   ```\n\n2. **列出所有虚拟机**:\n\n   ```bash\n   multipass list\n   ```\n\n3. **进入虚拟机**:\n\n   ```bash\n   multipass shell <instance-name>\n   ```\n\n   例如:\n\n   ```bash\n   multipass shell my-vm\n   ```\n\n4. **停止虚拟机**:\n\n   ```bash\n   multipass stop <instance-name>\n   ```\n\n   例如:\n\n   ```bash\n   multipass stop my-vm\n   ```\n\n5. **删除虚拟机**:\n\n   ```bash\n   multipass delete <instance-name>\n   ```\n\n   例如:\n\n   ```bash\n   multipass delete my-vm\n   ```\n\n6. **清理已删除的虚拟机**:\n\n   ```bash\n   multipass purge\n   ```\n\n## 进阶用法\n\n1. **指定 Ubuntu 版本**:\n\n   ```bash\n   multipass launch --name <instance-name> <ubuntu-version>\n   ```\n\n   例如，启动一个 Ubuntu 20.04 的虚拟机:\n\n   ```bash\n   multipass launch --name my-vm 20.04\n   ```\n\n2. **分配更多资源（CPU、内存、磁盘）**:\n\n   ```bash\n   multipass launch --name <instance-name> --cpus <number> --mem <size> --disk <size>\n   ```\n\n   例如，分配 2 个 CPU，4GB 内存，20GB 磁盘:\n\n   ```bash\n   multipass launch --name my-vm --cpus 2 --mem 4G --disk 20G\n   ```\n\n3. **共享文件夹**:\n\n   ```bash\n   multipass mount <host-directory> <instance-name>:<target-directory>\n   ```\n\n   例如，将本地目录 `/home/user/projects` 挂载到虚拟机的 `/home/ubuntu/projects`:\n\n   ```bash\n   multipass mount /home/user/projects my-vm:/home/ubuntu/projects\n   ```\n\n4. **运行命令**:\n   可以在虚拟机中运行命令而不进入虚拟机：\n\n   ```bash\n   multipass exec <instance-name> -- <command>\n   ```\n\n   例如，更新虚拟机中的包列表:\n\n   ```bash\n   multipass exec my-vm -- sudo apt update\n   ```\n\n# 启动前配置\n\n```bash\n## 开启mount挂载，方便拿或传文件到服务器，默认false\nmultipass set local.privileged-mounts=true\n## 选择虚拟机驱动，hyperv/virtualbox\n## win专业版可用hyperv，家庭版只能virtualbox\nmultipass set local.driver=hyperv\n## 设置默认操作实例\nmultipass get client.primary-name=primary\n```\n\n# 启动实例\n\n```bash\nmultipass launch -n $name -d 10G -m 2G -c 2 --bridged --mount <local-path>:<instance-path>\n```\n\n> 如果启动不了可以尝试重启multipass\n\n# 调整实例配置\n\n```bash\nmultipass stop handsome-ling\nmultipass set local.handsome-ling.cpus=4\nmultipass set local.handsome-ling.disk=60G\nmultipass set local.handsome-ling.memory=7G\n```\n\n# 删除\n\n```bash\n## 删除并清除\n## delete 相当于把实例转为删除状态 \n## -p or --purge 删除并清除\nmultipass delete $instance -p\n## purge\nmultipass purge $instance\n```\n\n# IPv4 N/A\n\n- 重启实例\n\n  ```bash\n  multipass restart $instance\n  ```\n\n- 停止后再启动实例\n\n  ```bash\n  multipass stop $instance\n  multipass start $instance\n  ```\n\n- 重启multipass服务\n\n  - 可直接杀进程\n\n  ```powershell\n  taskkill /f /pid $pid\n  ```\n\n- 状态suspending ，尝试suspend实例\n\n  ```bash\n  multipass suspend $instance\n  ```\n\n- 状态suspended， shell连接即可\n\n  ```bash\n  multipass shell $instance\n  ```\n\n  \n","source":"_posts/multipass.md","raw":"---\ntitle: Multipass基本用法及常见问题\ndate: 2024-07-08 11:02:11\ntags: tools\n---\n这是一份Multipass基本操作文档，以及包含一些常见问题的解决方法。\n\nMultipass 是一个轻量级的虚拟机管理工具，旨在简化在本地环境中创建和管理 Ubuntu 虚拟机。\n\n参考资料\n\n- [Multipass 官网](https://multipass.run/)\n- [Multipass 文档](https://multipass.run/docs)\n\n# 安装Multipass\n\n1. **在 Linux 上安装**:\n\n   ```bash\n   sudo snap install multipass\n   ```\n\n2. **在 macOS 上安装**:\n   使用 Homebrew:\n\n   ```bash\n   brew install --cask multipass\n   ```\n\n3. **在 Windows 上安装**:\n   访问 [Multipass 官网](https://multipass.run/) 下载适用于 Windows 的安装程序，并按照提示完成安装。\n\n## 基本命令\n\n1. **启动一个新的虚拟机**:\n\n   ```bash\n   multipass launch --name <instance-name>\n   ```\n\n   例如:\n\n   ```bash\n   multipass launch --name my-vm\n   ```\n\n2. **列出所有虚拟机**:\n\n   ```bash\n   multipass list\n   ```\n\n3. **进入虚拟机**:\n\n   ```bash\n   multipass shell <instance-name>\n   ```\n\n   例如:\n\n   ```bash\n   multipass shell my-vm\n   ```\n\n4. **停止虚拟机**:\n\n   ```bash\n   multipass stop <instance-name>\n   ```\n\n   例如:\n\n   ```bash\n   multipass stop my-vm\n   ```\n\n5. **删除虚拟机**:\n\n   ```bash\n   multipass delete <instance-name>\n   ```\n\n   例如:\n\n   ```bash\n   multipass delete my-vm\n   ```\n\n6. **清理已删除的虚拟机**:\n\n   ```bash\n   multipass purge\n   ```\n\n## 进阶用法\n\n1. **指定 Ubuntu 版本**:\n\n   ```bash\n   multipass launch --name <instance-name> <ubuntu-version>\n   ```\n\n   例如，启动一个 Ubuntu 20.04 的虚拟机:\n\n   ```bash\n   multipass launch --name my-vm 20.04\n   ```\n\n2. **分配更多资源（CPU、内存、磁盘）**:\n\n   ```bash\n   multipass launch --name <instance-name> --cpus <number> --mem <size> --disk <size>\n   ```\n\n   例如，分配 2 个 CPU，4GB 内存，20GB 磁盘:\n\n   ```bash\n   multipass launch --name my-vm --cpus 2 --mem 4G --disk 20G\n   ```\n\n3. **共享文件夹**:\n\n   ```bash\n   multipass mount <host-directory> <instance-name>:<target-directory>\n   ```\n\n   例如，将本地目录 `/home/user/projects` 挂载到虚拟机的 `/home/ubuntu/projects`:\n\n   ```bash\n   multipass mount /home/user/projects my-vm:/home/ubuntu/projects\n   ```\n\n4. **运行命令**:\n   可以在虚拟机中运行命令而不进入虚拟机：\n\n   ```bash\n   multipass exec <instance-name> -- <command>\n   ```\n\n   例如，更新虚拟机中的包列表:\n\n   ```bash\n   multipass exec my-vm -- sudo apt update\n   ```\n\n# 启动前配置\n\n```bash\n## 开启mount挂载，方便拿或传文件到服务器，默认false\nmultipass set local.privileged-mounts=true\n## 选择虚拟机驱动，hyperv/virtualbox\n## win专业版可用hyperv，家庭版只能virtualbox\nmultipass set local.driver=hyperv\n## 设置默认操作实例\nmultipass get client.primary-name=primary\n```\n\n# 启动实例\n\n```bash\nmultipass launch -n $name -d 10G -m 2G -c 2 --bridged --mount <local-path>:<instance-path>\n```\n\n> 如果启动不了可以尝试重启multipass\n\n# 调整实例配置\n\n```bash\nmultipass stop handsome-ling\nmultipass set local.handsome-ling.cpus=4\nmultipass set local.handsome-ling.disk=60G\nmultipass set local.handsome-ling.memory=7G\n```\n\n# 删除\n\n```bash\n## 删除并清除\n## delete 相当于把实例转为删除状态 \n## -p or --purge 删除并清除\nmultipass delete $instance -p\n## purge\nmultipass purge $instance\n```\n\n# IPv4 N/A\n\n- 重启实例\n\n  ```bash\n  multipass restart $instance\n  ```\n\n- 停止后再启动实例\n\n  ```bash\n  multipass stop $instance\n  multipass start $instance\n  ```\n\n- 重启multipass服务\n\n  - 可直接杀进程\n\n  ```powershell\n  taskkill /f /pid $pid\n  ```\n\n- 状态suspending ，尝试suspend实例\n\n  ```bash\n  multipass suspend $instance\n  ```\n\n- 状态suspended， shell连接即可\n\n  ```bash\n  multipass shell $instance\n  ```\n\n  \n","slug":"multipass","published":1,"updated":"2024-07-08T05:24:36.000Z","comments":1,"layout":"post","photos":[],"_id":"clzfp152c000m89iq50f65vez","content":"<p>这是一份Multipass基本操作文档，以及包含一些常见问题的解决方法。</p>\n<p>Multipass 是一个轻量级的虚拟机管理工具，旨在简化在本地环境中创建和管理 Ubuntu 虚拟机。</p>\n<p>参考资料</p>\n<ul>\n<li><a href=\"https://multipass.run/\">Multipass 官网</a></li>\n<li><a href=\"https://multipass.run/docs\">Multipass 文档</a></li>\n</ul>\n<h1 id=\"安装Multipass\"><a href=\"#安装Multipass\" class=\"headerlink\" title=\"安装Multipass\"></a>安装Multipass</h1><ol>\n<li><p><strong>在 Linux 上安装</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> snap install multipass<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在 macOS 上安装</strong>:<br>使用 Homebrew:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">brew install --cask multipass<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在 Windows 上安装</strong>:<br>访问 <a href=\"https://multipass.run/\">Multipass 官网</a> 下载适用于 Windows 的安装程序，并按照提示完成安装。</p>\n</li>\n</ol>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><ol>\n<li><p><strong>启动一个新的虚拟机</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass launch --name &lt;instance-name&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass launch --name my-vm<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>列出所有虚拟机</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass list<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>进入虚拟机</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass shell &lt;instance-name&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass shell my-vm<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>停止虚拟机</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass stop &lt;instance-name&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass stop my-vm<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>删除虚拟机</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass delete &lt;instance-name&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass delete my-vm<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>清理已删除的虚拟机</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass purge<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"进阶用法\"><a href=\"#进阶用法\" class=\"headerlink\" title=\"进阶用法\"></a>进阶用法</h2><ol>\n<li><p><strong>指定 Ubuntu 版本</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass launch --name &lt;instance-name&gt; &lt;ubuntu-version&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如，启动一个 Ubuntu 20.04 的虚拟机:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass launch --name my-vm 20.04<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>分配更多资源（CPU、内存、磁盘）</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass launch --name &lt;instance-name&gt; --cpus &lt;number&gt; --mem &lt;size&gt; --disk &lt;size&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如，分配 2 个 CPU，4GB 内存，20GB 磁盘:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass launch --name my-vm --cpus 2 --mem 4G --disk 20G<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>共享文件夹</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass mount &lt;host-directory&gt; &lt;instance-name&gt;:&lt;target-directory&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如，将本地目录 <code>/home/user/projects</code> 挂载到虚拟机的 <code>/home/ubuntu/projects</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass mount /home/user/projects my-vm:/home/ubuntu/projects<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>运行命令</strong>:<br>可以在虚拟机中运行命令而不进入虚拟机：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass <span class=\"hljs-built_in\">exec</span> &lt;instance-name&gt; -- &lt;<span class=\"hljs-built_in\">command</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如，更新虚拟机中的包列表:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass <span class=\"hljs-built_in\">exec</span> my-vm -- <span class=\"hljs-built_in\">sudo</span> apt update<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"启动前配置\"><a href=\"#启动前配置\" class=\"headerlink\" title=\"启动前配置\"></a>启动前配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 开启mount挂载，方便拿或传文件到服务器，默认false</span><br>multipass <span class=\"hljs-built_in\">set</span> local.privileged-mounts=<span class=\"hljs-literal\">true</span><br><span class=\"hljs-comment\">## 选择虚拟机驱动，hyperv/virtualbox</span><br><span class=\"hljs-comment\">## win专业版可用hyperv，家庭版只能virtualbox</span><br>multipass <span class=\"hljs-built_in\">set</span> local.driver=hyperv<br><span class=\"hljs-comment\">## 设置默认操作实例</span><br>multipass get client.primary-name=primary<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"启动实例\"><a href=\"#启动实例\" class=\"headerlink\" title=\"启动实例\"></a>启动实例</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass launch -n <span class=\"hljs-variable\">$name</span> -d 10G -m 2G -c 2 --bridged --mount &lt;local-path&gt;:&lt;instance-path&gt;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果启动不了可以尝试重启multipass</p>\n</blockquote>\n<h1 id=\"调整实例配置\"><a href=\"#调整实例配置\" class=\"headerlink\" title=\"调整实例配置\"></a>调整实例配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass stop handsome-ling<br>multipass <span class=\"hljs-built_in\">set</span> local.handsome-ling.cpus=4<br>multipass <span class=\"hljs-built_in\">set</span> local.handsome-ling.disk=60G<br>multipass <span class=\"hljs-built_in\">set</span> local.handsome-ling.memory=7G<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 删除并清除</span><br><span class=\"hljs-comment\">## delete 相当于把实例转为删除状态 </span><br><span class=\"hljs-comment\">## -p or --purge 删除并清除</span><br>multipass delete <span class=\"hljs-variable\">$instance</span> -p<br><span class=\"hljs-comment\">## purge</span><br>multipass purge <span class=\"hljs-variable\">$instance</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"IPv4-N-A\"><a href=\"#IPv4-N-A\" class=\"headerlink\" title=\"IPv4 N&#x2F;A\"></a>IPv4 N&#x2F;A</h1><ul>\n<li><p>重启实例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass restart <span class=\"hljs-variable\">$instance</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>停止后再启动实例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass stop <span class=\"hljs-variable\">$instance</span><br>multipass start <span class=\"hljs-variable\">$instance</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>重启multipass服务</p>\n<ul>\n<li>可直接杀进程</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">taskkill /f /pid <span class=\"hljs-variable\">$pid</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>状态suspending ，尝试suspend实例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass <span class=\"hljs-built_in\">suspend</span> <span class=\"hljs-variable\">$instance</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>状态suspended， shell连接即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass shell <span class=\"hljs-variable\">$instance</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<p>这是一份Multipass基本操作文档，以及包含一些常见问题的解决方法。</p>\n<p>Multipass 是一个轻量级的虚拟机管理工具，旨在简化在本地环境中创建和管理 Ubuntu 虚拟机。</p>\n<p>参考资料</p>\n<ul>\n<li><a href=\"https://multipass.run/\">Multipass 官网</a></li>\n<li><a href=\"https://multipass.run/docs\">Multipass 文档</a></li>\n</ul>\n<h1 id=\"安装Multipass\"><a href=\"#安装Multipass\" class=\"headerlink\" title=\"安装Multipass\"></a>安装Multipass</h1><ol>\n<li><p><strong>在 Linux 上安装</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> snap install multipass<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在 macOS 上安装</strong>:<br>使用 Homebrew:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">brew install --cask multipass<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在 Windows 上安装</strong>:<br>访问 <a href=\"https://multipass.run/\">Multipass 官网</a> 下载适用于 Windows 的安装程序，并按照提示完成安装。</p>\n</li>\n</ol>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><ol>\n<li><p><strong>启动一个新的虚拟机</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass launch --name &lt;instance-name&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass launch --name my-vm<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>列出所有虚拟机</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass list<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>进入虚拟机</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass shell &lt;instance-name&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass shell my-vm<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>停止虚拟机</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass stop &lt;instance-name&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass stop my-vm<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>删除虚拟机</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass delete &lt;instance-name&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass delete my-vm<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>清理已删除的虚拟机</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass purge<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"进阶用法\"><a href=\"#进阶用法\" class=\"headerlink\" title=\"进阶用法\"></a>进阶用法</h2><ol>\n<li><p><strong>指定 Ubuntu 版本</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass launch --name &lt;instance-name&gt; &lt;ubuntu-version&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如，启动一个 Ubuntu 20.04 的虚拟机:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass launch --name my-vm 20.04<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>分配更多资源（CPU、内存、磁盘）</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass launch --name &lt;instance-name&gt; --cpus &lt;number&gt; --mem &lt;size&gt; --disk &lt;size&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如，分配 2 个 CPU，4GB 内存，20GB 磁盘:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass launch --name my-vm --cpus 2 --mem 4G --disk 20G<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>共享文件夹</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass mount &lt;host-directory&gt; &lt;instance-name&gt;:&lt;target-directory&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如，将本地目录 <code>/home/user/projects</code> 挂载到虚拟机的 <code>/home/ubuntu/projects</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass mount /home/user/projects my-vm:/home/ubuntu/projects<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>运行命令</strong>:<br>可以在虚拟机中运行命令而不进入虚拟机：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass <span class=\"hljs-built_in\">exec</span> &lt;instance-name&gt; -- &lt;<span class=\"hljs-built_in\">command</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如，更新虚拟机中的包列表:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass <span class=\"hljs-built_in\">exec</span> my-vm -- <span class=\"hljs-built_in\">sudo</span> apt update<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"启动前配置\"><a href=\"#启动前配置\" class=\"headerlink\" title=\"启动前配置\"></a>启动前配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 开启mount挂载，方便拿或传文件到服务器，默认false</span><br>multipass <span class=\"hljs-built_in\">set</span> local.privileged-mounts=<span class=\"hljs-literal\">true</span><br><span class=\"hljs-comment\">## 选择虚拟机驱动，hyperv/virtualbox</span><br><span class=\"hljs-comment\">## win专业版可用hyperv，家庭版只能virtualbox</span><br>multipass <span class=\"hljs-built_in\">set</span> local.driver=hyperv<br><span class=\"hljs-comment\">## 设置默认操作实例</span><br>multipass get client.primary-name=primary<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"启动实例\"><a href=\"#启动实例\" class=\"headerlink\" title=\"启动实例\"></a>启动实例</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass launch -n <span class=\"hljs-variable\">$name</span> -d 10G -m 2G -c 2 --bridged --mount &lt;local-path&gt;:&lt;instance-path&gt;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果启动不了可以尝试重启multipass</p>\n</blockquote>\n<h1 id=\"调整实例配置\"><a href=\"#调整实例配置\" class=\"headerlink\" title=\"调整实例配置\"></a>调整实例配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass stop handsome-ling<br>multipass <span class=\"hljs-built_in\">set</span> local.handsome-ling.cpus=4<br>multipass <span class=\"hljs-built_in\">set</span> local.handsome-ling.disk=60G<br>multipass <span class=\"hljs-built_in\">set</span> local.handsome-ling.memory=7G<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 删除并清除</span><br><span class=\"hljs-comment\">## delete 相当于把实例转为删除状态 </span><br><span class=\"hljs-comment\">## -p or --purge 删除并清除</span><br>multipass delete <span class=\"hljs-variable\">$instance</span> -p<br><span class=\"hljs-comment\">## purge</span><br>multipass purge <span class=\"hljs-variable\">$instance</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"IPv4-N-A\"><a href=\"#IPv4-N-A\" class=\"headerlink\" title=\"IPv4 N&#x2F;A\"></a>IPv4 N&#x2F;A</h1><ul>\n<li><p>重启实例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass restart <span class=\"hljs-variable\">$instance</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>停止后再启动实例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass stop <span class=\"hljs-variable\">$instance</span><br>multipass start <span class=\"hljs-variable\">$instance</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>重启multipass服务</p>\n<ul>\n<li>可直接杀进程</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">taskkill /f /pid <span class=\"hljs-variable\">$pid</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>状态suspending ，尝试suspend实例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass <span class=\"hljs-built_in\">suspend</span> <span class=\"hljs-variable\">$instance</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>状态suspended， shell连接即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">multipass shell <span class=\"hljs-variable\">$instance</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"tmux基础操作","date":"2024-07-11T07:20:11.000Z","_content":"# tmux\n\n- 三个概念\n  - session - 会话\n    - 每运行一次`tmux`会创建一个session\n  - window - 窗口\n    - 在session内按前缀键后，`c`键创建的就是一个window\n  - pane - 窗格\n    - 将window进行分割后得到的就是pane\n\n## 基础操作\n\n### 1. 会话外操作\n\n```bash\ntmux attach -t 0 ## 进入一个会话\ntmux ls ## 查看当前服务器的tmux会话\ntmux kill-session -t 0\ntmux kill-pane -t 0\ntmux kill-window -t 0\n\ntmux list-commands ## 显示tmux所有命令 \ntmux show-options -g ## 显示所有选项\n```\n\n### 2. 会话内操作\n\n默认前缀键`ctrl+b`\n\n> 以下操作都在某个tmux session中操作，需要先按前缀键\n\n`\"` 上下分屏\n\n`%`左右分屏\n\n`c`创建新窗口\n\n`d`暂时退出tmux窗口\n\n`s`列出会话，选择切换会话\n\n> 切换会话也可用`:` ，然后输入以下命令，可tab补全\n>\n> switch-client -t 0  \n>\n> attach-session -t 0 \n\n数字0-9切换窗口\n\n`z`放大缩小窗格\n\n`n`切换下一个窗口\n\n`p`切换上一个窗口\n\n`q`显示窗格编号，根据提示输入对应数字切换pane\n\n`o`切换到下一个窗格，方向键亦可\n\n`space`循环切换窗格布局\n\n`&`关闭当前窗口\n\n`[`开启复制模式\n\n`{`将pane布局往前移动\n\n`}`将pane布局往后移动\n\n`?`查看帮助页\n\n## 个性化\n\n> 以下配置将会修改\n>\n> ​\t前缀键为ctrl+x\n>\n> ​\t开启鼠标模式\n>\n> ​\t绑定kjhl为上下左右，类似vim\n>\n> ​\t设置vi风格模式，这样就可以使用`[`复制模式下`/`来查找输出信息的关键字\n\n修改配置文件` ~/.tmux.conf`\n\n```bash\nset -g prefix C-x\nunbind C-b\nbind C-x send-prefix\n#set swap pane key\nbind-key k select-pane -U\nbind-key j select-pane -D\nbind-key h select-pane -L\nbind-key l select-pane -R\nset-option -g mouse on\nsetw -g mode-keys vi\n```\n\n修改完配置文件后关掉session，重开就能生效了\n```bash\n## 或者也可用此命令生效\ntmux source-file ~/.tmux.conf\n```\n\n部分终端修改后可能无法复制，需要安装`xclip`，再修改配置文件\n\n```bash\napt install xclip\n```\n\n```bash\n# 启用鼠标支持\nset -g mouse on\n\n# 允许鼠标选择文本并复制\n# 启用这种模式后，你可以通过鼠标选择来复制文本\nbind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel \"xclip -in -selection clipboard\"\n```\n\n部分终端可能直接鼠标滚轮即可在pane中翻页，部分需要配合**shift键**才能翻页。","source":"_posts/tmux.md","raw":"---\ntitle: tmux基础操作\ndate: 2024-07-11 15:20:11\ntags: tools\n---\n# tmux\n\n- 三个概念\n  - session - 会话\n    - 每运行一次`tmux`会创建一个session\n  - window - 窗口\n    - 在session内按前缀键后，`c`键创建的就是一个window\n  - pane - 窗格\n    - 将window进行分割后得到的就是pane\n\n## 基础操作\n\n### 1. 会话外操作\n\n```bash\ntmux attach -t 0 ## 进入一个会话\ntmux ls ## 查看当前服务器的tmux会话\ntmux kill-session -t 0\ntmux kill-pane -t 0\ntmux kill-window -t 0\n\ntmux list-commands ## 显示tmux所有命令 \ntmux show-options -g ## 显示所有选项\n```\n\n### 2. 会话内操作\n\n默认前缀键`ctrl+b`\n\n> 以下操作都在某个tmux session中操作，需要先按前缀键\n\n`\"` 上下分屏\n\n`%`左右分屏\n\n`c`创建新窗口\n\n`d`暂时退出tmux窗口\n\n`s`列出会话，选择切换会话\n\n> 切换会话也可用`:` ，然后输入以下命令，可tab补全\n>\n> switch-client -t 0  \n>\n> attach-session -t 0 \n\n数字0-9切换窗口\n\n`z`放大缩小窗格\n\n`n`切换下一个窗口\n\n`p`切换上一个窗口\n\n`q`显示窗格编号，根据提示输入对应数字切换pane\n\n`o`切换到下一个窗格，方向键亦可\n\n`space`循环切换窗格布局\n\n`&`关闭当前窗口\n\n`[`开启复制模式\n\n`{`将pane布局往前移动\n\n`}`将pane布局往后移动\n\n`?`查看帮助页\n\n## 个性化\n\n> 以下配置将会修改\n>\n> ​\t前缀键为ctrl+x\n>\n> ​\t开启鼠标模式\n>\n> ​\t绑定kjhl为上下左右，类似vim\n>\n> ​\t设置vi风格模式，这样就可以使用`[`复制模式下`/`来查找输出信息的关键字\n\n修改配置文件` ~/.tmux.conf`\n\n```bash\nset -g prefix C-x\nunbind C-b\nbind C-x send-prefix\n#set swap pane key\nbind-key k select-pane -U\nbind-key j select-pane -D\nbind-key h select-pane -L\nbind-key l select-pane -R\nset-option -g mouse on\nsetw -g mode-keys vi\n```\n\n修改完配置文件后关掉session，重开就能生效了\n```bash\n## 或者也可用此命令生效\ntmux source-file ~/.tmux.conf\n```\n\n部分终端修改后可能无法复制，需要安装`xclip`，再修改配置文件\n\n```bash\napt install xclip\n```\n\n```bash\n# 启用鼠标支持\nset -g mouse on\n\n# 允许鼠标选择文本并复制\n# 启用这种模式后，你可以通过鼠标选择来复制文本\nbind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel \"xclip -in -selection clipboard\"\n```\n\n部分终端可能直接鼠标滚轮即可在pane中翻页，部分需要配合**shift键**才能翻页。","slug":"tmux","published":1,"updated":"2024-08-05T02:05:37.256Z","_id":"clzfp1568000p89iq83md6x45","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"tmux\"><a href=\"#tmux\" class=\"headerlink\" title=\"tmux\"></a>tmux</h1><ul>\n<li>三个概念<ul>\n<li>session - 会话<ul>\n<li>每运行一次<code>tmux</code>会创建一个session</li>\n</ul>\n</li>\n<li>window - 窗口<ul>\n<li>在session内按前缀键后，<code>c</code>键创建的就是一个window</li>\n</ul>\n</li>\n<li>pane - 窗格<ul>\n<li>将window进行分割后得到的就是pane</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h2><h3 id=\"1-会话外操作\"><a href=\"#1-会话外操作\" class=\"headerlink\" title=\"1. 会话外操作\"></a>1. 会话外操作</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">tmux attach -t 0 <span class=\"hljs-comment\">## 进入一个会话</span><br>tmux <span class=\"hljs-built_in\">ls</span> <span class=\"hljs-comment\">## 查看当前服务器的tmux会话</span><br>tmux kill-session -t 0<br>tmux kill-pane -t 0<br>tmux kill-window -t 0<br><br>tmux list-commands <span class=\"hljs-comment\">## 显示tmux所有命令 </span><br>tmux show-options -g <span class=\"hljs-comment\">## 显示所有选项</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-会话内操作\"><a href=\"#2-会话内操作\" class=\"headerlink\" title=\"2. 会话内操作\"></a>2. 会话内操作</h3><p>默认前缀键<code>ctrl+b</code></p>\n<blockquote>\n<p>以下操作都在某个tmux session中操作，需要先按前缀键</p>\n</blockquote>\n<p><code>&quot;</code> 上下分屏</p>\n<p><code>%</code>左右分屏</p>\n<p><code>c</code>创建新窗口</p>\n<p><code>d</code>暂时退出tmux窗口</p>\n<p><code>s</code>列出会话，选择切换会话</p>\n<blockquote>\n<p>切换会话也可用<code>:</code> ，然后输入以下命令，可tab补全</p>\n<p>switch-client -t 0  </p>\n<p>attach-session -t 0 </p>\n</blockquote>\n<p>数字0-9切换窗口</p>\n<p><code>z</code>放大缩小窗格</p>\n<p><code>n</code>切换下一个窗口</p>\n<p><code>p</code>切换上一个窗口</p>\n<p><code>q</code>显示窗格编号，根据提示输入对应数字切换pane</p>\n<p><code>o</code>切换到下一个窗格，方向键亦可</p>\n<p><code>space</code>循环切换窗格布局</p>\n<p><code>&amp;</code>关闭当前窗口</p>\n<p><code>[</code>开启复制模式</p>\n<p><code>&#123;</code>将pane布局往前移动</p>\n<p><code>&#125;</code>将pane布局往后移动</p>\n<p><code>?</code>查看帮助页</p>\n<h2 id=\"个性化\"><a href=\"#个性化\" class=\"headerlink\" title=\"个性化\"></a>个性化</h2><blockquote>\n<p>以下配置将会修改</p>\n<p>​\t前缀键为ctrl+x</p>\n<p>​\t开启鼠标模式</p>\n<p>​\t绑定kjhl为上下左右，类似vim</p>\n<p>​\t设置vi风格模式，这样就可以使用<code>[</code>复制模式下<code>/</code>来查找输出信息的关键字</p>\n</blockquote>\n<p>修改配置文件<code> ~/.tmux.conf</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">set</span> -g prefix C-x<br>unbind C-b<br><span class=\"hljs-built_in\">bind</span> C-x send-prefix<br><span class=\"hljs-comment\">#set swap pane key</span><br>bind-key k select-pane -U<br>bind-key j select-pane -D<br>bind-key h select-pane -L<br>bind-key l select-pane -R<br>set-option -g mouse on<br>setw -g mode-keys vi<br></code></pre></td></tr></table></figure>\n\n<p>修改完配置文件后关掉session，重开就能生效了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 或者也可用此命令生效</span><br>tmux source-file ~/.tmux.conf<br></code></pre></td></tr></table></figure>\n\n<p>部分终端修改后可能无法复制，需要安装<code>xclip</code>，再修改配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">apt install xclip<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 启用鼠标支持</span><br><span class=\"hljs-built_in\">set</span> -g mouse on<br><br><span class=\"hljs-comment\"># 允许鼠标选择文本并复制</span><br><span class=\"hljs-comment\"># 启用这种模式后，你可以通过鼠标选择来复制文本</span><br><span class=\"hljs-built_in\">bind</span> -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel <span class=\"hljs-string\">&quot;xclip -in -selection clipboard&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>部分终端可能直接鼠标滚轮即可在pane中翻页，部分需要配合<strong>shift键</strong>才能翻页。</p>\n","excerpt":"","more":"<h1 id=\"tmux\"><a href=\"#tmux\" class=\"headerlink\" title=\"tmux\"></a>tmux</h1><ul>\n<li>三个概念<ul>\n<li>session - 会话<ul>\n<li>每运行一次<code>tmux</code>会创建一个session</li>\n</ul>\n</li>\n<li>window - 窗口<ul>\n<li>在session内按前缀键后，<code>c</code>键创建的就是一个window</li>\n</ul>\n</li>\n<li>pane - 窗格<ul>\n<li>将window进行分割后得到的就是pane</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h2><h3 id=\"1-会话外操作\"><a href=\"#1-会话外操作\" class=\"headerlink\" title=\"1. 会话外操作\"></a>1. 会话外操作</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">tmux attach -t 0 <span class=\"hljs-comment\">## 进入一个会话</span><br>tmux <span class=\"hljs-built_in\">ls</span> <span class=\"hljs-comment\">## 查看当前服务器的tmux会话</span><br>tmux kill-session -t 0<br>tmux kill-pane -t 0<br>tmux kill-window -t 0<br><br>tmux list-commands <span class=\"hljs-comment\">## 显示tmux所有命令 </span><br>tmux show-options -g <span class=\"hljs-comment\">## 显示所有选项</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-会话内操作\"><a href=\"#2-会话内操作\" class=\"headerlink\" title=\"2. 会话内操作\"></a>2. 会话内操作</h3><p>默认前缀键<code>ctrl+b</code></p>\n<blockquote>\n<p>以下操作都在某个tmux session中操作，需要先按前缀键</p>\n</blockquote>\n<p><code>&quot;</code> 上下分屏</p>\n<p><code>%</code>左右分屏</p>\n<p><code>c</code>创建新窗口</p>\n<p><code>d</code>暂时退出tmux窗口</p>\n<p><code>s</code>列出会话，选择切换会话</p>\n<blockquote>\n<p>切换会话也可用<code>:</code> ，然后输入以下命令，可tab补全</p>\n<p>switch-client -t 0  </p>\n<p>attach-session -t 0 </p>\n</blockquote>\n<p>数字0-9切换窗口</p>\n<p><code>z</code>放大缩小窗格</p>\n<p><code>n</code>切换下一个窗口</p>\n<p><code>p</code>切换上一个窗口</p>\n<p><code>q</code>显示窗格编号，根据提示输入对应数字切换pane</p>\n<p><code>o</code>切换到下一个窗格，方向键亦可</p>\n<p><code>space</code>循环切换窗格布局</p>\n<p><code>&amp;</code>关闭当前窗口</p>\n<p><code>[</code>开启复制模式</p>\n<p><code>&#123;</code>将pane布局往前移动</p>\n<p><code>&#125;</code>将pane布局往后移动</p>\n<p><code>?</code>查看帮助页</p>\n<h2 id=\"个性化\"><a href=\"#个性化\" class=\"headerlink\" title=\"个性化\"></a>个性化</h2><blockquote>\n<p>以下配置将会修改</p>\n<p>​\t前缀键为ctrl+x</p>\n<p>​\t开启鼠标模式</p>\n<p>​\t绑定kjhl为上下左右，类似vim</p>\n<p>​\t设置vi风格模式，这样就可以使用<code>[</code>复制模式下<code>/</code>来查找输出信息的关键字</p>\n</blockquote>\n<p>修改配置文件<code> ~/.tmux.conf</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">set</span> -g prefix C-x<br>unbind C-b<br><span class=\"hljs-built_in\">bind</span> C-x send-prefix<br><span class=\"hljs-comment\">#set swap pane key</span><br>bind-key k select-pane -U<br>bind-key j select-pane -D<br>bind-key h select-pane -L<br>bind-key l select-pane -R<br>set-option -g mouse on<br>setw -g mode-keys vi<br></code></pre></td></tr></table></figure>\n\n<p>修改完配置文件后关掉session，重开就能生效了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 或者也可用此命令生效</span><br>tmux source-file ~/.tmux.conf<br></code></pre></td></tr></table></figure>\n\n<p>部分终端修改后可能无法复制，需要安装<code>xclip</code>，再修改配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">apt install xclip<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 启用鼠标支持</span><br><span class=\"hljs-built_in\">set</span> -g mouse on<br><br><span class=\"hljs-comment\"># 允许鼠标选择文本并复制</span><br><span class=\"hljs-comment\"># 启用这种模式后，你可以通过鼠标选择来复制文本</span><br><span class=\"hljs-built_in\">bind</span> -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel <span class=\"hljs-string\">&quot;xclip -in -selection clipboard&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>部分终端可能直接鼠标滚轮即可在pane中翻页，部分需要配合<strong>shift键</strong>才能翻页。</p>\n"},{"title":"WSL 基础用法","date":"2024-08-04T06:40:41.000Z","_content":"\n# WSL 基础用法\n\n## 检查 WSL是否安装\n\n```powershell\n## 检查版本\nwsl --version\n```\n\n![wsl-version](../images/wsl-base/wsl-version.png)\n\n有输出如图则为已安装。\n\n## 安装 WSL\n\n> [旧版安装方式](https://learn.microsoft.com/zh-cn/windows/wsl/install-manual)\n\n安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。\n\n运行如下命令：\n\n```powershell\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n```\n\n必须运行 Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11 才能使用以下命令。 \n\n在管理员模式下打开 PowerShell 或 Windows 命令提示符，输入如下命令，然后重启计算机。\n\n```powershell\n# 此命令将启用运行 WSL 并安装 Linux 的 Ubuntu 发行版所需的功能\nwsl --install\n\n## 更新内核\n## Linux 内核更新包会安装最新版本的 WSL 2 Linux 内核，以便在 Windows 操作系统中运行 WSL\nwsl --update\n\n## 设置默认版本\nwsl --set-default-version 2\n```\n\n## 查看发行版本\n\n```powershell\n## 查看可安装发行版\nwsl --list --online\nwsl -l -o\n## 查看已安装发行版\nwsl -l -v\n```\n\n## 安装一个发行版\n\n```powershell\n## 可直接运行下载安装\nwsl --install -d <Distribution Name>\nwsl --install --web-download -d <Distribution Name>\n## 也可直接本地导入\n## docker导出的容器tar包可用在wsl\ndocker export $container -o $container.tar\nwsl --import centos D:\\wsl\\centos\\ .\\centos.tar\n```\n\n> [导入任意发行版](https://learn.microsoft.com/zh-cn/windows/wsl/use-custom-distro)\n\n## 操作虚拟机\n\n使用`wsl -l -v`可看到如图有四个已安装发行版\n\n![installed](../images/wsl-base/installed.png)\n\n```powershell\n## 进入centos版本linux\nwsl -d centos\n```\n\n要设置与 `wsl` 命令一起使用的默认 Linux 发行版，输入 `wsl -s ` 或 `wsl --set-default `。\n\n例如，从 PowerShell/CMD 输入 `wsl -s Debian`，将默认发行版设置为 Debian。 现在从 Powershell 运行 `wsl npm init` 将在 Debian 中运行 `npm init` 命令。\n\n## 修改 WSL配置\n\n1. 机器内配置\n\n   进入虚拟机后，运行`df -h`可以查看到宿主机的各个盘符都已挂载到该机器上。\n\n```bash\n## 默认不可用systemctl控制服务，需要WSL版本0.67.6以上\n## 默认windows访问wsl linux 以默认用户访问，因此无法访问root用户文件\n## 修改为可用systemd及默认root用户登录\ncat >> /etc/wsl.conf <<EOF\n[boot]\nsystemd=true\n[user]\ndefault=root\nEOF\n```\n\n2. WSL 全局配置\n\n   开启镜像ip地址，虚拟机地址会变更为宿主机同一个ip。\n\n```bash\ncat >>/mnt/c/Users/xxx/.wslconfig <<EOF\n[experimental]\nnetworkingMode=mirrored\nautoProxy=true\ndnsTunneling=true\nfirewall=true\nEOF\n```\n\n修改完配置文件后需要运行`wsl --shutdown`，并需要**间隔8秒**后再启动虚拟机。\n\n> [高级设置配置](https://learn.microsoft.com/zh-cn/windows/wsl/wsl-config)\n\n## 删除不需要的发行版\n\n```powershell\nwsl --unregister <Distro>\n```\n\n","source":"_posts/wsl-base.md","raw":"---\ntitle: WSL 基础用法\ndate: 2024-08-04 14:40:41\ntags: tools\n---\n\n# WSL 基础用法\n\n## 检查 WSL是否安装\n\n```powershell\n## 检查版本\nwsl --version\n```\n\n![wsl-version](../images/wsl-base/wsl-version.png)\n\n有输出如图则为已安装。\n\n## 安装 WSL\n\n> [旧版安装方式](https://learn.microsoft.com/zh-cn/windows/wsl/install-manual)\n\n安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。\n\n运行如下命令：\n\n```powershell\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n```\n\n必须运行 Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11 才能使用以下命令。 \n\n在管理员模式下打开 PowerShell 或 Windows 命令提示符，输入如下命令，然后重启计算机。\n\n```powershell\n# 此命令将启用运行 WSL 并安装 Linux 的 Ubuntu 发行版所需的功能\nwsl --install\n\n## 更新内核\n## Linux 内核更新包会安装最新版本的 WSL 2 Linux 内核，以便在 Windows 操作系统中运行 WSL\nwsl --update\n\n## 设置默认版本\nwsl --set-default-version 2\n```\n\n## 查看发行版本\n\n```powershell\n## 查看可安装发行版\nwsl --list --online\nwsl -l -o\n## 查看已安装发行版\nwsl -l -v\n```\n\n## 安装一个发行版\n\n```powershell\n## 可直接运行下载安装\nwsl --install -d <Distribution Name>\nwsl --install --web-download -d <Distribution Name>\n## 也可直接本地导入\n## docker导出的容器tar包可用在wsl\ndocker export $container -o $container.tar\nwsl --import centos D:\\wsl\\centos\\ .\\centos.tar\n```\n\n> [导入任意发行版](https://learn.microsoft.com/zh-cn/windows/wsl/use-custom-distro)\n\n## 操作虚拟机\n\n使用`wsl -l -v`可看到如图有四个已安装发行版\n\n![installed](../images/wsl-base/installed.png)\n\n```powershell\n## 进入centos版本linux\nwsl -d centos\n```\n\n要设置与 `wsl` 命令一起使用的默认 Linux 发行版，输入 `wsl -s ` 或 `wsl --set-default `。\n\n例如，从 PowerShell/CMD 输入 `wsl -s Debian`，将默认发行版设置为 Debian。 现在从 Powershell 运行 `wsl npm init` 将在 Debian 中运行 `npm init` 命令。\n\n## 修改 WSL配置\n\n1. 机器内配置\n\n   进入虚拟机后，运行`df -h`可以查看到宿主机的各个盘符都已挂载到该机器上。\n\n```bash\n## 默认不可用systemctl控制服务，需要WSL版本0.67.6以上\n## 默认windows访问wsl linux 以默认用户访问，因此无法访问root用户文件\n## 修改为可用systemd及默认root用户登录\ncat >> /etc/wsl.conf <<EOF\n[boot]\nsystemd=true\n[user]\ndefault=root\nEOF\n```\n\n2. WSL 全局配置\n\n   开启镜像ip地址，虚拟机地址会变更为宿主机同一个ip。\n\n```bash\ncat >>/mnt/c/Users/xxx/.wslconfig <<EOF\n[experimental]\nnetworkingMode=mirrored\nautoProxy=true\ndnsTunneling=true\nfirewall=true\nEOF\n```\n\n修改完配置文件后需要运行`wsl --shutdown`，并需要**间隔8秒**后再启动虚拟机。\n\n> [高级设置配置](https://learn.microsoft.com/zh-cn/windows/wsl/wsl-config)\n\n## 删除不需要的发行版\n\n```powershell\nwsl --unregister <Distro>\n```\n\n","slug":"wsl-base","published":1,"updated":"2024-08-05T13:48:19.329Z","_id":"clzfp156c000q89iq4jkw30vt","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"WSL-基础用法\"><a href=\"#WSL-基础用法\" class=\"headerlink\" title=\"WSL 基础用法\"></a>WSL 基础用法</h1><h2 id=\"检查-WSL是否安装\"><a href=\"#检查-WSL是否安装\" class=\"headerlink\" title=\"检查 WSL是否安装\"></a>检查 WSL是否安装</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\">## 检查版本</span><br>wsl <span class=\"hljs-literal\">--version</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/wsl-base/wsl-version.png\" alt=\"wsl-version\"></p>\n<p>有输出如图则为已安装。</p>\n<h2 id=\"安装-WSL\"><a href=\"#安装-WSL\" class=\"headerlink\" title=\"安装 WSL\"></a>安装 WSL</h2><blockquote>\n<p><a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/install-manual\">旧版安装方式</a></p>\n</blockquote>\n<p>安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。</p>\n<p>运行如下命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">dism.exe /online /<span class=\"hljs-built_in\">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart<br></code></pre></td></tr></table></figure>\n\n<p>必须运行 Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11 才能使用以下命令。 </p>\n<p>在管理员模式下打开 PowerShell 或 Windows 命令提示符，输入如下命令，然后重启计算机。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\"># 此命令将启用运行 WSL 并安装 Linux 的 Ubuntu 发行版所需的功能</span><br>wsl <span class=\"hljs-literal\">--install</span><br><br><span class=\"hljs-comment\">## 更新内核</span><br><span class=\"hljs-comment\">## Linux 内核更新包会安装最新版本的 WSL 2 Linux 内核，以便在 Windows 操作系统中运行 WSL</span><br>wsl <span class=\"hljs-literal\">--update</span><br><br><span class=\"hljs-comment\">## 设置默认版本</span><br>wsl <span class=\"hljs-literal\">--set-default-version</span> <span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查看发行版本\"><a href=\"#查看发行版本\" class=\"headerlink\" title=\"查看发行版本\"></a>查看发行版本</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\">## 查看可安装发行版</span><br>wsl <span class=\"hljs-literal\">--list</span> <span class=\"hljs-literal\">--online</span><br>wsl <span class=\"hljs-literal\">-l</span> <span class=\"hljs-literal\">-o</span><br><span class=\"hljs-comment\">## 查看已安装发行版</span><br>wsl <span class=\"hljs-literal\">-l</span> <span class=\"hljs-literal\">-v</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装一个发行版\"><a href=\"#安装一个发行版\" class=\"headerlink\" title=\"安装一个发行版\"></a>安装一个发行版</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\">## 可直接运行下载安装</span><br>wsl <span class=\"hljs-literal\">--install</span> <span class=\"hljs-literal\">-d</span> &lt;Distribution Name&gt;<br>wsl <span class=\"hljs-literal\">--install</span> <span class=\"hljs-literal\">--web-download</span> <span class=\"hljs-literal\">-d</span> &lt;Distribution Name&gt;<br><span class=\"hljs-comment\">## 也可直接本地导入</span><br><span class=\"hljs-comment\">## docker导出的容器tar包可用在wsl</span><br>docker export <span class=\"hljs-variable\">$container</span> <span class=\"hljs-literal\">-o</span> <span class=\"hljs-variable\">$container</span>.tar<br>wsl <span class=\"hljs-literal\">--import</span> centos D:\\wsl\\centos\\ .\\centos.tar<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/use-custom-distro\">导入任意发行版</a></p>\n</blockquote>\n<h2 id=\"操作虚拟机\"><a href=\"#操作虚拟机\" class=\"headerlink\" title=\"操作虚拟机\"></a>操作虚拟机</h2><p>使用<code>wsl -l -v</code>可看到如图有四个已安装发行版</p>\n<p><img src=\"/../images/wsl-base/installed.png\" alt=\"installed\"></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\">## 进入centos版本linux</span><br>wsl <span class=\"hljs-literal\">-d</span> centos<br></code></pre></td></tr></table></figure>\n\n<p>要设置与 <code>wsl</code> 命令一起使用的默认 Linux 发行版，输入 <code>wsl -s </code> 或 <code>wsl --set-default </code>。</p>\n<p>例如，从 PowerShell&#x2F;CMD 输入 <code>wsl -s Debian</code>，将默认发行版设置为 Debian。 现在从 Powershell 运行 <code>wsl npm init</code> 将在 Debian 中运行 <code>npm init</code> 命令。</p>\n<h2 id=\"修改-WSL配置\"><a href=\"#修改-WSL配置\" class=\"headerlink\" title=\"修改 WSL配置\"></a>修改 WSL配置</h2><ol>\n<li><p>机器内配置</p>\n<p>进入虚拟机后，运行<code>df -h</code>可以查看到宿主机的各个盘符都已挂载到该机器上。</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 默认不可用systemctl控制服务，需要WSL版本0.67.6以上</span><br><span class=\"hljs-comment\">## 默认windows访问wsl linux 以默认用户访问，因此无法访问root用户文件</span><br><span class=\"hljs-comment\">## 修改为可用systemd及默认root用户登录</span><br><span class=\"hljs-built_in\">cat</span> &gt;&gt; /etc/wsl.conf &lt;&lt;<span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\">[boot]</span><br><span class=\"hljs-string\">systemd=true</span><br><span class=\"hljs-string\">[user]</span><br><span class=\"hljs-string\">default=root</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>WSL 全局配置</p>\n<p>开启镜像ip地址，虚拟机地址会变更为宿主机同一个ip。</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> &gt;&gt;/mnt/c/Users/xxx/.wslconfig &lt;&lt;<span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\">[experimental]</span><br><span class=\"hljs-string\">networkingMode=mirrored</span><br><span class=\"hljs-string\">autoProxy=true</span><br><span class=\"hljs-string\">dnsTunneling=true</span><br><span class=\"hljs-string\">firewall=true</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<p>修改完配置文件后需要运行<code>wsl --shutdown</code>，并需要<strong>间隔8秒</strong>后再启动虚拟机。</p>\n<blockquote>\n<p><a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/wsl-config\">高级设置配置</a></p>\n</blockquote>\n<h2 id=\"删除不需要的发行版\"><a href=\"#删除不需要的发行版\" class=\"headerlink\" title=\"删除不需要的发行版\"></a>删除不需要的发行版</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">wsl <span class=\"hljs-literal\">--unregister</span> &lt;Distro&gt;<br></code></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"WSL-基础用法\"><a href=\"#WSL-基础用法\" class=\"headerlink\" title=\"WSL 基础用法\"></a>WSL 基础用法</h1><h2 id=\"检查-WSL是否安装\"><a href=\"#检查-WSL是否安装\" class=\"headerlink\" title=\"检查 WSL是否安装\"></a>检查 WSL是否安装</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\">## 检查版本</span><br>wsl <span class=\"hljs-literal\">--version</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/wsl-base/wsl-version.png\" alt=\"wsl-version\"></p>\n<p>有输出如图则为已安装。</p>\n<h2 id=\"安装-WSL\"><a href=\"#安装-WSL\" class=\"headerlink\" title=\"安装 WSL\"></a>安装 WSL</h2><blockquote>\n<p><a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/install-manual\">旧版安装方式</a></p>\n</blockquote>\n<p>安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。</p>\n<p>运行如下命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">dism.exe /online /<span class=\"hljs-built_in\">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart<br></code></pre></td></tr></table></figure>\n\n<p>必须运行 Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11 才能使用以下命令。 </p>\n<p>在管理员模式下打开 PowerShell 或 Windows 命令提示符，输入如下命令，然后重启计算机。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\"># 此命令将启用运行 WSL 并安装 Linux 的 Ubuntu 发行版所需的功能</span><br>wsl <span class=\"hljs-literal\">--install</span><br><br><span class=\"hljs-comment\">## 更新内核</span><br><span class=\"hljs-comment\">## Linux 内核更新包会安装最新版本的 WSL 2 Linux 内核，以便在 Windows 操作系统中运行 WSL</span><br>wsl <span class=\"hljs-literal\">--update</span><br><br><span class=\"hljs-comment\">## 设置默认版本</span><br>wsl <span class=\"hljs-literal\">--set-default-version</span> <span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查看发行版本\"><a href=\"#查看发行版本\" class=\"headerlink\" title=\"查看发行版本\"></a>查看发行版本</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\">## 查看可安装发行版</span><br>wsl <span class=\"hljs-literal\">--list</span> <span class=\"hljs-literal\">--online</span><br>wsl <span class=\"hljs-literal\">-l</span> <span class=\"hljs-literal\">-o</span><br><span class=\"hljs-comment\">## 查看已安装发行版</span><br>wsl <span class=\"hljs-literal\">-l</span> <span class=\"hljs-literal\">-v</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装一个发行版\"><a href=\"#安装一个发行版\" class=\"headerlink\" title=\"安装一个发行版\"></a>安装一个发行版</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\">## 可直接运行下载安装</span><br>wsl <span class=\"hljs-literal\">--install</span> <span class=\"hljs-literal\">-d</span> &lt;Distribution Name&gt;<br>wsl <span class=\"hljs-literal\">--install</span> <span class=\"hljs-literal\">--web-download</span> <span class=\"hljs-literal\">-d</span> &lt;Distribution Name&gt;<br><span class=\"hljs-comment\">## 也可直接本地导入</span><br><span class=\"hljs-comment\">## docker导出的容器tar包可用在wsl</span><br>docker export <span class=\"hljs-variable\">$container</span> <span class=\"hljs-literal\">-o</span> <span class=\"hljs-variable\">$container</span>.tar<br>wsl <span class=\"hljs-literal\">--import</span> centos D:\\wsl\\centos\\ .\\centos.tar<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/use-custom-distro\">导入任意发行版</a></p>\n</blockquote>\n<h2 id=\"操作虚拟机\"><a href=\"#操作虚拟机\" class=\"headerlink\" title=\"操作虚拟机\"></a>操作虚拟机</h2><p>使用<code>wsl -l -v</code>可看到如图有四个已安装发行版</p>\n<p><img src=\"/../images/wsl-base/installed.png\" alt=\"installed\"></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\">## 进入centos版本linux</span><br>wsl <span class=\"hljs-literal\">-d</span> centos<br></code></pre></td></tr></table></figure>\n\n<p>要设置与 <code>wsl</code> 命令一起使用的默认 Linux 发行版，输入 <code>wsl -s </code> 或 <code>wsl --set-default </code>。</p>\n<p>例如，从 PowerShell&#x2F;CMD 输入 <code>wsl -s Debian</code>，将默认发行版设置为 Debian。 现在从 Powershell 运行 <code>wsl npm init</code> 将在 Debian 中运行 <code>npm init</code> 命令。</p>\n<h2 id=\"修改-WSL配置\"><a href=\"#修改-WSL配置\" class=\"headerlink\" title=\"修改 WSL配置\"></a>修改 WSL配置</h2><ol>\n<li><p>机器内配置</p>\n<p>进入虚拟机后，运行<code>df -h</code>可以查看到宿主机的各个盘符都已挂载到该机器上。</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 默认不可用systemctl控制服务，需要WSL版本0.67.6以上</span><br><span class=\"hljs-comment\">## 默认windows访问wsl linux 以默认用户访问，因此无法访问root用户文件</span><br><span class=\"hljs-comment\">## 修改为可用systemd及默认root用户登录</span><br><span class=\"hljs-built_in\">cat</span> &gt;&gt; /etc/wsl.conf &lt;&lt;<span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\">[boot]</span><br><span class=\"hljs-string\">systemd=true</span><br><span class=\"hljs-string\">[user]</span><br><span class=\"hljs-string\">default=root</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>WSL 全局配置</p>\n<p>开启镜像ip地址，虚拟机地址会变更为宿主机同一个ip。</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> &gt;&gt;/mnt/c/Users/xxx/.wslconfig &lt;&lt;<span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\">[experimental]</span><br><span class=\"hljs-string\">networkingMode=mirrored</span><br><span class=\"hljs-string\">autoProxy=true</span><br><span class=\"hljs-string\">dnsTunneling=true</span><br><span class=\"hljs-string\">firewall=true</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<p>修改完配置文件后需要运行<code>wsl --shutdown</code>，并需要<strong>间隔8秒</strong>后再启动虚拟机。</p>\n<blockquote>\n<p><a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/wsl-config\">高级设置配置</a></p>\n</blockquote>\n<h2 id=\"删除不需要的发行版\"><a href=\"#删除不需要的发行版\" class=\"headerlink\" title=\"删除不需要的发行版\"></a>删除不需要的发行版</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">wsl <span class=\"hljs-literal\">--unregister</span> &lt;Distro&gt;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Hexo部署GitHub个人博客","date":"2024-08-05T02:42:50.000Z","_content":"\n# Hexo部署GitHub个人博客\n\n## 1. 安装Hexo\n\n安装Hexo需要\n\n- nodejs\n- npm\n\n```bash\n# 注意nodejs版本\n# 需要 ubuntu noble版本\napt install nodejs npm\n# npm 下载慢需要跟换国内源，或者添加代理\nnpm install -g hexo\n```\n\n## 2. Hexo 常用命令\n\n```bash\n# 需要一点时间\nhexo init $proj_name\n\n## 新建post\nhexo new \"My First Blog\"\n\n## 启动本地server\nhexo server\n\n## 生成页面并部署到github\nhexo generate && hexo deploy\n## 可简写\nhexo g\nhexo d\n```\n\n## 3. 配置 GitHub\n\n1. 新建一个github项目\n\n2. 点进项目找到Settings -> Pages 进行配置 GitHub Pages\n\n   ![page](../images/deploy-hexo/page.png)\n\n```bash\n# 将项目clone下来\n# 此处最好配置ssh类型, 不然后面每次部署推送都需要输入账号和token，且ssh不容易出现某些网络问题\ngit clone $url\n# 创建一个分支用来存储hexo源代码\ngit checkout -b hexo\n```\n\n**配置SSH方式**\n\n```bash\n# 生成sshkey\nssh-keygen -t rsa\n## 将公钥复制到github的项目settings -> Deploy keys里\ncat ~/.ssh/id_rsa.pub\n```\n> GitHub从2021年8月13号开始不能用密码推送，需要用token。\n>\n> token需要在右上角个人Settings -> [Developer Settings](https://github.com/settings/apps) -> [Personal access tokens](https://github.com/settings/tokens)里生成。\n>\n> 注意保管，丢失了需要重新生成。\n\n\n## 4. 配置 Hexo\n\n```bash\n## 查看目录结构\ntree -L 1 \n## 输出如下\nMyBlog/\n├── _config.landscape.yml ## 主题配置文件，默认主题landscape，主题可在 https://hexo.io/themes/ 官网自行寻找\n├── _config.yml ## hexo配置文件\n├── node_modules\n├── package-lock.json\n├── package.json\n├── scaffolds\n├── source ## post存放目录，可在同级建立image存放图片\n└── themes\n```\n\n此处`_config.yml`配置自行修改，注意url填写你的 GitHub Pages地址。\n\n![config](../images/deploy-hexo/config.png)\n\n在`_config.yml`最后有deploy的配置选项，默认如图：\n\n![](../images/deploy-hexo/deploy-config.png)\n\n修改为：\n\n![](../images/deploy-hexo/deploy-git.png)\n\nbranch填写你需要部署的分支，我这里选择master；\n\nrepo 填写git地址，可以是https形式，也可以是ssh形式。\n\n## 5. 部署&推送到仓库\n\n```bash\n## hexo 会生成一个 .deploy_git\n## 所以我们将这个文件写入 .gitignore\necho \".deploy_git/\" >> .gitignore\n## 如果之前有过推送需要删掉\ngit rm -r --cached .deploy_git\n\n## 生成页面并部署，因为配置过git仓地址，会自动触发github action 进行部署\nhexo g && hexo d\n\n## 将源文件推送到hexo分支\ngit push origin hexo\n\n```\n\n","source":"_posts/deploy-hexo.md","raw":"---\ntitle: Hexo部署GitHub个人博客\ndate: 2024-08-05 10:42:50\ntags: tools\n---\n\n# Hexo部署GitHub个人博客\n\n## 1. 安装Hexo\n\n安装Hexo需要\n\n- nodejs\n- npm\n\n```bash\n# 注意nodejs版本\n# 需要 ubuntu noble版本\napt install nodejs npm\n# npm 下载慢需要跟换国内源，或者添加代理\nnpm install -g hexo\n```\n\n## 2. Hexo 常用命令\n\n```bash\n# 需要一点时间\nhexo init $proj_name\n\n## 新建post\nhexo new \"My First Blog\"\n\n## 启动本地server\nhexo server\n\n## 生成页面并部署到github\nhexo generate && hexo deploy\n## 可简写\nhexo g\nhexo d\n```\n\n## 3. 配置 GitHub\n\n1. 新建一个github项目\n\n2. 点进项目找到Settings -> Pages 进行配置 GitHub Pages\n\n   ![page](../images/deploy-hexo/page.png)\n\n```bash\n# 将项目clone下来\n# 此处最好配置ssh类型, 不然后面每次部署推送都需要输入账号和token，且ssh不容易出现某些网络问题\ngit clone $url\n# 创建一个分支用来存储hexo源代码\ngit checkout -b hexo\n```\n\n**配置SSH方式**\n\n```bash\n# 生成sshkey\nssh-keygen -t rsa\n## 将公钥复制到github的项目settings -> Deploy keys里\ncat ~/.ssh/id_rsa.pub\n```\n> GitHub从2021年8月13号开始不能用密码推送，需要用token。\n>\n> token需要在右上角个人Settings -> [Developer Settings](https://github.com/settings/apps) -> [Personal access tokens](https://github.com/settings/tokens)里生成。\n>\n> 注意保管，丢失了需要重新生成。\n\n\n## 4. 配置 Hexo\n\n```bash\n## 查看目录结构\ntree -L 1 \n## 输出如下\nMyBlog/\n├── _config.landscape.yml ## 主题配置文件，默认主题landscape，主题可在 https://hexo.io/themes/ 官网自行寻找\n├── _config.yml ## hexo配置文件\n├── node_modules\n├── package-lock.json\n├── package.json\n├── scaffolds\n├── source ## post存放目录，可在同级建立image存放图片\n└── themes\n```\n\n此处`_config.yml`配置自行修改，注意url填写你的 GitHub Pages地址。\n\n![config](../images/deploy-hexo/config.png)\n\n在`_config.yml`最后有deploy的配置选项，默认如图：\n\n![](../images/deploy-hexo/deploy-config.png)\n\n修改为：\n\n![](../images/deploy-hexo/deploy-git.png)\n\nbranch填写你需要部署的分支，我这里选择master；\n\nrepo 填写git地址，可以是https形式，也可以是ssh形式。\n\n## 5. 部署&推送到仓库\n\n```bash\n## hexo 会生成一个 .deploy_git\n## 所以我们将这个文件写入 .gitignore\necho \".deploy_git/\" >> .gitignore\n## 如果之前有过推送需要删掉\ngit rm -r --cached .deploy_git\n\n## 生成页面并部署，因为配置过git仓地址，会自动触发github action 进行部署\nhexo g && hexo d\n\n## 将源文件推送到hexo分支\ngit push origin hexo\n\n```\n\n","slug":"deploy-hexo","published":1,"updated":"2024-08-05T04:37:06.076Z","_id":"clzggs8c100005nuqf1pidcjk","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Hexo部署GitHub个人博客\"><a href=\"#Hexo部署GitHub个人博客\" class=\"headerlink\" title=\"Hexo部署GitHub个人博客\"></a>Hexo部署GitHub个人博客</h1><h2 id=\"1-安装Hexo\"><a href=\"#1-安装Hexo\" class=\"headerlink\" title=\"1. 安装Hexo\"></a>1. 安装Hexo</h2><p>安装Hexo需要</p>\n<ul>\n<li>nodejs</li>\n<li>npm</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 注意nodejs版本</span><br><span class=\"hljs-comment\"># 需要 ubuntu noble版本</span><br>apt install nodejs npm<br><span class=\"hljs-comment\"># npm 下载慢需要跟换国内源，或者添加代理</span><br>npm install -g hexo<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-Hexo-常用命令\"><a href=\"#2-Hexo-常用命令\" class=\"headerlink\" title=\"2. Hexo 常用命令\"></a>2. Hexo 常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 需要一点时间</span><br>hexo init <span class=\"hljs-variable\">$proj_name</span><br><br><span class=\"hljs-comment\">## 新建post</span><br>hexo new <span class=\"hljs-string\">&quot;My First Blog&quot;</span><br><br><span class=\"hljs-comment\">## 启动本地server</span><br>hexo server<br><br><span class=\"hljs-comment\">## 生成页面并部署到github</span><br>hexo generate &amp;&amp; hexo deploy<br><span class=\"hljs-comment\">## 可简写</span><br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-配置-GitHub\"><a href=\"#3-配置-GitHub\" class=\"headerlink\" title=\"3. 配置 GitHub\"></a>3. 配置 GitHub</h2><ol>\n<li><p>新建一个github项目</p>\n</li>\n<li><p>点进项目找到Settings -&gt; Pages 进行配置 GitHub Pages</p>\n<p><img src=\"/../images/deploy-hexo/page.png\" alt=\"page\"></p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 将项目clone下来</span><br><span class=\"hljs-comment\"># 此处最好配置ssh类型, 不然后面每次部署推送都需要输入账号和token，且ssh不容易出现某些网络问题</span><br>git <span class=\"hljs-built_in\">clone</span> <span class=\"hljs-variable\">$url</span><br><span class=\"hljs-comment\"># 创建一个分支用来存储hexo源代码</span><br>git checkout -b hexo<br></code></pre></td></tr></table></figure>\n\n<p><strong>配置SSH方式</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 生成sshkey</span><br>ssh-keygen -t rsa<br><span class=\"hljs-comment\">## 将公钥复制到github的项目settings -&gt; Deploy keys里</span><br><span class=\"hljs-built_in\">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>GitHub从2021年8月13号开始不能用密码推送，需要用token。</p>\n<p>token需要在右上角个人Settings -&gt; <a href=\"https://github.com/settings/apps\">Developer Settings</a> -&gt; <a href=\"https://github.com/settings/tokens\">Personal access tokens</a>里生成。</p>\n<p>注意保管，丢失了需要重新生成。</p>\n</blockquote>\n<h2 id=\"4-配置-Hexo\"><a href=\"#4-配置-Hexo\" class=\"headerlink\" title=\"4. 配置 Hexo\"></a>4. 配置 Hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 查看目录结构</span><br>tree -L 1 <br><span class=\"hljs-comment\">## 输出如下</span><br>MyBlog/<br>├── _config.landscape.yml <span class=\"hljs-comment\">## 主题配置文件，默认主题landscape，主题可在 https://hexo.io/themes/ 官网自行寻找</span><br>├── _config.yml <span class=\"hljs-comment\">## hexo配置文件</span><br>├── node_modules<br>├── package-lock.json<br>├── package.json<br>├── scaffolds<br>├── <span class=\"hljs-built_in\">source</span> <span class=\"hljs-comment\">## post存放目录，可在同级建立image存放图片</span><br>└── themes<br></code></pre></td></tr></table></figure>\n\n<p>此处<code>_config.yml</code>配置自行修改，注意url填写你的 GitHub Pages地址。</p>\n<p><img src=\"/../images/deploy-hexo/config.png\" alt=\"config\"></p>\n<p>在<code>_config.yml</code>最后有deploy的配置选项，默认如图：</p>\n<p><img src=\"/../images/deploy-hexo/deploy-config.png\"></p>\n<p>修改为：</p>\n<p><img src=\"/../images/deploy-hexo/deploy-git.png\"></p>\n<p>branch填写你需要部署的分支，我这里选择master；</p>\n<p>repo 填写git地址，可以是https形式，也可以是ssh形式。</p>\n<h2 id=\"5-部署-推送到仓库\"><a href=\"#5-部署-推送到仓库\" class=\"headerlink\" title=\"5. 部署&amp;推送到仓库\"></a>5. 部署&amp;推送到仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## hexo 会生成一个 .deploy_git</span><br><span class=\"hljs-comment\">## 所以我们将这个文件写入 .gitignore</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;.deploy_git/&quot;</span> &gt;&gt; .gitignore<br><span class=\"hljs-comment\">## 如果之前有过推送需要删掉</span><br>git <span class=\"hljs-built_in\">rm</span> -r --cached .deploy_git<br><br><span class=\"hljs-comment\">## 生成页面并部署，因为配置过git仓地址，会自动触发github action 进行部署</span><br>hexo g &amp;&amp; hexo d<br><br><span class=\"hljs-comment\">## 将源文件推送到hexo分支</span><br>git push origin hexo<br><br></code></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"Hexo部署GitHub个人博客\"><a href=\"#Hexo部署GitHub个人博客\" class=\"headerlink\" title=\"Hexo部署GitHub个人博客\"></a>Hexo部署GitHub个人博客</h1><h2 id=\"1-安装Hexo\"><a href=\"#1-安装Hexo\" class=\"headerlink\" title=\"1. 安装Hexo\"></a>1. 安装Hexo</h2><p>安装Hexo需要</p>\n<ul>\n<li>nodejs</li>\n<li>npm</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 注意nodejs版本</span><br><span class=\"hljs-comment\"># 需要 ubuntu noble版本</span><br>apt install nodejs npm<br><span class=\"hljs-comment\"># npm 下载慢需要跟换国内源，或者添加代理</span><br>npm install -g hexo<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-Hexo-常用命令\"><a href=\"#2-Hexo-常用命令\" class=\"headerlink\" title=\"2. Hexo 常用命令\"></a>2. Hexo 常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 需要一点时间</span><br>hexo init <span class=\"hljs-variable\">$proj_name</span><br><br><span class=\"hljs-comment\">## 新建post</span><br>hexo new <span class=\"hljs-string\">&quot;My First Blog&quot;</span><br><br><span class=\"hljs-comment\">## 启动本地server</span><br>hexo server<br><br><span class=\"hljs-comment\">## 生成页面并部署到github</span><br>hexo generate &amp;&amp; hexo deploy<br><span class=\"hljs-comment\">## 可简写</span><br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-配置-GitHub\"><a href=\"#3-配置-GitHub\" class=\"headerlink\" title=\"3. 配置 GitHub\"></a>3. 配置 GitHub</h2><ol>\n<li><p>新建一个github项目</p>\n</li>\n<li><p>点进项目找到Settings -&gt; Pages 进行配置 GitHub Pages</p>\n<p><img src=\"/../images/deploy-hexo/page.png\" alt=\"page\"></p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 将项目clone下来</span><br><span class=\"hljs-comment\"># 此处最好配置ssh类型, 不然后面每次部署推送都需要输入账号和token，且ssh不容易出现某些网络问题</span><br>git <span class=\"hljs-built_in\">clone</span> <span class=\"hljs-variable\">$url</span><br><span class=\"hljs-comment\"># 创建一个分支用来存储hexo源代码</span><br>git checkout -b hexo<br></code></pre></td></tr></table></figure>\n\n<p><strong>配置SSH方式</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 生成sshkey</span><br>ssh-keygen -t rsa<br><span class=\"hljs-comment\">## 将公钥复制到github的项目settings -&gt; Deploy keys里</span><br><span class=\"hljs-built_in\">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>GitHub从2021年8月13号开始不能用密码推送，需要用token。</p>\n<p>token需要在右上角个人Settings -&gt; <a href=\"https://github.com/settings/apps\">Developer Settings</a> -&gt; <a href=\"https://github.com/settings/tokens\">Personal access tokens</a>里生成。</p>\n<p>注意保管，丢失了需要重新生成。</p>\n</blockquote>\n<h2 id=\"4-配置-Hexo\"><a href=\"#4-配置-Hexo\" class=\"headerlink\" title=\"4. 配置 Hexo\"></a>4. 配置 Hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 查看目录结构</span><br>tree -L 1 <br><span class=\"hljs-comment\">## 输出如下</span><br>MyBlog/<br>├── _config.landscape.yml <span class=\"hljs-comment\">## 主题配置文件，默认主题landscape，主题可在 https://hexo.io/themes/ 官网自行寻找</span><br>├── _config.yml <span class=\"hljs-comment\">## hexo配置文件</span><br>├── node_modules<br>├── package-lock.json<br>├── package.json<br>├── scaffolds<br>├── <span class=\"hljs-built_in\">source</span> <span class=\"hljs-comment\">## post存放目录，可在同级建立image存放图片</span><br>└── themes<br></code></pre></td></tr></table></figure>\n\n<p>此处<code>_config.yml</code>配置自行修改，注意url填写你的 GitHub Pages地址。</p>\n<p><img src=\"/../images/deploy-hexo/config.png\" alt=\"config\"></p>\n<p>在<code>_config.yml</code>最后有deploy的配置选项，默认如图：</p>\n<p><img src=\"/../images/deploy-hexo/deploy-config.png\"></p>\n<p>修改为：</p>\n<p><img src=\"/../images/deploy-hexo/deploy-git.png\"></p>\n<p>branch填写你需要部署的分支，我这里选择master；</p>\n<p>repo 填写git地址，可以是https形式，也可以是ssh形式。</p>\n<h2 id=\"5-部署-推送到仓库\"><a href=\"#5-部署-推送到仓库\" class=\"headerlink\" title=\"5. 部署&amp;推送到仓库\"></a>5. 部署&amp;推送到仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## hexo 会生成一个 .deploy_git</span><br><span class=\"hljs-comment\">## 所以我们将这个文件写入 .gitignore</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;.deploy_git/&quot;</span> &gt;&gt; .gitignore<br><span class=\"hljs-comment\">## 如果之前有过推送需要删掉</span><br>git <span class=\"hljs-built_in\">rm</span> -r --cached .deploy_git<br><br><span class=\"hljs-comment\">## 生成页面并部署，因为配置过git仓地址，会自动触发github action 进行部署</span><br>hexo g &amp;&amp; hexo d<br><br><span class=\"hljs-comment\">## 将源文件推送到hexo分支</span><br>git push origin hexo<br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"Shell 实用技巧","date":"2024-08-06T12:06:47.000Z","_content":"# Shell 实用技巧\n1. **保存多个命令的输出**\n    - 使用`{}`将命令组合在一起，然后重定向\n        - 花括号实际上是保留字，两侧必须有空白字符，闭合括号前面的命令的分号不能少\n    - 使用`()`将命令放入子shell重定向输出\n\n    用子shell的方式不会改变当前shell的环境，比如下面的命令组包含`cd ..`，在用花括号的方式中会切换当前路径，而子shell方式中不会切换当前shell的路径，所有的命令都在子shell当中执行，不影响当前shell环境。\n\n    ```bash\n    ## 可以用{} or ()\n    { ls; cd ..; pwd; ls; } > /tmp/all.out\n    (ls; cd ..; pwd; ls) > /tmp/all.out\n\n    test $result -eq 1 && { echo \"Result\" is 1; exit 0; } \\\n        || { echo \"Run Away!\"; exit 120; }\n    ```\n\n2. **跳过文件标题**\n```bash\n## 显示后十行\ntail -n 10\ntail -10 \n## 跳过第一行, 可用于一些跳过标题的情况\ntail -n +2\n```\n\n3. **使用或替换内建命令与外部命令**\n```bash\n## type 可查看命令属于哪种,builtin属于内建命令\nroot@localhost:~# type cd\ncd is a shell builtin\n\n## 可查看有哪些内建命令\nenable -a\n## 关闭shell内建命令\nenable -n $cmd\n## 忽略shell函数的ls,执行内建ls命令\ncommand ls\n```\n4. **交换STDERR和STDOUT**\n```bash\n./myscript 3>&1 1>&2 2>&3\n\n## 操作完成后关闭文件描述符3\n./myscript 3>&1 1>stdout.logfile 2>&3- | tee -a stderr.logfile\n```\n\n5. **避免意外覆盖文件**\n```bash\n## 告诉bash重定向输出时不要覆盖任何现有文件\nset -o noclobber\n## 关闭该选项\nset +o noclobber\n## 使用 >| 重定向输出。即便是设置了 noclobber，bash 也会忽略该选项，并覆盖文件\necho rewrite >| tmp.txt\n```\n> noclobber 选项仅针对 shell 重定向输出时的文件覆盖行为。它并不能阻止其他程序覆盖文件\n\n6. **将数据与脚本存放在一起**\n```bash\n$ cat ext\n#\n# 下面是here-document\n#\ngrep $1 <<EOF\nmike x.123\njoe  x.234\nsue  x.555\npete x.818\nsara x.822\nbill x.919\nEOF\n\n$ cat donors\n#\n# 里面的$100中的$1会被误解释为参数$1, 因此需要加''或\\EOF\n# \ngrep $1 <<'EOF'\n# 捐赠人及其捐赠额\npete $100\njoe  $200\nsam  $ 25\nbill $ 9\nEOF\n\n$ cat myscript.sh\n## 使用 <<-，然后就可以在每行的开头用制表符（仅限制表符！）缩进shell 脚本中的 here-document 部分\n...\n    grep $1 <<-'EOF'\n        lots of data\n        can go here\n        it's indented with tabs\n        to match the script's indenting\n        but the leading tabs are\n        discarded when read\n        EOF\n    ls\n...\n```\n7. **until, select**\n\n    until 循环用于在条件为假时重复执行一组命令。与 while 循环相反，它在每次迭代开始时检查条件。\n\n    select 循环用于创建一个简单的菜单选择。它会显示一个菜单并等待用户输入选择，然后根据选择执行相应的命令。\n    select 语句能够轻松地在 STDERR 上为用户生成编号列表。\n    用户所输入的选项编号保存在 $REPLY 中，选项值保存在 select 语句指定的变量中。\n\n8. **同时执行多个命令**\n```bash\n## 3 个命令的输出会在屏幕上交错出现\n## 最后一条命令不在后台运行\nls & date & cd \n## 三条命令都在后台运行\nls & date & cd &\n```","source":"_posts/shell-action.md","raw":"---\ntitle: Shell 实用技巧\ndate: 2024-08-06 20:06:47\ntags: linux\n---\n# Shell 实用技巧\n1. **保存多个命令的输出**\n    - 使用`{}`将命令组合在一起，然后重定向\n        - 花括号实际上是保留字，两侧必须有空白字符，闭合括号前面的命令的分号不能少\n    - 使用`()`将命令放入子shell重定向输出\n\n    用子shell的方式不会改变当前shell的环境，比如下面的命令组包含`cd ..`，在用花括号的方式中会切换当前路径，而子shell方式中不会切换当前shell的路径，所有的命令都在子shell当中执行，不影响当前shell环境。\n\n    ```bash\n    ## 可以用{} or ()\n    { ls; cd ..; pwd; ls; } > /tmp/all.out\n    (ls; cd ..; pwd; ls) > /tmp/all.out\n\n    test $result -eq 1 && { echo \"Result\" is 1; exit 0; } \\\n        || { echo \"Run Away!\"; exit 120; }\n    ```\n\n2. **跳过文件标题**\n```bash\n## 显示后十行\ntail -n 10\ntail -10 \n## 跳过第一行, 可用于一些跳过标题的情况\ntail -n +2\n```\n\n3. **使用或替换内建命令与外部命令**\n```bash\n## type 可查看命令属于哪种,builtin属于内建命令\nroot@localhost:~# type cd\ncd is a shell builtin\n\n## 可查看有哪些内建命令\nenable -a\n## 关闭shell内建命令\nenable -n $cmd\n## 忽略shell函数的ls,执行内建ls命令\ncommand ls\n```\n4. **交换STDERR和STDOUT**\n```bash\n./myscript 3>&1 1>&2 2>&3\n\n## 操作完成后关闭文件描述符3\n./myscript 3>&1 1>stdout.logfile 2>&3- | tee -a stderr.logfile\n```\n\n5. **避免意外覆盖文件**\n```bash\n## 告诉bash重定向输出时不要覆盖任何现有文件\nset -o noclobber\n## 关闭该选项\nset +o noclobber\n## 使用 >| 重定向输出。即便是设置了 noclobber，bash 也会忽略该选项，并覆盖文件\necho rewrite >| tmp.txt\n```\n> noclobber 选项仅针对 shell 重定向输出时的文件覆盖行为。它并不能阻止其他程序覆盖文件\n\n6. **将数据与脚本存放在一起**\n```bash\n$ cat ext\n#\n# 下面是here-document\n#\ngrep $1 <<EOF\nmike x.123\njoe  x.234\nsue  x.555\npete x.818\nsara x.822\nbill x.919\nEOF\n\n$ cat donors\n#\n# 里面的$100中的$1会被误解释为参数$1, 因此需要加''或\\EOF\n# \ngrep $1 <<'EOF'\n# 捐赠人及其捐赠额\npete $100\njoe  $200\nsam  $ 25\nbill $ 9\nEOF\n\n$ cat myscript.sh\n## 使用 <<-，然后就可以在每行的开头用制表符（仅限制表符！）缩进shell 脚本中的 here-document 部分\n...\n    grep $1 <<-'EOF'\n        lots of data\n        can go here\n        it's indented with tabs\n        to match the script's indenting\n        but the leading tabs are\n        discarded when read\n        EOF\n    ls\n...\n```\n7. **until, select**\n\n    until 循环用于在条件为假时重复执行一组命令。与 while 循环相反，它在每次迭代开始时检查条件。\n\n    select 循环用于创建一个简单的菜单选择。它会显示一个菜单并等待用户输入选择，然后根据选择执行相应的命令。\n    select 语句能够轻松地在 STDERR 上为用户生成编号列表。\n    用户所输入的选项编号保存在 $REPLY 中，选项值保存在 select 语句指定的变量中。\n\n8. **同时执行多个命令**\n```bash\n## 3 个命令的输出会在屏幕上交错出现\n## 最后一条命令不在后台运行\nls & date & cd \n## 三条命令都在后台运行\nls & date & cd &\n```","slug":"shell-action","published":1,"updated":"2024-08-06T14:02:52.523Z","_id":"clzig5ytz0000z1ur2rvl482q","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Shell-实用技巧\"><a href=\"#Shell-实用技巧\" class=\"headerlink\" title=\"Shell 实用技巧\"></a>Shell 实用技巧</h1><ol>\n<li><p><strong>保存多个命令的输出</strong></p>\n<ul>\n<li>使用<code>&#123;&#125;</code>将命令组合在一起，然后重定向<ul>\n<li>花括号实际上是保留字，两侧必须有空白字符，闭合括号前面的命令的分号不能少</li>\n</ul>\n</li>\n<li>使用<code>()</code>将命令放入子shell重定向输出</li>\n</ul>\n<p> 用子shell的方式不会改变当前shell的环境，比如下面的命令组包含<code>cd ..</code>，在用花括号的方式中会切换当前路径，而子shell方式中不会切换当前shell的路径，所有的命令都在子shell当中执行，不影响当前shell环境。</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 可以用&#123;&#125; or ()</span><br>&#123; <span class=\"hljs-built_in\">ls</span>; <span class=\"hljs-built_in\">cd</span> ..; <span class=\"hljs-built_in\">pwd</span>; <span class=\"hljs-built_in\">ls</span>; &#125; &gt; /tmp/all.out<br>(<span class=\"hljs-built_in\">ls</span>; <span class=\"hljs-built_in\">cd</span> ..; <span class=\"hljs-built_in\">pwd</span>; <span class=\"hljs-built_in\">ls</span>) &gt; /tmp/all.out<br><br><span class=\"hljs-built_in\">test</span> <span class=\"hljs-variable\">$result</span> -eq 1 &amp;&amp; &#123; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Result&quot;</span> is 1; <span class=\"hljs-built_in\">exit</span> 0; &#125; \\<br>    || &#123; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Run Away!&quot;</span>; <span class=\"hljs-built_in\">exit</span> 120; &#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>跳过文件标题</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 显示后十行</span><br><span class=\"hljs-built_in\">tail</span> -n 10<br><span class=\"hljs-built_in\">tail</span> -10 <br><span class=\"hljs-comment\">## 跳过第一行, 可用于一些跳过标题的情况</span><br><span class=\"hljs-built_in\">tail</span> -n +2<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用或替换内建命令与外部命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## type 可查看命令属于哪种,builtin属于内建命令</span><br>root@localhost:~# <span class=\"hljs-built_in\">type</span> <span class=\"hljs-built_in\">cd</span><br><span class=\"hljs-built_in\">cd</span> is a shell <span class=\"hljs-built_in\">builtin</span><br><br><span class=\"hljs-comment\">## 可查看有哪些内建命令</span><br><span class=\"hljs-built_in\">enable</span> -a<br><span class=\"hljs-comment\">## 关闭shell内建命令</span><br><span class=\"hljs-built_in\">enable</span> -n <span class=\"hljs-variable\">$cmd</span><br><span class=\"hljs-comment\">## 忽略shell函数的ls,执行内建ls命令</span><br><span class=\"hljs-built_in\">command</span> <span class=\"hljs-built_in\">ls</span><br></code></pre></td></tr></table></figure></li>\n<li><p><strong>交换STDERR和STDOUT</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">./myscript 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3<br><br><span class=\"hljs-comment\">## 操作完成后关闭文件描述符3</span><br>./myscript 3&gt;&amp;1 1&gt;stdout.logfile 2&gt;&amp;3- | <span class=\"hljs-built_in\">tee</span> -a stderr.logfile<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>避免意外覆盖文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 告诉bash重定向输出时不要覆盖任何现有文件</span><br><span class=\"hljs-built_in\">set</span> -o noclobber<br><span class=\"hljs-comment\">## 关闭该选项</span><br><span class=\"hljs-built_in\">set</span> +o noclobber<br><span class=\"hljs-comment\">## 使用 &gt;| 重定向输出。即便是设置了 noclobber，bash 也会忽略该选项，并覆盖文件</span><br><span class=\"hljs-built_in\">echo</span> rewrite &gt;| tmp.txt<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>noclobber 选项仅针对 shell 重定向输出时的文件覆盖行为。它并不能阻止其他程序覆盖文件</p>\n</blockquote>\n</li>\n<li><p><strong>将数据与脚本存放在一起</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cat</span> ext<br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># 下面是here-document</span><br><span class=\"hljs-comment\">#</span><br>grep <span class=\"hljs-variable\">$1</span> &lt;&lt;<span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\">mike x.123</span><br><span class=\"hljs-string\">joe  x.234</span><br><span class=\"hljs-string\">sue  x.555</span><br><span class=\"hljs-string\">pete x.818</span><br><span class=\"hljs-string\">sara x.822</span><br><span class=\"hljs-string\">bill x.919</span><br><span class=\"hljs-string\">EOF</span><br><br>$ <span class=\"hljs-built_in\">cat</span> donors<br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># 里面的$100中的$1会被误解释为参数$1, 因此需要加&#x27;&#x27;或\\EOF</span><br><span class=\"hljs-comment\"># </span><br>grep <span class=\"hljs-variable\">$1</span> &lt;&lt;<span class=\"hljs-string\">&#x27;EOF&#x27;</span><br><span class=\"hljs-comment\"># 捐赠人及其捐赠额</span><br>pete <span class=\"hljs-variable\">$100</span><br>joe  <span class=\"hljs-variable\">$200</span><br>sam  $ 25<br>bill $ 9<br>EOF<br><br>$ <span class=\"hljs-built_in\">cat</span> myscript.sh<br><span class=\"hljs-comment\">## 使用 &lt;&lt;-，然后就可以在每行的开头用制表符（仅限制表符！）缩进shell 脚本中的 here-document 部分</span><br>...<br>    grep <span class=\"hljs-variable\">$1</span> &lt;&lt;-<span class=\"hljs-string\">&#x27;EOF&#x27;</span><br>        lots of data<br>        can go here<br>        it<span class=\"hljs-string\">&#x27;s indented with tabs</span><br><span class=\"hljs-string\">        to match the script&#x27;</span>s indenting<br>        but the leading tabs are<br>        discarded when <span class=\"hljs-built_in\">read</span><br>        EOF<br>    <span class=\"hljs-built_in\">ls</span><br>...<br></code></pre></td></tr></table></figure></li>\n<li><p><strong>until, select</strong></p>\n<p> until 循环用于在条件为假时重复执行一组命令。与 while 循环相反，它在每次迭代开始时检查条件。</p>\n<p> select 循环用于创建一个简单的菜单选择。它会显示一个菜单并等待用户输入选择，然后根据选择执行相应的命令。<br> select 语句能够轻松地在 STDERR 上为用户生成编号列表。<br> 用户所输入的选项编号保存在 $REPLY 中，选项值保存在 select 语句指定的变量中。</p>\n</li>\n<li><p><strong>同时执行多个命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 3 个命令的输出会在屏幕上交错出现</span><br><span class=\"hljs-comment\">## 最后一条命令不在后台运行</span><br><span class=\"hljs-built_in\">ls</span> &amp; <span class=\"hljs-built_in\">date</span> &amp; <span class=\"hljs-built_in\">cd</span> <br><span class=\"hljs-comment\">## 三条命令都在后台运行</span><br><span class=\"hljs-built_in\">ls</span> &amp; <span class=\"hljs-built_in\">date</span> &amp; <span class=\"hljs-built_in\">cd</span> &amp;<br></code></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"Shell-实用技巧\"><a href=\"#Shell-实用技巧\" class=\"headerlink\" title=\"Shell 实用技巧\"></a>Shell 实用技巧</h1><ol>\n<li><p><strong>保存多个命令的输出</strong></p>\n<ul>\n<li>使用<code>&#123;&#125;</code>将命令组合在一起，然后重定向<ul>\n<li>花括号实际上是保留字，两侧必须有空白字符，闭合括号前面的命令的分号不能少</li>\n</ul>\n</li>\n<li>使用<code>()</code>将命令放入子shell重定向输出</li>\n</ul>\n<p> 用子shell的方式不会改变当前shell的环境，比如下面的命令组包含<code>cd ..</code>，在用花括号的方式中会切换当前路径，而子shell方式中不会切换当前shell的路径，所有的命令都在子shell当中执行，不影响当前shell环境。</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 可以用&#123;&#125; or ()</span><br>&#123; <span class=\"hljs-built_in\">ls</span>; <span class=\"hljs-built_in\">cd</span> ..; <span class=\"hljs-built_in\">pwd</span>; <span class=\"hljs-built_in\">ls</span>; &#125; &gt; /tmp/all.out<br>(<span class=\"hljs-built_in\">ls</span>; <span class=\"hljs-built_in\">cd</span> ..; <span class=\"hljs-built_in\">pwd</span>; <span class=\"hljs-built_in\">ls</span>) &gt; /tmp/all.out<br><br><span class=\"hljs-built_in\">test</span> <span class=\"hljs-variable\">$result</span> -eq 1 &amp;&amp; &#123; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Result&quot;</span> is 1; <span class=\"hljs-built_in\">exit</span> 0; &#125; \\<br>    || &#123; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Run Away!&quot;</span>; <span class=\"hljs-built_in\">exit</span> 120; &#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>跳过文件标题</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 显示后十行</span><br><span class=\"hljs-built_in\">tail</span> -n 10<br><span class=\"hljs-built_in\">tail</span> -10 <br><span class=\"hljs-comment\">## 跳过第一行, 可用于一些跳过标题的情况</span><br><span class=\"hljs-built_in\">tail</span> -n +2<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用或替换内建命令与外部命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## type 可查看命令属于哪种,builtin属于内建命令</span><br>root@localhost:~# <span class=\"hljs-built_in\">type</span> <span class=\"hljs-built_in\">cd</span><br><span class=\"hljs-built_in\">cd</span> is a shell <span class=\"hljs-built_in\">builtin</span><br><br><span class=\"hljs-comment\">## 可查看有哪些内建命令</span><br><span class=\"hljs-built_in\">enable</span> -a<br><span class=\"hljs-comment\">## 关闭shell内建命令</span><br><span class=\"hljs-built_in\">enable</span> -n <span class=\"hljs-variable\">$cmd</span><br><span class=\"hljs-comment\">## 忽略shell函数的ls,执行内建ls命令</span><br><span class=\"hljs-built_in\">command</span> <span class=\"hljs-built_in\">ls</span><br></code></pre></td></tr></table></figure></li>\n<li><p><strong>交换STDERR和STDOUT</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">./myscript 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3<br><br><span class=\"hljs-comment\">## 操作完成后关闭文件描述符3</span><br>./myscript 3&gt;&amp;1 1&gt;stdout.logfile 2&gt;&amp;3- | <span class=\"hljs-built_in\">tee</span> -a stderr.logfile<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>避免意外覆盖文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 告诉bash重定向输出时不要覆盖任何现有文件</span><br><span class=\"hljs-built_in\">set</span> -o noclobber<br><span class=\"hljs-comment\">## 关闭该选项</span><br><span class=\"hljs-built_in\">set</span> +o noclobber<br><span class=\"hljs-comment\">## 使用 &gt;| 重定向输出。即便是设置了 noclobber，bash 也会忽略该选项，并覆盖文件</span><br><span class=\"hljs-built_in\">echo</span> rewrite &gt;| tmp.txt<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>noclobber 选项仅针对 shell 重定向输出时的文件覆盖行为。它并不能阻止其他程序覆盖文件</p>\n</blockquote>\n</li>\n<li><p><strong>将数据与脚本存放在一起</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cat</span> ext<br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># 下面是here-document</span><br><span class=\"hljs-comment\">#</span><br>grep <span class=\"hljs-variable\">$1</span> &lt;&lt;<span class=\"hljs-string\">EOF</span><br><span class=\"hljs-string\">mike x.123</span><br><span class=\"hljs-string\">joe  x.234</span><br><span class=\"hljs-string\">sue  x.555</span><br><span class=\"hljs-string\">pete x.818</span><br><span class=\"hljs-string\">sara x.822</span><br><span class=\"hljs-string\">bill x.919</span><br><span class=\"hljs-string\">EOF</span><br><br>$ <span class=\"hljs-built_in\">cat</span> donors<br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># 里面的$100中的$1会被误解释为参数$1, 因此需要加&#x27;&#x27;或\\EOF</span><br><span class=\"hljs-comment\"># </span><br>grep <span class=\"hljs-variable\">$1</span> &lt;&lt;<span class=\"hljs-string\">&#x27;EOF&#x27;</span><br><span class=\"hljs-comment\"># 捐赠人及其捐赠额</span><br>pete <span class=\"hljs-variable\">$100</span><br>joe  <span class=\"hljs-variable\">$200</span><br>sam  $ 25<br>bill $ 9<br>EOF<br><br>$ <span class=\"hljs-built_in\">cat</span> myscript.sh<br><span class=\"hljs-comment\">## 使用 &lt;&lt;-，然后就可以在每行的开头用制表符（仅限制表符！）缩进shell 脚本中的 here-document 部分</span><br>...<br>    grep <span class=\"hljs-variable\">$1</span> &lt;&lt;-<span class=\"hljs-string\">&#x27;EOF&#x27;</span><br>        lots of data<br>        can go here<br>        it<span class=\"hljs-string\">&#x27;s indented with tabs</span><br><span class=\"hljs-string\">        to match the script&#x27;</span>s indenting<br>        but the leading tabs are<br>        discarded when <span class=\"hljs-built_in\">read</span><br>        EOF<br>    <span class=\"hljs-built_in\">ls</span><br>...<br></code></pre></td></tr></table></figure></li>\n<li><p><strong>until, select</strong></p>\n<p> until 循环用于在条件为假时重复执行一组命令。与 while 循环相反，它在每次迭代开始时检查条件。</p>\n<p> select 循环用于创建一个简单的菜单选择。它会显示一个菜单并等待用户输入选择，然后根据选择执行相应的命令。<br> select 语句能够轻松地在 STDERR 上为用户生成编号列表。<br> 用户所输入的选项编号保存在 $REPLY 中，选项值保存在 select 语句指定的变量中。</p>\n</li>\n<li><p><strong>同时执行多个命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 3 个命令的输出会在屏幕上交错出现</span><br><span class=\"hljs-comment\">## 最后一条命令不在后台运行</span><br><span class=\"hljs-built_in\">ls</span> &amp; <span class=\"hljs-built_in\">date</span> &amp; <span class=\"hljs-built_in\">cd</span> <br><span class=\"hljs-comment\">## 三条命令都在后台运行</span><br><span class=\"hljs-built_in\">ls</span> &amp; <span class=\"hljs-built_in\">date</span> &amp; <span class=\"hljs-built_in\">cd</span> &amp;<br></code></pre></td></tr></table></figure></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clzfp14zb000089iq6eln9c08","tag_id":"clzfp14zo000189iqhhdmgdg1","_id":"clzfp14zr000289iqakktfxsw"},{"post_id":"clzfp151c000889iq7cs2ef51","tag_id":"clzfp1517000689iq9ipr9cgo","_id":"clzfp151i000b89iq9tlq321f"},{"post_id":"clzfp150p000389iqb84mgp7m","tag_id":"clzfp1517000689iq9ipr9cgo","_id":"clzfp151k000d89iq7x964jda"},{"post_id":"clzfp1514000589iqfs7yhb5k","tag_id":"clzfp151g000a89iq9ynh2jwp","_id":"clzfp151q000f89iq99t0ckxk"},{"post_id":"clzfp1518000789iqh3v9cibc","tag_id":"clzfp1517000689iq9ipr9cgo","_id":"clzfp151r000h89iq0zwi012b"},{"post_id":"clzfp151e000989iqa5m90g51","tag_id":"clzfp151q000g89iq2yw3gqaa","_id":"clzfp151t000j89iq3oe394nf"},{"post_id":"clzfp151i000c89iq2nji3bud","tag_id":"clzfp151q000g89iq2yw3gqaa","_id":"clzfp151u000k89iqb6gufjx7"},{"post_id":"clzfp1521000l89iqdx9634q3","tag_id":"clzfp151g000a89iq9ynh2jwp","_id":"clzfp153d000n89iqhlpl979d"},{"post_id":"clzfp152c000m89iq50f65vez","tag_id":"clzfp1517000689iq9ipr9cgo","_id":"clzfp153l000o89iq7668gm87"},{"post_id":"clzfp1568000p89iq83md6x45","tag_id":"clzfp1517000689iq9ipr9cgo","_id":"clzfp156n000r89iq1fuscxnh"},{"post_id":"clzfp156c000q89iq4jkw30vt","tag_id":"clzfp1517000689iq9ipr9cgo","_id":"clzfp156q000s89iq627ebg51"},{"post_id":"clzggs8c100005nuqf1pidcjk","tag_id":"clzfp1517000689iq9ipr9cgo","_id":"clzggtlxi00025nuqhncn2bf6"},{"post_id":"clzig5ytz0000z1ur2rvl482q","tag_id":"clzfp14zo000189iqhhdmgdg1","_id":"clzig91pr00002iurh7u7b8nl"}],"Tag":[{"name":"linux","_id":"clzfp14zo000189iqhhdmgdg1"},{"name":"tools","_id":"clzfp1517000689iq9ipr9cgo"},{"name":"ansible","_id":"clzfp151g000a89iq9ynh2jwp"},{"name":"k8s","_id":"clzfp151q000g89iq2yw3gqaa"}]}}